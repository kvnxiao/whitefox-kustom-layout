
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a24  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000160  1fff8000  1fff8000  00028000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8160  1fff8160  00018fec  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8160  1fff8160  00028000  2**0
                  ALLOC
  4 .data         0000061c  1fff89d0  00009a24  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000012ac  1fff8fec  0000a040  00018fec  2**2
                  ALLOC
  6 .debug_info   0000dd70  00000000  00000000  00018fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000299c  00000000  00000000  00026d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000790  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000988  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000a1d4  00000000  00000000  0002a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000050b1  00000000  00000000  000349e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0002091a  00000000  00000000  00039a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000038  00000000  00000000  0005a3af  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  0005a3e7  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000014dc  00000000  00000000  0005a41c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005c64  00000000  00000000  0005b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <_app_rom>:
    2000:	20008000 	.word	0x20008000
    2004:	000021bd 	.word	0x000021bd
    2008:	00002481 	.word	0x00002481
    200c:	0000248d 	.word	0x0000248d
    2010:	000024c1 	.word	0x000024c1
    2014:	00002501 	.word	0x00002501
    2018:	00002541 	.word	0x00002541
    201c:	0000243d 	.word	0x0000243d
    2020:	0000243d 	.word	0x0000243d
    2024:	0000243d 	.word	0x0000243d
    2028:	0000243d 	.word	0x0000243d
    202c:	00002479 	.word	0x00002479
    2030:	00002479 	.word	0x00002479
    2034:	0000243d 	.word	0x0000243d
    2038:	00002479 	.word	0x00002479
    203c:	0000242d 	.word	0x0000242d
    2040:	00002479 	.word	0x00002479
    2044:	00002479 	.word	0x00002479
    2048:	00002479 	.word	0x00002479
    204c:	00002479 	.word	0x00002479
    2050:	00002479 	.word	0x00002479
    2054:	00002479 	.word	0x00002479
    2058:	00002479 	.word	0x00002479
    205c:	00002479 	.word	0x00002479
    2060:	00002479 	.word	0x00002479
    2064:	00002479 	.word	0x00002479
    2068:	00002479 	.word	0x00002479
    206c:	00002479 	.word	0x00002479
    2070:	00002479 	.word	0x00002479
    2074:	00002479 	.word	0x00002479
    2078:	00002479 	.word	0x00002479
    207c:	00002479 	.word	0x00002479
    2080:	00002479 	.word	0x00002479
    2084:	00002479 	.word	0x00002479
    2088:	00002479 	.word	0x00002479
    208c:	00002479 	.word	0x00002479
    2090:	00002479 	.word	0x00002479
    2094:	00002479 	.word	0x00002479
    2098:	00002479 	.word	0x00002479
    209c:	00002479 	.word	0x00002479
    20a0:	00002719 	.word	0x00002719
    20a4:	00002479 	.word	0x00002479
    20a8:	00002479 	.word	0x00002479
    20ac:	00002479 	.word	0x00002479
    20b0:	00002479 	.word	0x00002479
    20b4:	00002479 	.word	0x00002479
    20b8:	00002479 	.word	0x00002479
    20bc:	00002479 	.word	0x00002479
    20c0:	00002479 	.word	0x00002479
    20c4:	00002479 	.word	0x00002479
    20c8:	00002479 	.word	0x00002479
    20cc:	00002479 	.word	0x00002479
    20d0:	00002479 	.word	0x00002479
    20d4:	00002479 	.word	0x00002479
    20d8:	00002479 	.word	0x00002479
    20dc:	00002479 	.word	0x00002479
    20e0:	00002479 	.word	0x00002479
    20e4:	00002479 	.word	0x00002479
    20e8:	00002479 	.word	0x00002479
    20ec:	00002479 	.word	0x00002479
    20f0:	00002479 	.word	0x00002479
    20f4:	00002479 	.word	0x00002479
    20f8:	00002479 	.word	0x00002479
    20fc:	00002479 	.word	0x00002479
    2100:	00002479 	.word	0x00002479
    2104:	00002479 	.word	0x00002479
    2108:	00002479 	.word	0x00002479
    210c:	00002479 	.word	0x00002479
    2110:	00002479 	.word	0x00002479
    2114:	00002479 	.word	0x00002479
    2118:	00002479 	.word	0x00002479
    211c:	00002479 	.word	0x00002479
    2120:	00002479 	.word	0x00002479
    2124:	00002479 	.word	0x00002479
    2128:	00002479 	.word	0x00002479
    212c:	00002479 	.word	0x00002479
    2130:	00002479 	.word	0x00002479
    2134:	00002479 	.word	0x00002479
    2138:	00002479 	.word	0x00002479
    213c:	00002479 	.word	0x00002479
    2140:	00002479 	.word	0x00002479
    2144:	00002479 	.word	0x00002479
    2148:	00002479 	.word	0x00002479
    214c:	00002479 	.word	0x00002479
    2150:	00002479 	.word	0x00002479
    2154:	00002479 	.word	0x00002479
    2158:	00002479 	.word	0x00002479
    215c:	00002479 	.word	0x00002479
    2160:	00002479 	.word	0x00002479
    2164:	00004ea1 	.word	0x00004ea1
    2168:	00002479 	.word	0x00002479
    216c:	00002479 	.word	0x00002479
    2170:	00002479 	.word	0x00002479
    2174:	00002479 	.word	0x00002479
    2178:	00002479 	.word	0x00002479
    217c:	00002479 	.word	0x00002479
    2180:	00002479 	.word	0x00002479
    2184:	00002479 	.word	0x00002479
    2188:	00002479 	.word	0x00002479
    218c:	00002479 	.word	0x00002479
    2190:	00002479 	.word	0x00002479
    2194:	00002479 	.word	0x00002479
    2198:	00002479 	.word	0x00002479
    219c:	00002479 	.word	0x00002479
    21a0:	00002479 	.word	0x00002479
    21a4:	00002479 	.word	0x00002479
    21a8:	00002479 	.word	0x00002479
    21ac:	00002479 	.word	0x00002479
    21b0:	00002479 	.word	0x00002479
    21b4:	00002479 	.word	0x00002479
    21b8:	00002479 	.word	0x00002479

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b3e      	ldr	r3, [pc, #248]	; (22b8 <ResetHandler+0xfc>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a38      	ldr	r2, [pc, #224]	; (22bc <ResetHandler+0x100>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a38      	ldr	r2, [pc, #224]	; (22c0 <ResetHandler+0x104>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a38      	ldr	r2, [pc, #224]	; (22c4 <ResetHandler+0x108>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
    21ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21ee:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f0:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f4:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	0711      	lsls	r1, r2, #28
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fc:	bf42      	ittt	mi
    21fe:	781a      	ldrbmi	r2, [r3, #0]
    2200:	f042 0208 	orrmi.w	r2, r2, #8
    2204:	701a      	strbmi	r2, [r3, #0]
    2206:	4a30      	ldr	r2, [pc, #192]	; (22c8 <ResetHandler+0x10c>)
    2208:	4b30      	ldr	r3, [pc, #192]	; (22cc <ResetHandler+0x110>)
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220a:	4931      	ldr	r1, [pc, #196]	; (22d0 <ResetHandler+0x114>)
    220c:	428b      	cmp	r3, r1
    220e:	d204      	bcs.n	221a <ResetHandler+0x5e>
    2210:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2214:	f843 1b04 	str.w	r1, [r3], #4
    2218:	e7f7      	b.n	220a <ResetHandler+0x4e>
    221a:	4b2e      	ldr	r3, [pc, #184]	; (22d4 <ResetHandler+0x118>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221c:	4a2e      	ldr	r2, [pc, #184]	; (22d8 <ResetHandler+0x11c>)
    221e:	4293      	cmp	r3, r2
    2220:	d203      	bcs.n	222a <ResetHandler+0x6e>
    2222:	2200      	movs	r2, #0
    2224:	f843 2b04 	str.w	r2, [r3], #4
    2228:	e7f8      	b.n	221c <ResetHandler+0x60>
    222a:	4b2c      	ldr	r3, [pc, #176]	; (22dc <ResetHandler+0x120>)
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
	{
		NVIC_SET_PRIORITY( i, 128 );
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	f803 2b01 	strb.w	r2, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2232:	4a2b      	ldr	r2, [pc, #172]	; (22e0 <ResetHandler+0x124>)
    2234:	4293      	cmp	r3, r2
    2236:	d1f9      	bne.n	222c <ResetHandler+0x70>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <ResetHandler+0x128>)
    223a:	220a      	movs	r2, #10
    223c:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    223e:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2242:	2224      	movs	r2, #36	; 0x24
    2244:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2246:	22a0      	movs	r2, #160	; 0xa0
    2248:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224c:	4b26      	ldr	r3, [pc, #152]	; (22e8 <ResetHandler+0x12c>)
    224e:	781a      	ldrb	r2, [r3, #0]
    2250:	0792      	lsls	r2, r2, #30
    2252:	d5fb      	bpl.n	224c <ResetHandler+0x90>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2254:	781a      	ldrb	r2, [r3, #0]
    2256:	06d0      	lsls	r0, r2, #27
    2258:	d4fc      	bmi.n	2254 <ResetHandler+0x98>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225a:	781a      	ldrb	r2, [r3, #0]
    225c:	f002 020c 	and.w	r2, r2, #12
    2260:	2a08      	cmp	r2, #8
    2262:	d1fa      	bne.n	225a <ResetHandler+0x9e>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2264:	4b21      	ldr	r3, [pc, #132]	; (22ec <ResetHandler+0x130>)
    2266:	2207      	movs	r2, #7
    2268:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    226a:	224c      	movs	r2, #76	; 0x4c
    226c:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    226e:	4b1e      	ldr	r3, [pc, #120]	; (22e8 <ResetHandler+0x12c>)
    2270:	781a      	ldrb	r2, [r3, #0]
    2272:	0691      	lsls	r1, r2, #26
    2274:	d5fb      	bpl.n	226e <ResetHandler+0xb2>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    2276:	781a      	ldrb	r2, [r3, #0]
    2278:	0652      	lsls	r2, r2, #25
    227a:	d5fc      	bpl.n	2276 <ResetHandler+0xba>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    227c:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <ResetHandler+0x134>)
    227e:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    2282:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    2284:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <ResetHandler+0x138>)
    2286:	2220      	movs	r2, #32
    2288:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    228a:	4b17      	ldr	r3, [pc, #92]	; (22e8 <ResetHandler+0x12c>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	f003 030c 	and.w	r3, r3, #12
    2292:	2b0c      	cmp	r3, #12
    2294:	d1f9      	bne.n	228a <ResetHandler+0xce>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    2296:	4b18      	ldr	r3, [pc, #96]	; (22f8 <ResetHandler+0x13c>)
    2298:	2205      	movs	r2, #5
    229a:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    229c:	4a17      	ldr	r2, [pc, #92]	; (22fc <ResetHandler+0x140>)
    229e:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22a2:	4b17      	ldr	r3, [pc, #92]	; (2300 <ResetHandler+0x144>)
    22a4:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a6:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22a8:	2207      	movs	r2, #7
    22aa:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22ae:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b0:	f000 f8a6 	bl	2400 <main>
	while ( 1 ); // Shouldn't get here...
    22b4:	e7fe      	b.n	22b4 <ResetHandler+0xf8>
    22b6:	bf00      	nop
    22b8:	4005200e 	.word	0x4005200e
    22bc:	00043f82 	.word	0x00043f82
    22c0:	0b000001 	.word	0x0b000001
    22c4:	40048030 	.word	0x40048030
    22c8:	00009a20 	.word	0x00009a20
    22cc:	1fff89d0 	.word	0x1fff89d0
    22d0:	1fff8fec 	.word	0x1fff8fec
    22d4:	1fff8fec 	.word	0x1fff8fec
    22d8:	1fffa298 	.word	0x1fffa298
    22dc:	e000e400 	.word	0xe000e400
    22e0:	e000e45f 	.word	0xe000e45f
    22e4:	40065000 	.word	0x40065000
    22e8:	40064006 	.word	0x40064006
    22ec:	40064004 	.word	0x40064004
    22f0:	40048044 	.word	0x40048044
    22f4:	40064000 	.word	0x40064000
    22f8:	40048048 	.word	0x40048048
    22fc:	000510c0 	.word	0x000510c0
    2300:	e000e014 	.word	0xe000e014
    2304:	0001193f 	.word	0x0001193f
    2308:	00000000 	.word	0x00000000
    230c:	00000000 	.word	0x00000000
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f003 fe57 	bl	60b4 <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f002 fb99 	bl	4b3c <Output_setup>
	Macro_setup();
    240a:	f001 fd1d 	bl	3e48 <Macro_setup>
	Scan_setup();
    240e:	f001 f829 	bl	3464 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f003 ff47 	bl	62a4 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f001 f830 	bl	347c <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f001 fce5 	bl	3df0 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f002 fb99 	bl	4b5c <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	6813      	ldr	r3, [r2, #0]
    2430:	3301      	adds	r3, #1
    2432:	6013      	str	r3, [r2, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff8fec 	.word	0x1fff8fec

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480c      	ldr	r0, [pc, #48]	; (2470 <fault_isr+0x34>)
    2440:	f004 f870 	bl	6524 <_print>
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2444:	4c0b      	ldr	r4, [pc, #44]	; (2474 <fault_isr+0x38>)
    2446:	6823      	ldr	r3, [r4, #0]
    2448:	0358      	lsls	r0, r3, #13
    244a:	d501      	bpl.n	2450 <fault_isr+0x14>
    244c:	f002 fd28 	bl	4ea0 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	0559      	lsls	r1, r3, #21
    2454:	d501      	bpl.n	245a <fault_isr+0x1e>
    2456:	f000 f80f 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245a:	6823      	ldr	r3, [r4, #0]
    245c:	051a      	lsls	r2, r3, #20
    245e:	d501      	bpl.n	2464 <fault_isr+0x28>
    2460:	f000 f80a 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	04db      	lsls	r3, r3, #19
    2468:	d5ec      	bpl.n	2444 <fault_isr+0x8>
    246a:	f000 f805 	bl	2478 <unused_isr>
    246e:	e7e9      	b.n	2444 <fault_isr+0x8>
    2470:	000067cc 	.word	0x000067cc
    2474:	40048034 	.word	0x40048034

00002478 <unused_isr>:
	}
}

void unused_isr()
{
    2478:	b508      	push	{r3, lr}
	fault_isr();
    247a:	f7ff ffdf 	bl	243c <fault_isr>
    247e:	0000      	movs	r0, r0

00002480 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2480:	4801      	ldr	r0, [pc, #4]	; (2488 <nmi_default_isr+0x8>)
    2482:	f004 b84f 	b.w	6524 <_print>
    2486:	bf00      	nop
    2488:	000067d5 	.word	0x000067d5

0000248c <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    248c:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <hard_fault_default_isr+0x20>)
    2490:	f004 f848 	bl	6524 <_print>
	printHex32( SCB_HFSR );
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <hard_fault_default_isr+0x24>)
    2496:	2101      	movs	r1, #1
    2498:	6818      	ldr	r0, [r3, #0]
    249a:	f004 f921 	bl	66e0 <printHex32_op>
	print( NL );
    249e:	4805      	ldr	r0, [pc, #20]	; (24b4 <hard_fault_default_isr+0x28>)
    24a0:	f004 f840 	bl	6524 <_print>
	SOFTWARE_RESET();
    24a4:	4b04      	ldr	r3, [pc, #16]	; (24b8 <hard_fault_default_isr+0x2c>)
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <hard_fault_default_isr+0x30>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	bd08      	pop	{r3, pc}
    24ac:	000067dc 	.word	0x000067dc
    24b0:	e000ed2c 	.word	0xe000ed2c
    24b4:	000092ee 	.word	0x000092ee
    24b8:	e000ed0c 	.word	0xe000ed0c
    24bc:	05fa0004 	.word	0x05fa0004

000024c0 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c0:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c2:	480a      	ldr	r0, [pc, #40]	; (24ec <memmanage_fault_default_isr+0x2c>)
    24c4:	f004 f82e 	bl	6524 <_print>
	printHex32( SCB_CFSR );
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <memmanage_fault_default_isr+0x30>)
    24ca:	2101      	movs	r1, #1
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	f004 f907 	bl	66e0 <printHex32_op>
	print(" SCB_MMAR: ");
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <memmanage_fault_default_isr+0x34>)
    24d4:	f004 f826 	bl	6524 <_print>
	printHex32( SCB_MMAR );
    24d8:	4b07      	ldr	r3, [pc, #28]	; (24f8 <memmanage_fault_default_isr+0x38>)
    24da:	2101      	movs	r1, #1
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	f004 f8ff 	bl	66e0 <printHex32_op>
	print( NL );
    24e2:	4806      	ldr	r0, [pc, #24]	; (24fc <memmanage_fault_default_isr+0x3c>)
}
    24e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24e8:	f004 b81c 	b.w	6524 <_print>
    24ec:	000067f3 	.word	0x000067f3
    24f0:	e000ed28 	.word	0xe000ed28
    24f4:	00006814 	.word	0x00006814
    24f8:	e000ed34 	.word	0xe000ed34
    24fc:	000092ee 	.word	0x000092ee

00002500 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2500:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2502:	480a      	ldr	r0, [pc, #40]	; (252c <bus_fault_default_isr+0x2c>)
    2504:	f004 f80e 	bl	6524 <_print>
	printHex32( SCB_CFSR );
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <bus_fault_default_isr+0x30>)
    250a:	2101      	movs	r1, #1
    250c:	6818      	ldr	r0, [r3, #0]
    250e:	f004 f8e7 	bl	66e0 <printHex32_op>
	print(" SCB_BFAR: ");
    2512:	4808      	ldr	r0, [pc, #32]	; (2534 <bus_fault_default_isr+0x34>)
    2514:	f004 f806 	bl	6524 <_print>
	printHex32( SCB_BFAR );
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <bus_fault_default_isr+0x38>)
    251a:	2101      	movs	r1, #1
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	f004 f8df 	bl	66e0 <printHex32_op>
	print( NL );
    2522:	4806      	ldr	r0, [pc, #24]	; (253c <bus_fault_default_isr+0x3c>)
}
    2524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    2528:	f003 bffc 	b.w	6524 <_print>
    252c:	00006820 	.word	0x00006820
    2530:	e000ed28 	.word	0xe000ed28
    2534:	00006836 	.word	0x00006836
    2538:	e000ed38 	.word	0xe000ed38
    253c:	000092ee 	.word	0x000092ee

00002540 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2540:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <usage_fault_default_isr+0x1c>)
    2544:	f003 ffee 	bl	6524 <_print>
	printHex32( SCB_CFSR );
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <usage_fault_default_isr+0x20>)
    254a:	2101      	movs	r1, #1
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	f004 f8c7 	bl	66e0 <printHex32_op>
	print( NL );
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <usage_fault_default_isr+0x24>)
}
    2554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    2558:	f003 bfe4 	b.w	6524 <_print>
    255c:	00006842 	.word	0x00006842
    2560:	e000ed28 	.word	0xe000ed28
    2564:	000092ee 	.word	0x000092ee

00002568 <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    2568:	4402      	add	r2, r0
	char *buf = addr;
    256a:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    256c:	4293      	cmp	r3, r2
    256e:	d002      	beq.n	2576 <memset+0xe>
		*buf = val;
    2570:	f803 1b01 	strb.w	r1, [r3], #1
    2574:	e7fa      	b.n	256c <memset+0x4>
	return (addr);
}
    2576:	4770      	bx	lr

00002578 <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    2578:	b510      	push	{r4, lr}
    257a:	3901      	subs	r1, #1
    257c:	4402      	add	r2, r0
	char *dstbuf = dst;
    257e:	4603      	mov	r3, r0
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    2580:	4293      	cmp	r3, r2
    2582:	d004      	beq.n	258e <memcpy+0x16>
		*dstbuf = *srcbuf;
    2584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2588:	f803 4b01 	strb.w	r4, [r3], #1
    258c:	e7f8      	b.n	2580 <memcpy+0x8>
	return (dst);
}
    258e:	bd10      	pop	{r4, pc}

00002590 <yield>:



// ----- Functions -----

void yield(void) {};
    2590:	4770      	bx	lr
    2592:	0000      	movs	r0, r0

00002594 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2594:	b672      	cpsid	i
	current = SYST_CVR;
    2596:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <micros+0x34>)
	count = systick_millis_count;
    2598:	4a0c      	ldr	r2, [pc, #48]	; (25cc <micros+0x38>)
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    259a:	490d      	ldr	r1, [pc, #52]	; (25d0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    259c:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    259e:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    25a0:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    25a2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    25a4:	0149      	lsls	r1, r1, #5
    25a6:	d503      	bpl.n	25b0 <micros+0x1c>
    25a8:	490a      	ldr	r1, [pc, #40]	; (25d4 <micros+0x40>)
    25aa:	428b      	cmp	r3, r1
    25ac:	bf88      	it	hi
    25ae:	3201      	addhi	r2, #1
	current = ((F_CPU / 1000) - 1) - current;
    25b0:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    25b4:	2048      	movs	r0, #72	; 0x48
	current = SYST_CVR;
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
	__enable_irq();
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
	current = ((F_CPU / 1000) - 1) - current;
    25b6:	f203 133f 	addw	r3, r3, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    25ba:	fbb3 f3f0 	udiv	r3, r3, r0
}
    25be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25c2:	fb00 3002 	mla	r0, r0, r2, r3
    25c6:	4770      	bx	lr
    25c8:	e000e018 	.word	0xe000e018
    25cc:	1fff8fec 	.word	0x1fff8fec
    25d0:	e000ed04 	.word	0xe000ed04
    25d4:	0001190e 	.word	0x0001190e

000025d8 <delay>:

void delay(uint32_t ms)
{
    25d8:	b538      	push	{r3, r4, r5, lr}
    25da:	4605      	mov	r5, r0
	uint32_t start = micros();
    25dc:	f7ff ffda 	bl	2594 <micros>
    25e0:	4604      	mov	r4, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25e2:	f7ff ffd7 	bl	2594 <micros>
    25e6:	1b00      	subs	r0, r0, r4
    25e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25ec:	d303      	bcc.n	25f6 <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25ee:	3d01      	subs	r5, #1
    25f0:	d004      	beq.n	25fc <delay+0x24>
			start += 1000;
    25f2:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		}
		yield();
    25f6:	f7ff ffcb 	bl	2590 <yield>
	}
    25fa:	e7f2      	b.n	25e2 <delay+0xa>
    25fc:	bd38      	pop	{r3, r4, r5, pc}

000025fe <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    25fe:	8803      	ldrh	r3, [r0, #0]
    2600:	8841      	ldrh	r1, [r0, #2]
    2602:	4299      	cmp	r1, r3
		return buffer->head + buffer->size - buffer->tail;
    2604:	bf23      	ittte	cs
    2606:	88c2      	ldrhcs	r2, [r0, #6]
    2608:	18d2      	addcs	r2, r2, r3
    260a:	1a50      	subcs	r0, r2, r1

	// Head > Tail
	return buffer->head - buffer->tail;
    260c:	1a58      	subcc	r0, r3, r1
    260e:	b280      	uxth	r0, r0
}
    2610:	4770      	bx	lr
    2612:	0000      	movs	r0, r0

00002614 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4605      	mov	r5, r0
    2618:	460c      	mov	r4, r1
	dbug_msg("DATA: ");
    261a:	4813      	ldr	r0, [pc, #76]	; (2668 <I2C_BufferPush+0x54>)
	printHex( byte );
    261c:	b2ae      	uxth	r6, r5
}


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
	dbug_msg("DATA: ");
    261e:	f003 ff81 	bl	6524 <_print>
	printHex( byte );
    2622:	2101      	movs	r1, #1
    2624:	4630      	mov	r0, r6
    2626:	f004 f81f 	bl	6668 <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    262a:	8861      	ldrh	r1, [r4, #2]
    262c:	8822      	ldrh	r2, [r4, #0]
    262e:	1c4b      	adds	r3, r1, #1
    2630:	4293      	cmp	r3, r2
    2632:	d005      	beq.n	2640 <I2C_BufferPush+0x2c>
    2634:	428a      	cmp	r2, r1
    2636:	88e1      	ldrh	r1, [r4, #6]
    2638:	d90e      	bls.n	2658 <I2C_BufferPush+0x44>
    263a:	1a58      	subs	r0, r3, r1
    263c:	4290      	cmp	r0, r2
    263e:	d10b      	bne.n	2658 <I2C_BufferPush+0x44>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2640:	480a      	ldr	r0, [pc, #40]	; (266c <I2C_BufferPush+0x58>)
    2642:	f003 ff6f 	bl	6524 <_print>
		printHex( byte );
    2646:	4630      	mov	r0, r6
    2648:	2101      	movs	r1, #1
    264a:	f004 f80d 	bl	6668 <printHex_op>
		print( NL );
    264e:	4808      	ldr	r0, [pc, #32]	; (2670 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2654:	f003 bf66 	b.w	6524 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    2658:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    265a:	bfa8      	it	ge
    265c:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    265e:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2660:	8863      	ldrh	r3, [r4, #2]
    2662:	68a2      	ldr	r2, [r4, #8]
    2664:	54d5      	strb	r5, [r2, r3]
    2666:	bd70      	pop	{r4, r5, r6, pc}
    2668:	0000697d 	.word	0x0000697d
    266c:	00006997 	.word	0x00006997
    2670:	000092ee 	.word	0x000092ee

00002674 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2674:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    2676:	4d23      	ldr	r5, [pc, #140]	; (2704 <I2C_TxBufferPop+0x90>)
    2678:	4628      	mov	r0, r5
    267a:	f7ff ffc0 	bl	25fe <I2C_BufferLen>
    267e:	88eb      	ldrh	r3, [r5, #6]
    2680:	b29b      	uxth	r3, r3
    2682:	4298      	cmp	r0, r3
    2684:	462c      	mov	r4, r5
    2686:	d31b      	bcc.n	26c0 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    2688:	481f      	ldr	r0, [pc, #124]	; (2708 <I2C_TxBufferPop+0x94>)
    268a:	f003 ff4b 	bl	6524 <_print>
		printHex( I2C_TxBuffer.head );
    268e:	8828      	ldrh	r0, [r5, #0]
    2690:	2101      	movs	r1, #1
    2692:	b280      	uxth	r0, r0
    2694:	f003 ffe8 	bl	6668 <printHex_op>
		print(" ");
    2698:	481c      	ldr	r0, [pc, #112]	; (270c <I2C_TxBufferPop+0x98>)
    269a:	f003 ff43 	bl	6524 <_print>
		printHex( I2C_TxBuffer.tail );
    269e:	8868      	ldrh	r0, [r5, #2]
    26a0:	2101      	movs	r1, #1
    26a2:	b280      	uxth	r0, r0
    26a4:	f003 ffe0 	bl	6668 <printHex_op>
		print(" ");
    26a8:	4818      	ldr	r0, [pc, #96]	; (270c <I2C_TxBufferPop+0x98>)
    26aa:	f003 ff3b 	bl	6524 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26ae:	7928      	ldrb	r0, [r5, #4]
    26b0:	2101      	movs	r1, #1
    26b2:	f003 ffd9 	bl	6668 <printHex_op>
		print(NL);
    26b6:	4816      	ldr	r0, [pc, #88]	; (2710 <I2C_TxBufferPop+0x9c>)
    26b8:	f003 ff34 	bl	6524 <_print>
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26c0:	792b      	ldrb	r3, [r5, #4]
    26c2:	b943      	cbnz	r3, 26d6 <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26c4:	23ff      	movs	r3, #255	; 0xff
    26c6:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26c8:	f7ff ffd4 	bl	2674 <I2C_TxBufferPop>
    26cc:	4b11      	ldr	r3, [pc, #68]	; (2714 <I2C_TxBufferPop+0xa0>)
    26ce:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26d0:	f7ff ffd0 	bl	2674 <I2C_TxBufferPop>
    26d4:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26d6:	68a2      	ldr	r2, [r4, #8]
    26d8:	8823      	ldrh	r3, [r4, #0]
    26da:	b29b      	uxth	r3, r3
    26dc:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26de:	8823      	ldrh	r3, [r4, #0]
    26e0:	3301      	adds	r3, #1
    26e2:	b29b      	uxth	r3, r3
    26e4:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26e6:	8822      	ldrh	r2, [r4, #0]
    26e8:	88e3      	ldrh	r3, [r4, #6]
    26ea:	b292      	uxth	r2, r2
    26ec:	b29b      	uxth	r3, r3
    26ee:	429a      	cmp	r2, r3
		I2C_TxBuffer.head = 0;
    26f0:	bf22      	ittt	cs
    26f2:	4b04      	ldrcs	r3, [pc, #16]	; (2704 <I2C_TxBufferPop+0x90>)
    26f4:	2200      	movcs	r2, #0
    26f6:	801a      	strhcs	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26f8:	7923      	ldrb	r3, [r4, #4]
    26fa:	3b01      	subs	r3, #1
    26fc:	b2db      	uxtb	r3, r3
    26fe:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    2700:	bd38      	pop	{r3, r4, r5, pc}
    2702:	bf00      	nop
    2704:	1fff89dc 	.word	0x1fff89dc
    2708:	000069d1 	.word	0x000069d1
    270c:	00006ee2 	.word	0x00006ee2
    2710:	000092ee 	.word	0x000092ee
    2714:	1fff89d0 	.word	0x1fff89d0

00002718 <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    271c:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    271e:	4e3a      	ldr	r6, [pc, #232]	; (2808 <L_396_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2720:	4c3a      	ldr	r4, [pc, #232]	; (280c <L_396_delayMicroseconds+0x22>)
    2722:	4d3b      	ldr	r5, [pc, #236]	; (2810 <L_396_delayMicroseconds+0x26>)
    2724:	f894 8000 	ldrb.w	r8, [r4]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2728:	7833      	ldrb	r3, [r6, #0]
    272a:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    272e:	fa5f f888 	uxtb.w	r8, r8
    2732:	4637      	mov	r7, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2734:	792b      	ldrb	r3, [r5, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2736:	d04e      	beq.n	27d6 <L_339_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2738:	b163      	cbz	r3, 2754 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    273a:	f018 0f01 	tst.w	r8, #1
    273e:	d045      	beq.n	27cc <L_339_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2740:	4834      	ldr	r0, [pc, #208]	; (2814 <L_396_delayMicroseconds+0x2a>)
    2742:	f003 feef 	bl	6524 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    274a:	2300      	movs	r3, #0
    274c:	802b      	strh	r3, [r5, #0]
				I2C_TxBuffer.tail = 0;
    274e:	806b      	strh	r3, [r5, #2]
				I2C_TxBuffer.sequencePos = 0;
    2750:	712b      	strb	r3, [r5, #4]
    2752:	e053      	b.n	27fc <L_396_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2754:	4e30      	ldr	r6, [pc, #192]	; (2818 <L_396_delayMicroseconds+0x2e>)
    2756:	7933      	ldrb	r3, [r6, #4]
    2758:	b313      	cbz	r3, 27a0 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    275a:	f018 0f10 	tst.w	r8, #16
    275e:	d006      	beq.n	276e <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2760:	482e      	ldr	r0, [pc, #184]	; (281c <L_396_delayMicroseconds+0x32>)
    2762:	f003 fedf 	bl	6524 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    2766:	2380      	movs	r3, #128	; 0x80
    2768:	703b      	strb	r3, [r7, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    276a:	2312      	movs	r3, #18
    276c:	7023      	strb	r3, [r4, #0]
			}
			if ( status & I2C_S_RXAK )
    276e:	f018 0f01 	tst.w	r8, #1
    2772:	d004      	beq.n	277e <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2774:	482a      	ldr	r0, [pc, #168]	; (2820 <L_396_delayMicroseconds+0x36>)
    2776:	f003 fed5 	bl	6524 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	e00e      	b.n	279c <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    277e:	4829      	ldr	r0, [pc, #164]	; (2824 <L_396_delayMicroseconds+0x3a>)
    2780:	f003 fed0 	bl	6524 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2784:	7930      	ldrb	r0, [r6, #4]
    2786:	2101      	movs	r1, #1
    2788:	f003 ff6e 	bl	6668 <printHex_op>
				print( NL );
    278c:	4826      	ldr	r0, [pc, #152]	; (2828 <L_396_delayMicroseconds+0x3e>)
    278e:	f003 fec9 	bl	6524 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2792:	7933      	ldrb	r3, [r6, #4]
    2794:	2b01      	cmp	r3, #1
    2796:	bf0c      	ite	eq
    2798:	23e8      	moveq	r3, #232	; 0xe8
    279a:	23e0      	movne	r3, #224	; 0xe0
    279c:	703b      	strb	r3, [r7, #0]
    279e:	e02d      	b.n	27fc <L_396_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    27a0:	2320      	movs	r3, #32

000027a2 <L_327_delayMicroseconds>:
    27a2:	3b01      	subs	r3, #1
    27a4:	d1fd      	bne.n	27a2 <L_327_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	703b      	strb	r3, [r7, #0]
    27aa:	23e0      	movs	r3, #224	; 0xe0

000027ac <L_339_delayMicroseconds>:
    27ac:	3b01      	subs	r3, #1
    27ae:	d1fd      	bne.n	27ac <L_339_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27b0:	4628      	mov	r0, r5
    27b2:	f7ff ff24 	bl	25fe <I2C_BufferLen>
    27b6:	88eb      	ldrh	r3, [r5, #6]
    27b8:	b29b      	uxth	r3, r3
    27ba:	4298      	cmp	r0, r3
    27bc:	d21e      	bcs.n	27fc <L_396_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27be:	2312      	movs	r3, #18
    27c0:	7023      	strb	r3, [r4, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27c2:	7823      	ldrb	r3, [r4, #0]
    27c4:	069b      	lsls	r3, r3, #26
    27c6:	d4fc      	bmi.n	27c2 <L_339_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27c8:	23f0      	movs	r3, #240	; 0xf0
    27ca:	703b      	strb	r3, [r7, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27cc:	f7ff ff52 	bl	2674 <I2C_TxBufferPop>
    27d0:	4b16      	ldr	r3, [pc, #88]	; (282c <L_396_delayMicroseconds+0x42>)
    27d2:	7018      	strb	r0, [r3, #0]
    27d4:	e012      	b.n	27fc <L_396_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27d6:	2b01      	cmp	r3, #1
    27d8:	4b14      	ldr	r3, [pc, #80]	; (282c <L_396_delayMicroseconds+0x42>)
    27da:	d80b      	bhi.n	27f4 <L_396_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27dc:	22b0      	movs	r2, #176	; 0xb0
    27de:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e0:	7818      	ldrb	r0, [r3, #0]
    27e2:	490d      	ldr	r1, [pc, #52]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27e4:	f7ff ff16 	bl	2614 <I2C_BufferPush>
    27e8:	2320      	movs	r3, #32

000027ea <L_396_delayMicroseconds>:
    27ea:	3b01      	subs	r3, #1
    27ec:	d1fd      	bne.n	27ea <L_396_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	7033      	strb	r3, [r6, #0]
    27f2:	e003      	b.n	27fc <L_396_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27f4:	7818      	ldrb	r0, [r3, #0]
    27f6:	4908      	ldr	r1, [pc, #32]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27f8:	f7ff ff0c 	bl	2614 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    27fc:	2302      	movs	r3, #2
    27fe:	7023      	strb	r3, [r4, #0]

	sei(); // Re-enable Interrupts
    2800:	b662      	cpsie	i
    2802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2806:	bf00      	nop
    2808:	40066002 	.word	0x40066002
    280c:	40066003 	.word	0x40066003
    2810:	1fff89dc 	.word	0x1fff89dc
    2814:	00006a09 	.word	0x00006a09
    2818:	1fff89d0 	.word	0x1fff89d0
    281c:	00006a34 	.word	0x00006a34
    2820:	00006a5f 	.word	0x00006a5f
    2824:	00006a98 	.word	0x00006a98
    2828:	000092ee 	.word	0x000092ee
    282c:	40066004 	.word	0x40066004

00002830 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2834:	4c32      	ldr	r4, [pc, #200]	; (2900 <I2C_Send+0xd0>)
    2836:	88e3      	ldrh	r3, [r4, #6]
    2838:	fa1f f981 	uxth.w	r9, r1
    283c:	b29b      	uxth	r3, r3
    283e:	454b      	cmp	r3, r9
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2840:	4680      	mov	r8, r0
    2842:	460f      	mov	r7, r1
    2844:	4692      	mov	sl, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2846:	d354      	bcc.n	28f2 <I2C_Send+0xc2>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    2848:	4620      	mov	r0, r4
    284a:	f7ff fed8 	bl	25fe <I2C_BufferLen>
    284e:	1c7b      	adds	r3, r7, #1
    2850:	4283      	cmp	r3, r0
    2852:	da4e      	bge.n	28f2 <I2C_Send+0xc2>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2854:	8825      	ldrh	r5, [r4, #0]
    2856:	8863      	ldrh	r3, [r4, #2]
    2858:	b2ad      	uxth	r5, r5
    285a:	b29b      	uxth	r3, r3
    285c:	429d      	cmp	r5, r3
    285e:	bf0c      	ite	eq
    2860:	2501      	moveq	r5, #1
    2862:	2502      	movne	r5, #2

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2864:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    2866:	461e      	mov	r6, r3
	for ( uint16_t c = 0; c < sendLen; c++ )
    2868:	454b      	cmp	r3, r9
    286a:	d229      	bcs.n	28c0 <I2C_Send+0x90>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    286c:	b14e      	cbz	r6, 2882 <I2C_Send+0x52>
    286e:	2e01      	cmp	r6, #1
    2870:	d110      	bne.n	2894 <I2C_Send+0x64>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2872:	8862      	ldrh	r2, [r4, #2]
    2874:	68a1      	ldr	r1, [r4, #8]
    2876:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2878:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    287a:	548f      	strb	r7, [r1, r2]
			bufferHeaderPos++;
			c--;
    287c:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    287e:	2602      	movs	r6, #2
    2880:	e00e      	b.n	28a0 <I2C_Send+0x70>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2882:	8862      	ldrh	r2, [r4, #2]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2888:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    288a:	f801 a002 	strb.w	sl, [r1, r2]
			bufferHeaderPos++;
			c--;
    288e:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2890:	2601      	movs	r6, #1
    2892:	e005      	b.n	28a0 <I2C_Send+0x70>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    2894:	8862      	ldrh	r2, [r4, #2]
    2896:	68a1      	ldr	r1, [r4, #8]
    2898:	f818 0003 	ldrb.w	r0, [r8, r3]
    289c:	b292      	uxth	r2, r2
    289e:	5488      	strb	r0, [r1, r2]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    28a0:	8860      	ldrh	r0, [r4, #2]
    28a2:	88e1      	ldrh	r1, [r4, #6]
    28a4:	4a16      	ldr	r2, [pc, #88]	; (2900 <I2C_Send+0xd0>)
    28a6:	b280      	uxth	r0, r0
    28a8:	b289      	uxth	r1, r1
    28aa:	3001      	adds	r0, #1
    28ac:	4288      	cmp	r0, r1
		{
			buffer->tail = 0;
    28ae:	bfa8      	it	ge
    28b0:	2100      	movge	r1, #0
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28b2:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28b6:	bfac      	ite	ge
    28b8:	8051      	strhge	r1, [r2, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28ba:	8050      	strhlt	r0, [r2, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28bc:	b29b      	uxth	r3, r3
    28be:	e7d3      	b.n	2868 <I2C_Send+0x38>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28c0:	2d01      	cmp	r5, #1
    28c2:	d119      	bne.n	28f8 <I2C_Send+0xc8>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28c4:	4a0f      	ldr	r2, [pc, #60]	; (2904 <I2C_Send+0xd4>)
    28c6:	2312      	movs	r3, #18
    28c8:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28ca:	4b0f      	ldr	r3, [pc, #60]	; (2908 <I2C_Send+0xd8>)
    28cc:	7819      	ldrb	r1, [r3, #0]
    28ce:	0688      	lsls	r0, r1, #26
    28d0:	d501      	bpl.n	28d6 <I2C_Send+0xa6>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28d2:	22b4      	movs	r2, #180	; 0xb4
    28d4:	e003      	b.n	28de <I2C_Send+0xae>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28d6:	7811      	ldrb	r1, [r2, #0]
    28d8:	0689      	lsls	r1, r1, #26
    28da:	d4fc      	bmi.n	28d6 <I2C_Send+0xa6>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28dc:	22b0      	movs	r2, #176	; 0xb0
    28de:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28e0:	22f0      	movs	r2, #240	; 0xf0
    28e2:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28e4:	f7ff fec6 	bl	2674 <I2C_TxBufferPop>
    28e8:	4b08      	ldr	r3, [pc, #32]	; (290c <I2C_Send+0xdc>)
    28ea:	7018      	strb	r0, [r3, #0]

		return 1;
    28ec:	2001      	movs	r0, #1
    28ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28f8:	2002      	movs	r0, #2
}
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28fe:	bf00      	nop
    2900:	1fff89dc 	.word	0x1fff89dc
    2904:	40066003 	.word	0x40066003
    2908:	40066002 	.word	0x40066002
    290c:	40066004 	.word	0x40066004

00002910 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	4698      	mov	r8, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2916:	4b1a      	ldr	r3, [pc, #104]	; (2980 <LED_zeroPages+0x70>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2918:	b0b0      	sub	sp, #192	; 0xc0
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    291a:	881b      	ldrh	r3, [r3, #0]
    291c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2920:	4605      	mov	r5, r0
    2922:	4616      	mov	r6, r2
    2924:	460f      	mov	r7, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2926:	a802      	add	r0, sp, #8
    2928:	2100      	movs	r1, #0
    292a:	22b6      	movs	r2, #182	; 0xb6
    292c:	f7ff fe1c 	bl	2568 <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2930:	23e8      	movs	r3, #232	; 0xe8
    2932:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg
    2936:	f88d 6009 	strb.w	r6, [sp, #9]

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    293a:	462c      	mov	r4, r5
    293c:	19eb      	adds	r3, r5, r7
    293e:	429c      	cmp	r4, r3
    2940:	da1b      	bge.n	297a <LED_zeroPages+0x6a>
	{
		// Set page
		pageSetup[2] = page;
    2942:	f88d 4006 	strb.w	r4, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2946:	a801      	add	r0, sp, #4
    2948:	2103      	movs	r1, #3
    294a:	2200      	movs	r2, #0
    294c:	f7ff ff70 	bl	2830 <I2C_Send>
    2950:	b918      	cbnz	r0, 295a <LED_zeroPages+0x4a>
			delay(1);
    2952:	2001      	movs	r0, #1
    2954:	f7ff fe40 	bl	25d8 <delay>
    2958:	e7f5      	b.n	2946 <LED_zeroPages+0x36>
    295a:	f108 0102 	add.w	r1, r8, #2

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    295e:	1b89      	subs	r1, r1, r6
    2960:	a802      	add	r0, sp, #8
    2962:	b2c9      	uxtb	r1, r1
    2964:	2200      	movs	r2, #0
    2966:	f7ff ff63 	bl	2830 <I2C_Send>
    296a:	b918      	cbnz	r0, 2974 <LED_zeroPages+0x64>
			delay(1);
    296c:	2001      	movs	r0, #1
    296e:	f7ff fe33 	bl	25d8 <delay>
    2972:	e7f2      	b.n	295a <LED_zeroPages+0x4a>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2974:	3401      	adds	r4, #1
    2976:	b2e4      	uxtb	r4, r4
    2978:	e7e0      	b.n	293c <LED_zeroPages+0x2c>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    297a:	b030      	add	sp, #192	; 0xc0
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	00006870 	.word	0x00006870

00002984 <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    2984:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    2986:	4805      	ldr	r0, [pc, #20]	; (299c <cliFunc_ledZero+0x18>)
    2988:	f003 fdcc 	bl	6524 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    298c:	2000      	movs	r0, #0
    298e:	2108      	movs	r1, #8
    2990:	2224      	movs	r2, #36	; 0x24
    2992:	23b4      	movs	r3, #180	; 0xb4
}
    2994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2998:	f7ff bfba 	b.w	2910 <LED_zeroPages>
    299c:	000092ee 	.word	0x000092ee

000029a0 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29a2:	23e8      	movs	r3, #232	; 0xe8
    29a4:	f88d 3004 	strb.w	r3, [sp, #4]
    29a8:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29aa:	4605      	mov	r5, r0
    29ac:	460c      	mov	r4, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29ae:	f88d 3005 	strb.w	r3, [sp, #5]
    29b2:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29b6:	a801      	add	r0, sp, #4
    29b8:	2103      	movs	r1, #3
    29ba:	2200      	movs	r2, #0
    29bc:	f7ff ff38 	bl	2830 <I2C_Send>
    29c0:	b918      	cbnz	r0, 29ca <LED_sendPage+0x2a>
		delay(1);
    29c2:	2001      	movs	r0, #1
    29c4:	f7ff fe08 	bl	25d8 <delay>
    29c8:	e7f5      	b.n	29b6 <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29ca:	4628      	mov	r0, r5
    29cc:	4621      	mov	r1, r4
    29ce:	2200      	movs	r2, #0
    29d0:	f7ff ff2e 	bl	2830 <I2C_Send>
    29d4:	b918      	cbnz	r0, 29de <LED_sendPage+0x3e>
		delay(1);
    29d6:	2001      	movs	r0, #1
    29d8:	f7ff fdfe 	bl	25d8 <delay>
    29dc:	e7f5      	b.n	29ca <LED_sendPage+0x2a>

}
    29de:	b003      	add	sp, #12
    29e0:	bd30      	pop	{r4, r5, pc}
    29e2:	0000      	movs	r0, r0

000029e4 <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29e4:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29e6:	4805      	ldr	r0, [pc, #20]	; (29fc <cliFunc_ledTest+0x18>)
    29e8:	f003 fd9c 	bl	6524 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29ec:	4804      	ldr	r0, [pc, #16]	; (2a00 <cliFunc_ledTest+0x1c>)
    29ee:	2192      	movs	r1, #146	; 0x92
    29f0:	2200      	movs	r2, #0
}
    29f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29f6:	f7ff bfd3 	b.w	29a0 <LED_sendPage>
    29fa:	bf00      	nop
    29fc:	000092ee 	.word	0x000092ee
    2a00:	00006b9f 	.word	0x00006b9f

00002a04 <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    2a04:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2a06:	23e8      	movs	r3, #232	; 0xe8
    2a08:	24fd      	movs	r4, #253	; 0xfd
    2a0a:	f88d 3000 	strb.w	r3, [sp]
    2a0e:	f88d 4001 	strb.w	r4, [sp, #1]
    2a12:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a16:	f88d 3004 	strb.w	r3, [sp, #4]
    2a1a:	f88d 0005 	strb.w	r0, [sp, #5]
    2a1e:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a22:	4668      	mov	r0, sp
    2a24:	2103      	movs	r1, #3
    2a26:	2200      	movs	r2, #0
    2a28:	f7ff ff02 	bl	2830 <I2C_Send>
    2a2c:	b918      	cbnz	r0, 2a36 <LED_writeReg+0x32>
		delay(1);
    2a2e:	2001      	movs	r0, #1
    2a30:	f7ff fdd2 	bl	25d8 <delay>
    2a34:	e7f5      	b.n	2a22 <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a36:	a801      	add	r0, sp, #4
    2a38:	2103      	movs	r1, #3
    2a3a:	2200      	movs	r2, #0
    2a3c:	f7ff fef8 	bl	2830 <I2C_Send>
    2a40:	b918      	cbnz	r0, 2a4a <LED_writeReg+0x46>
		delay(1);
    2a42:	2001      	movs	r0, #1
    2a44:	f7ff fdc8 	bl	25d8 <delay>
    2a48:	e7f5      	b.n	2a36 <LED_writeReg+0x32>
}
    2a4a:	b002      	add	sp, #8
    2a4c:	bd10      	pop	{r4, pc}
    2a4e:	0000      	movs	r0, r0

00002a50 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a50:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a52:	4825      	ldr	r0, [pc, #148]	; (2ae8 <LED_setup+0x98>)
    2a54:	4925      	ldr	r1, [pc, #148]	; (2aec <LED_setup+0x9c>)
    2a56:	f003 fb11 	bl	607c <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a5a:	4a25      	ldr	r2, [pc, #148]	; (2af0 <LED_setup+0xa0>)
    2a5c:	6813      	ldr	r3, [r2, #0]
    2a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a62:	6013      	str	r3, [r2, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a64:	4a23      	ldr	r2, [pc, #140]	; (2af4 <LED_setup+0xa4>)
    2a66:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a6a:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a6c:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a6e:	4b22      	ldr	r3, [pc, #136]	; (2af8 <LED_setup+0xa8>)
    2a70:	2285      	movs	r2, #133	; 0x85
    2a72:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a74:	2204      	movs	r2, #4
    2a76:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a78:	2280      	movs	r2, #128	; 0x80
    2a7a:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a7c:	2220      	movs	r2, #32
    2a7e:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a80:	4b1e      	ldr	r3, [pc, #120]	; (2afc <LED_setup+0xac>)
    2a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a86:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a88:	200b      	movs	r0, #11
    2a8a:	2101      	movs	r1, #1
    2a8c:	2200      	movs	r2, #0
    2a8e:	230c      	movs	r3, #12
    2a90:	f7ff ff3e 	bl	2910 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a94:	4a1a      	ldr	r2, [pc, #104]	; (2b00 <LED_setup+0xb0>)
    2a96:	6813      	ldr	r3, [r2, #0]
    2a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a9c:	6013      	str	r3, [r2, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a9e:	4b19      	ldr	r3, [pc, #100]	; (2b04 <LED_setup+0xb4>)
    2aa0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2aa4:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2aa6:	4a18      	ldr	r2, [pc, #96]	; (2b08 <LED_setup+0xb8>)
    2aa8:	6813      	ldr	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aaa:	2000      	movs	r0, #0
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
	GPIOB_PSOR |= (1<<16);
    2aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab0:	6013      	str	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2ab2:	2108      	movs	r1, #8
    2ab4:	23b4      	movs	r3, #180	; 0xb4
    2ab6:	4602      	mov	r2, r0
    2ab8:	f7ff ff2a 	bl	2910 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2abc:	4813      	ldr	r0, [pc, #76]	; (2b0c <LED_setup+0xbc>)
    2abe:	2114      	movs	r1, #20
    2ac0:	2200      	movs	r2, #0
    2ac2:	f7ff ff6d 	bl	29a0 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2ac6:	4812      	ldr	r0, [pc, #72]	; (2b10 <LED_setup+0xc0>)
    2ac8:	2192      	movs	r1, #146	; 0x92
    2aca:	2200      	movs	r2, #0
    2acc:	f7ff ff68 	bl	29a0 <LED_sendPage>

	// Do not disable software shutdown of ISSI chip unless current is high enough
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
    2ad0:	f002 f892 	bl	4bf8 <Output_current_available>
    2ad4:	2895      	cmp	r0, #149	; 0x95
    2ad6:	d906      	bls.n	2ae6 <LED_setup+0x96>
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ad8:	200a      	movs	r0, #10
    2ada:	2101      	movs	r1, #1
    2adc:	220b      	movs	r2, #11
	}
}
    2ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ae2:	f7ff bf8f 	b.w	2a04 <LED_writeReg>
    2ae6:	bd08      	pop	{r3, pc}
    2ae8:	000068d8 	.word	0x000068d8
    2aec:	00006d33 	.word	0x00006d33
    2af0:	40048034 	.word	0x40048034
    2af4:	4004a000 	.word	0x4004a000
    2af8:	40066001 	.word	0x40066001
    2afc:	e000e100 	.word	0xe000e100
    2b00:	400ff054 	.word	0x400ff054
    2b04:	4004a040 	.word	0x4004a040
    2b08:	400ff044 	.word	0x400ff044
    2b0c:	00006d1f 	.word	0x00006d1f
    2b10:	00006b9f 	.word	0x00006b9f

00002b14 <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2b14:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2b16:	480a      	ldr	r0, [pc, #40]	; (2b40 <cliFunc_ledStart+0x2c>)
    2b18:	f003 fd04 	bl	6524 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b1c:	230c      	movs	r3, #12
    2b1e:	200b      	movs	r0, #11
    2b20:	2101      	movs	r1, #1
    2b22:	2200      	movs	r2, #0
    2b24:	f7ff fef4 	bl	2910 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b28:	200a      	movs	r0, #10
    2b2a:	2101      	movs	r1, #1
    2b2c:	220b      	movs	r2, #11
    2b2e:	f7ff ff69 	bl	2a04 <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b32:	4804      	ldr	r0, [pc, #16]	; (2b44 <cliFunc_ledStart+0x30>)
    2b34:	2114      	movs	r1, #20
    2b36:	2200      	movs	r2, #0

}
    2b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b3c:	f7ff bf30 	b.w	29a0 <LED_sendPage>
    2b40:	000092ee 	.word	0x000092ee
    2b44:	00006d1f 	.word	0x00006d1f

00002b48 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b48:	b530      	push	{r4, r5, lr}
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b4a:	220b      	movs	r2, #11
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b4c:	b085      	sub	sp, #20
    2b4e:	460c      	mov	r4, r1
    2b50:	4605      	mov	r5, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b52:	2100      	movs	r1, #0
    2b54:	200a      	movs	r0, #10
    2b56:	f7ff ff55 	bl	2a04 <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b5a:	23e8      	movs	r3, #232	; 0xe8
    2b5c:	f88d 300c 	strb.w	r3, [sp, #12]
    2b60:	23fd      	movs	r3, #253	; 0xfd
    2b62:	f88d 300d 	strb.w	r3, [sp, #13]
    2b66:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b6a:	a803      	add	r0, sp, #12
    2b6c:	2103      	movs	r1, #3
    2b6e:	2200      	movs	r2, #0
    2b70:	f7ff fe5e 	bl	2830 <I2C_Send>
    2b74:	b918      	cbnz	r0, 2b7e <LED_readPage+0x36>
		delay(1);
    2b76:	2001      	movs	r0, #1
    2b78:	f7ff fd2e 	bl	25d8 <delay>
    2b7c:	e7f5      	b.n	2b6a <LED_readPage+0x22>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b7e:	23e8      	movs	r3, #232	; 0xe8
    2b80:	2400      	movs	r4, #0
    2b82:	f88d 3008 	strb.w	r3, [sp, #8]
    2b86:	f88d 4009 	strb.w	r4, [sp, #9]

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b8a:	42ac      	cmp	r4, r5
    2b8c:	b2e3      	uxtb	r3, r4
    2b8e:	d01d      	beq.n	2bcc <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b90:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b94:	a802      	add	r0, sp, #8
    2b96:	2102      	movs	r1, #2
    2b98:	2200      	movs	r2, #0
    2b9a:	f7ff fe49 	bl	2830 <I2C_Send>
    2b9e:	b918      	cbnz	r0, 2ba8 <LED_readPage+0x60>
			delay(1);
    2ba0:	2001      	movs	r0, #1
    2ba2:	f7ff fd19 	bl	25d8 <delay>
    2ba6:	e7f5      	b.n	2b94 <LED_readPage+0x4c>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2ba8:	23e9      	movs	r3, #233	; 0xe9
    2baa:	f88d 3004 	strb.w	r3, [sp, #4]

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2bae:	2101      	movs	r1, #1
    2bb0:	a801      	add	r0, sp, #4
    2bb2:	460a      	mov	r2, r1
    2bb4:	f7ff fe3c 	bl	2830 <I2C_Send>
    2bb8:	b918      	cbnz	r0, 2bc2 <LED_readPage+0x7a>
			delay(1);
    2bba:	2001      	movs	r0, #1
    2bbc:	f7ff fd0c 	bl	25d8 <delay>
    2bc0:	e7f5      	b.n	2bae <LED_readPage+0x66>
		dbug_print("NEXT");
    2bc2:	4806      	ldr	r0, [pc, #24]	; (2bdc <LED_readPage+0x94>)
    2bc4:	f003 fcae 	bl	6524 <_print>
    2bc8:	3401      	adds	r4, #1
    2bca:	e7de      	b.n	2b8a <LED_readPage+0x42>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bcc:	200a      	movs	r0, #10
    2bce:	2101      	movs	r1, #1
    2bd0:	220b      	movs	r2, #11
    2bd2:	f7ff ff17 	bl	2a04 <LED_writeReg>
}
    2bd6:	b005      	add	sp, #20
    2bd8:	bd30      	pop	{r4, r5, pc}
    2bda:	bf00      	nop
    2bdc:	00006ac6 	.word	0x00006ac6

00002be0 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2be0:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2be2:	4669      	mov	r1, sp
    2be4:	aa01      	add	r2, sp, #4
    2be6:	f003 f9d5 	bl	5f94 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2bea:	9800      	ldr	r0, [sp, #0]
    2bec:	7804      	ldrb	r4, [r0, #0]
    2bee:	b114      	cbz	r4, 2bf6 <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2bf0:	f003 fdaa 	bl	6748 <numToInt>
    2bf4:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bf6:	4804      	ldr	r0, [pc, #16]	; (2c08 <cliFunc_ledRPage+0x28>)
    2bf8:	f003 fc94 	bl	6524 <_print>

	LED_readPage( 0x1, page );
    2bfc:	2001      	movs	r0, #1
    2bfe:	4621      	mov	r1, r4
    2c00:	f7ff ffa2 	bl	2b48 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2c04:	b002      	add	sp, #8
    2c06:	bd10      	pop	{r4, pc}
    2c08:	000092ee 	.word	0x000092ee

00002c0c <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2c0c:	b530      	push	{r4, r5, lr}
    2c0e:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c10:	2500      	movs	r5, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c12:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c14:	481b      	ldr	r0, [pc, #108]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c16:	f003 fc85 	bl	6524 <_print>
	info_msg("Sending: ");
    2c1a:	481b      	ldr	r0, [pc, #108]	; (2c88 <cliFunc_i2cSend+0x7c>)
    2c1c:	f003 fc82 	bl	6524 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c20:	9801      	ldr	r0, [sp, #4]
    2c22:	4669      	mov	r1, sp
    2c24:	aa01      	add	r2, sp, #4
    2c26:	f003 f9b5 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c2a:	9800      	ldr	r0, [sp, #0]
    2c2c:	7803      	ldrb	r3, [r0, #0]
    2c2e:	b1eb      	cbz	r3, 2c6c <cliFunc_i2cSend+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c30:	2b7c      	cmp	r3, #124	; 0x7c
    2c32:	d10a      	bne.n	2c4a <cliFunc_i2cSend+0x3e>
		{
			print("| ");
    2c34:	4815      	ldr	r0, [pc, #84]	; (2c8c <cliFunc_i2cSend+0x80>)
    2c36:	f003 fc75 	bl	6524 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c3a:	a802      	add	r0, sp, #8
    2c3c:	4629      	mov	r1, r5
    2c3e:	2200      	movs	r2, #0
    2c40:	f7ff fdf6 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2c44:	2400      	movs	r4, #0
    2c46:	4625      	mov	r5, r4
    2c48:	e7ea      	b.n	2c20 <cliFunc_i2cSend+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c4a:	f003 fd7d 	bl	6748 <numToInt>
    2c4e:	ab04      	add	r3, sp, #16
    2c50:	1c6c      	adds	r4, r5, #1
    2c52:	441d      	add	r5, r3
    2c54:	b2e4      	uxtb	r4, r4
    2c56:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c5a:	9800      	ldr	r0, [sp, #0]
    2c5c:	f001 ffbc 	bl	4bd8 <Output_putstr>
		print(" ");
    2c60:	480b      	ldr	r0, [pc, #44]	; (2c90 <cliFunc_i2cSend+0x84>)
    2c62:	f003 fc5f 	bl	6524 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c66:	2c07      	cmp	r4, #7
    2c68:	d9ed      	bls.n	2c46 <cliFunc_i2cSend+0x3a>
    2c6a:	e000      	b.n	2c6e <cliFunc_i2cSend+0x62>
    2c6c:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c6e:	4805      	ldr	r0, [pc, #20]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c70:	f003 fc58 	bl	6524 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c74:	a802      	add	r0, sp, #8
    2c76:	4621      	mov	r1, r4
    2c78:	2200      	movs	r2, #0
    2c7a:	f7ff fdd9 	bl	2830 <I2C_Send>
}
    2c7e:	b005      	add	sp, #20
    2c80:	bd30      	pop	{r4, r5, pc}
    2c82:	bf00      	nop
    2c84:	000092ee 	.word	0x000092ee
    2c88:	00006ae0 	.word	0x00006ae0
    2c8c:	00006afc 	.word	0x00006afc
    2c90:	00006ee2 	.word	0x00006ee2

00002c94 <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c94:	b530      	push	{r4, r5, lr}
    2c96:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c98:	2500      	movs	r5, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c9a:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c9c:	481b      	ldr	r0, [pc, #108]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2c9e:	f003 fc41 	bl	6524 <_print>
	info_msg("Sending: ");
    2ca2:	481b      	ldr	r0, [pc, #108]	; (2d10 <cliFunc_i2cRecv+0x7c>)
    2ca4:	f003 fc3e 	bl	6524 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	4669      	mov	r1, sp
    2cac:	aa01      	add	r2, sp, #4
    2cae:	f003 f971 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2cb2:	9800      	ldr	r0, [sp, #0]
    2cb4:	7803      	ldrb	r3, [r0, #0]
    2cb6:	b1eb      	cbz	r3, 2cf4 <cliFunc_i2cRecv+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2cb8:	2b7c      	cmp	r3, #124	; 0x7c
    2cba:	d10a      	bne.n	2cd2 <cliFunc_i2cRecv+0x3e>
		{
			print("| ");
    2cbc:	4815      	ldr	r0, [pc, #84]	; (2d14 <cliFunc_i2cRecv+0x80>)
    2cbe:	f003 fc31 	bl	6524 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2cc2:	a802      	add	r0, sp, #8
    2cc4:	4629      	mov	r1, r5
    2cc6:	2200      	movs	r2, #0
    2cc8:	f7ff fdb2 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2ccc:	2400      	movs	r4, #0
    2cce:	4625      	mov	r5, r4
    2cd0:	e7ea      	b.n	2ca8 <cliFunc_i2cRecv+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cd2:	f003 fd39 	bl	6748 <numToInt>
    2cd6:	ab04      	add	r3, sp, #16
    2cd8:	1c6c      	adds	r4, r5, #1
    2cda:	441d      	add	r5, r3
    2cdc:	b2e4      	uxtb	r4, r4
    2cde:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2ce2:	9800      	ldr	r0, [sp, #0]
    2ce4:	f001 ff78 	bl	4bd8 <Output_putstr>
		print(" ");
    2ce8:	480b      	ldr	r0, [pc, #44]	; (2d18 <cliFunc_i2cRecv+0x84>)
    2cea:	f003 fc1b 	bl	6524 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2cee:	2c07      	cmp	r4, #7
    2cf0:	d9ed      	bls.n	2cce <cliFunc_i2cRecv+0x3a>
    2cf2:	e000      	b.n	2cf6 <cliFunc_i2cRecv+0x62>
    2cf4:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2cf6:	4805      	ldr	r0, [pc, #20]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2cf8:	f003 fc14 	bl	6524 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2cfc:	a802      	add	r0, sp, #8
    2cfe:	4621      	mov	r1, r4
    2d00:	2201      	movs	r2, #1
    2d02:	f7ff fd95 	bl	2830 <I2C_Send>
}
    2d06:	b005      	add	sp, #20
    2d08:	bd30      	pop	{r4, r5, pc}
    2d0a:	bf00      	nop
    2d0c:	000092ee 	.word	0x000092ee
    2d10:	00006ae0 	.word	0x00006ae0
    2d14:	00006afc 	.word	0x00006afc
    2d18:	00006ee2 	.word	0x00006ee2

00002d1c <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d1e:	a902      	add	r1, sp, #8
    2d20:	aa03      	add	r2, sp, #12

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d22:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d24:	f003 f936 	bl	5f94 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d28:	9802      	ldr	r0, [sp, #8]
    2d2a:	7803      	ldrb	r3, [r0, #0]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d040      	beq.n	2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d30:	23fd      	movs	r3, #253	; 0xfd
    2d32:	24e8      	movs	r4, #232	; 0xe8
    2d34:	f88d 3001 	strb.w	r3, [sp, #1]
    2d38:	f88d 4000 	strb.w	r4, [sp]
    2d3c:	f003 fd04 	bl	6748 <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d40:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d42:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d46:	aa03      	add	r2, sp, #12
    2d48:	9803      	ldr	r0, [sp, #12]
    2d4a:	f003 f923 	bl	5f94 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d4e:	9802      	ldr	r0, [sp, #8]
    2d50:	7803      	ldrb	r3, [r0, #0]
    2d52:	b373      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d54:	f88d 4004 	strb.w	r4, [sp, #4]
    2d58:	f003 fcf6 	bl	6748 <numToInt>
    2d5c:	2300      	movs	r3, #0
    2d5e:	f88d 0005 	strb.w	r0, [sp, #5]
    2d62:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d66:	4668      	mov	r0, sp
    2d68:	2103      	movs	r1, #3
    2d6a:	2200      	movs	r2, #0
    2d6c:	f7ff fd60 	bl	2830 <I2C_Send>
    2d70:	b940      	cbnz	r0, 2d84 <cliFunc_ledWPage+0x68>
		delay(1);
    2d72:	2001      	movs	r0, #1
    2d74:	f7ff fc30 	bl	25d8 <delay>
    2d78:	e7f5      	b.n	2d66 <cliFunc_ledWPage+0x4a>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d7e:	3301      	adds	r3, #1
    2d80:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d84:	9803      	ldr	r0, [sp, #12]
    2d86:	a902      	add	r1, sp, #8
    2d88:	aa03      	add	r2, sp, #12
    2d8a:	f003 f903 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d8e:	9802      	ldr	r0, [sp, #8]
    2d90:	7803      	ldrb	r3, [r0, #0]
    2d92:	b173      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
			break;

		data[2] = numToInt( arg1Ptr );
    2d94:	f003 fcd8 	bl	6748 <numToInt>
    2d98:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2d9c:	a801      	add	r0, sp, #4
    2d9e:	2103      	movs	r1, #3
    2da0:	2200      	movs	r2, #0
    2da2:	f7ff fd45 	bl	2830 <I2C_Send>
    2da6:	2800      	cmp	r0, #0
    2da8:	d1e7      	bne.n	2d7a <cliFunc_ledWPage+0x5e>
			delay(1);
    2daa:	2001      	movs	r0, #1
    2dac:	f7ff fc14 	bl	25d8 <delay>
    2db0:	e7f4      	b.n	2d9c <cliFunc_ledWPage+0x80>

		// Increment address
		data[1]++;
	}
}
    2db2:	b004      	add	sp, #16
    2db4:	bd10      	pop	{r4, pc}
    2db6:	0000      	movs	r0, r0

00002db8 <LED_scan>:
// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
	// Check for current change event
	if ( LED_currentEvent )
    2db8:	4b08      	ldr	r3, [pc, #32]	; (2ddc <LED_scan+0x24>)
    2dba:	681a      	ldr	r2, [r3, #0]


// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
    2dbc:	b510      	push	{r4, lr}
    2dbe:	461c      	mov	r4, r3
	// Check for current change event
	if ( LED_currentEvent )
    2dc0:	b152      	cbz	r2, 2dd8 <LED_scan+0x20>
	{
		// TODO dim LEDs in low power mode instead of shutting off
		if ( LED_currentEvent < 150 )
    2dc2:	2a95      	cmp	r2, #149	; 0x95
		{
			// Enable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x00, 0x0B );
    2dc4:	f04f 000a 	mov.w	r0, #10
    2dc8:	bf94      	ite	ls
    2dca:	2100      	movls	r1, #0
		}
		else
		{
			// Disable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x01, 0x0B );
    2dcc:	2101      	movhi	r1, #1
    2dce:	220b      	movs	r2, #11
    2dd0:	f7ff fe18 	bl	2a04 <LED_writeReg>
		}

		LED_currentEvent = 0;
    2dd4:	2300      	movs	r3, #0
    2dd6:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    2dd8:	2000      	movs	r0, #0
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	1fff8ff0 	.word	0x1fff8ff0

00002de0 <LED_currentChange>:
// Called by parent Scan Module whenver the available current has changed
// current - mA
void LED_currentChange( unsigned int current )
{
	// Delay action till next LED scan loop (as this callback sometimes occurs during interrupt requests)
	LED_currentEvent = current;
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <LED_currentChange+0x8>)
    2de2:	6018      	str	r0, [r3, #0]
    2de4:	4770      	bx	lr
    2de6:	bf00      	nop
    2de8:	1fff8ff0 	.word	0x1fff8ff0

00002dec <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2dec:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2dee:	b510      	push	{r4, lr}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2df0:	2b05      	cmp	r3, #5
    2df2:	d837      	bhi.n	2e64 <LED_control+0x78>
    2df4:	e8df f003 	tbb	[pc, r3]
    2df8:	17120a03 	.word	0x17120a03
    2dfc:	2e23      	.short	0x2e23
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2dfe:	4a1f      	ldr	r2, [pc, #124]	; (2e7c <LED_control+0x90>)
    2e00:	8843      	ldrh	r3, [r0, #2]
    2e02:	7841      	ldrb	r1, [r0, #1]
    2e04:	4413      	add	r3, r2
    2e06:	789a      	ldrb	r2, [r3, #2]
    2e08:	1a52      	subs	r2, r2, r1
    2e0a:	e005      	b.n	2e18 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2e0c:	4a1b      	ldr	r2, [pc, #108]	; (2e7c <LED_control+0x90>)
    2e0e:	8843      	ldrh	r3, [r0, #2]
    2e10:	4413      	add	r3, r2
    2e12:	7842      	ldrb	r2, [r0, #1]
    2e14:	7899      	ldrb	r1, [r3, #2]
    2e16:	440a      	add	r2, r1
    2e18:	709a      	strb	r2, [r3, #2]
		break;
    2e1a:	e023      	b.n	2e64 <LED_control+0x78>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2e1c:	8843      	ldrh	r3, [r0, #2]
    2e1e:	4917      	ldr	r1, [pc, #92]	; (2e7c <LED_control+0x90>)
    2e20:	7842      	ldrb	r2, [r0, #1]
    2e22:	440b      	add	r3, r1
    2e24:	e7f8      	b.n	2e18 <LED_control+0x2c>
    2e26:	4b16      	ldr	r3, [pc, #88]	; (2e80 <LED_control+0x94>)
    2e28:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2e30:	7844      	ldrb	r4, [r0, #1]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e32:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e34:	eba2 0204 	sub.w	r2, r2, r4
    2e38:	701a      	strb	r2, [r3, #0]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e3a:	d1f7      	bne.n	2e2c <LED_control+0x40>
    2e3c:	e012      	b.n	2e64 <LED_control+0x78>
    2e3e:	4b10      	ldr	r3, [pc, #64]	; (2e80 <LED_control+0x94>)
    2e40:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e44:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    2e48:	7842      	ldrb	r2, [r0, #1]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e4a:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e4c:	4422      	add	r2, r4
    2e4e:	701a      	strb	r2, [r3, #0]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e50:	d1f8      	bne.n	2e44 <LED_control+0x58>
    2e52:	e007      	b.n	2e64 <LED_control+0x78>
    2e54:	4b0a      	ldr	r3, [pc, #40]	; (2e80 <LED_control+0x94>)
    2e56:	f103 0290 	add.w	r2, r3, #144	; 0x90
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e5a:	7841      	ldrb	r1, [r0, #1]
    2e5c:	f803 1f01 	strb.w	r1, [r3, #1]!
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e60:	4293      	cmp	r3, r2
    2e62:	d1fa      	bne.n	2e5a <LED_control+0x6e>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e64:	4805      	ldr	r0, [pc, #20]	; (2e7c <LED_control+0x90>)
    2e66:	23e8      	movs	r3, #232	; 0xe8
    2e68:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e6a:	2324      	movs	r3, #36	; 0x24
    2e6c:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e6e:	2192      	movs	r1, #146	; 0x92
    2e70:	2200      	movs	r2, #0
}
    2e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e76:	f7ff bd93 	b.w	29a0 <LED_sendPage>
    2e7a:	bf00      	nop
    2e7c:	1fff9845 	.word	0x1fff9845
    2e80:	1fff9846 	.word	0x1fff9846

00002e84 <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg2Ptr = args;
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e86:	a901      	add	r1, sp, #4
    2e88:	aa02      	add	r2, sp, #8

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e8a:	9002      	str	r0, [sp, #8]
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e8c:	f003 f882 	bl	5f94 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e90:	9801      	ldr	r0, [sp, #4]
    2e92:	7803      	ldrb	r3, [r0, #0]
    2e94:	b30b      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.mode = numToInt( arg1Ptr );
    2e96:	f003 fc57 	bl	6748 <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e9a:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2e9c:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ea0:	aa02      	add	r2, sp, #8
    2ea2:	9802      	ldr	r0, [sp, #8]
    2ea4:	f003 f876 	bl	5f94 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2ea8:	9801      	ldr	r0, [sp, #4]
    2eaa:	7803      	ldrb	r3, [r0, #0]
    2eac:	b1ab      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.amount = numToInt( arg1Ptr );
    2eae:	f003 fc4b 	bl	6748 <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb2:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2eb4:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb8:	aa02      	add	r2, sp, #8
    2eba:	9802      	ldr	r0, [sp, #8]
    2ebc:	f003 f86a 	bl	5f94 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2ec0:	9801      	ldr	r0, [sp, #4]
    2ec2:	7803      	ldrb	r3, [r0, #0]
    2ec4:	b11b      	cbz	r3, 2ece <cliFunc_ledCtrl+0x4a>
    2ec6:	f003 fc3f 	bl	6748 <numToInt>
    2eca:	b280      	uxth	r0, r0
    2ecc:	e000      	b.n	2ed0 <cliFunc_ledCtrl+0x4c>
    2ece:	4618      	mov	r0, r3
    2ed0:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2ed4:	a803      	add	r0, sp, #12
    2ed6:	f7ff ff89 	bl	2dec <LED_control>
}
    2eda:	b005      	add	sp, #20
    2edc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee0 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ee0:	2aff      	cmp	r2, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    2ee2:	b510      	push	{r4, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ee4:	d106      	bne.n	2ef4 <LED_control_capability+0x14>
    2ee6:	29ff      	cmp	r1, #255	; 0xff
    2ee8:	d107      	bne.n	2efa <LED_control_capability+0x1a>
	{
		print("LED_control_capability(mode,amount,index)");
    2eea:	480c      	ldr	r0, [pc, #48]	; (2f1c <LED_control_capability+0x3c>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2ef0:	f003 bb18 	b.w	6524 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2ef4:	b90a      	cbnz	r2, 2efa <LED_control_capability+0x1a>
    2ef6:	2903      	cmp	r1, #3
    2ef8:	d00f      	beq.n	2f1a <LED_control_capability+0x3a>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2efa:	4a09      	ldr	r2, [pc, #36]	; (2f20 <LED_control_capability+0x40>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2efc:	4c09      	ldr	r4, [pc, #36]	; (2f24 <LED_control_capability+0x44>)
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2efe:	6811      	ldr	r1, [r2, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f00:	7822      	ldrb	r2, [r4, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f02:	b2c9      	uxtb	r1, r1
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f04:	1a8a      	subs	r2, r1, r2
	if ( compare < 30 )
    2f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2f0a:	2a1d      	cmp	r2, #29
    2f0c:	dd05      	ble.n	2f1a <LED_control_capability+0x3a>
	{
		return;
	}
	LED_control_timer = currentTime;
    2f0e:	7021      	strb	r1, [r4, #0]
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f10:	4618      	mov	r0, r3
}
    2f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f16:	f7ff bf69 	b.w	2dec <LED_control>
    2f1a:	bd10      	pop	{r4, pc}
    2f1c:	00006aff 	.word	0x00006aff
    2f20:	1fff8fec 	.word	0x1fff8fec
    2f24:	1fff8ff4 	.word	0x1fff8ff4

00002f28 <cliFunc_matrixInfo>:


// ----- CLI Command Functions -----

void cliFunc_matrixInfo( char* args )
{
    2f28:	b510      	push	{r4, lr}
	print( NL );
    2f2a:	4c10      	ldr	r4, [pc, #64]	; (2f6c <cliFunc_matrixInfo+0x44>)
    2f2c:	4620      	mov	r0, r4
    2f2e:	f003 faf9 	bl	6524 <_print>
	info_msg("Columns:  ");
    2f32:	480f      	ldr	r0, [pc, #60]	; (2f70 <cliFunc_matrixInfo+0x48>)
    2f34:	f003 faf6 	bl	6524 <_print>
	printHex( Matrix_colsNum );
    2f38:	2101      	movs	r1, #1
    2f3a:	2009      	movs	r0, #9
    2f3c:	f003 fb94 	bl	6668 <printHex_op>

	print( NL );
    2f40:	4620      	mov	r0, r4
    2f42:	f003 faef 	bl	6524 <_print>
	info_msg("Rows:     ");
    2f46:	480b      	ldr	r0, [pc, #44]	; (2f74 <cliFunc_matrixInfo+0x4c>)
    2f48:	f003 faec 	bl	6524 <_print>
	printHex( Matrix_rowsNum );
    2f4c:	2101      	movs	r1, #1
    2f4e:	2008      	movs	r0, #8
    2f50:	f003 fb8a 	bl	6668 <printHex_op>

	print( NL );
    2f54:	4620      	mov	r0, r4
    2f56:	f003 fae5 	bl	6524 <_print>
	info_msg("Max Keys: ");
    2f5a:	4807      	ldr	r0, [pc, #28]	; (2f78 <cliFunc_matrixInfo+0x50>)
    2f5c:	f003 fae2 	bl	6524 <_print>
	printHex( Matrix_maxKeys );
    2f60:	2048      	movs	r0, #72	; 0x48
    2f62:	2101      	movs	r1, #1
}
    2f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	print( NL );
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
    2f68:	f003 bb7e 	b.w	6668 <printHex_op>
    2f6c:	000092ee 	.word	0x000092ee
    2f70:	00006dd2 	.word	0x00006dd2
    2f74:	00006def 	.word	0x00006def
    2f78:	00006e0c 	.word	0x00006e0c

00002f7c <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState( char* args )
{
    2f7c:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f7e:	4c07      	ldr	r4, [pc, #28]	; (2f9c <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f80:	4669      	mov	r1, sp
    2f82:	aa01      	add	r2, sp, #4
    2f84:	f003 f806 	bl	5f94 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f88:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2f8a:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f8c:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2f8e:	7803      	ldrb	r3, [r0, #0]
    2f90:	b113      	cbz	r3, 2f98 <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2f92:	f003 fbd9 	bl	6748 <numToInt>
    2f96:	8020      	strh	r0, [r4, #0]
	}
}
    2f98:	b002      	add	sp, #8
    2f9a:	bd10      	pop	{r4, pc}
    2f9c:	1fff8ffe 	.word	0x1fff8ffe

00002fa0 <cliFunc_matrixDebug>:
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
}

void cliFunc_matrixDebug( char* args )
{
    2fa0:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2fa2:	4669      	mov	r1, sp
    2fa4:	aa01      	add	r2, sp, #4
    2fa6:	f002 fff5 	bl	5f94 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    2faa:	9b00      	ldr	r3, [sp, #0]
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b54      	cmp	r3, #84	; 0x54
    2fb0:	d00a      	beq.n	2fc8 <cliFunc_matrixDebug+0x28>
    2fb2:	2b74      	cmp	r3, #116	; 0x74
    2fb4:	d008      	beq.n	2fc8 <cliFunc_matrixDebug+0x28>
    2fb6:	b9c3      	cbnz	r3, 2fea <cliFunc_matrixDebug+0x4a>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    2fb8:	4a0d      	ldr	r2, [pc, #52]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fba:	7813      	ldrb	r3, [r2, #0]
    2fbc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    2fc0:	bf18      	it	ne
    2fc2:	2301      	movne	r3, #1
    2fc4:	7013      	strb	r3, [r2, #0]
		break;
    2fc6:	e006      	b.n	2fd6 <cliFunc_matrixDebug+0x36>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    2fc8:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fca:	781a      	ldrb	r2, [r3, #0]
    2fcc:	2a02      	cmp	r2, #2
    2fce:	bf14      	ite	ne
    2fd0:	2202      	movne	r2, #2
    2fd2:	2200      	moveq	r2, #0
    2fd4:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    2fd6:	4807      	ldr	r0, [pc, #28]	; (2ff4 <cliFunc_matrixDebug+0x54>)
    2fd8:	f003 faa4 	bl	6524 <_print>
	info_msg("Matrix Debug Mode: ");
    2fdc:	4806      	ldr	r0, [pc, #24]	; (2ff8 <cliFunc_matrixDebug+0x58>)
    2fde:	f003 faa1 	bl	6524 <_print>
	printInt8( matrixDebugMode );
    2fe2:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fe4:	7818      	ldrb	r0, [r3, #0]
    2fe6:	f003 facc 	bl	6582 <printInt8>
}
    2fea:	b003      	add	sp, #12
    2fec:	f85d fb04 	ldr.w	pc, [sp], #4
    2ff0:	1fff8ffc 	.word	0x1fff8ffc
    2ff4:	000092ee 	.word	0x000092ee
    2ff8:	00006e29 	.word	0x00006e29

00002ffc <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    2ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ffe:	b2c3      	uxtb	r3, r0
    3000:	f8ad 0004 	strh.w	r0, [sp, #4]
    3004:	f3c0 2007 	ubfx	r0, r0, #8, #8
	// Register width is defined as size of a pointer
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
    3008:	011a      	lsls	r2, r3, #4
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;
    300a:	eb00 2383 	add.w	r3, r0, r3, lsl #10
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    300e:	009b      	lsls	r3, r3, #2
    3010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    3014:	4c26      	ldr	r4, [pc, #152]	; (30b0 <Matrix_pin+0xb4>)
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    3016:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    301a:	2904      	cmp	r1, #4
    301c:	d845      	bhi.n	30aa <Matrix_pin+0xae>
    301e:	e8df f001 	tbb	[pc, r1]
    3022:	0503      	.short	0x0503
    3024:	200e      	.short	0x200e
    3026:	2a          	.byte	0x2a
    3027:	00          	.byte	0x00

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    3028:	4922      	ldr	r1, [pc, #136]	; (30b4 <Matrix_pin+0xb8>)
    302a:	e000      	b.n	302e <Matrix_pin+0x32>
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    302c:	4922      	ldr	r1, [pc, #136]	; (30b8 <Matrix_pin+0xbc>)
	case Type_StrobeOff:
		#ifdef GHOSTING_MATRIX
		// Ghosting martix needs to put not used (off) strobes in high impedance state
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		#endif
		*GPIO_PCOR |= (1 << gpio.pin);
    302e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    3032:	2301      	movs	r3, #1
    3034:	4083      	lsls	r3, r0
    3036:	4323      	orrs	r3, r4
    3038:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    303c:	e035      	b.n	30aa <Matrix_pin+0xae>
		#ifdef GHOSTING_MATRIX
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		*GPIO_PCOR |= (1 << gpio.pin);
		#else
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    303e:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    3042:	2101      	movs	r1, #1
    3044:	4081      	lsls	r1, r0
    3046:	4329      	orrs	r1, r5
    3048:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		#endif

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    304c:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3050:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    3052:	4a1a      	ldr	r2, [pc, #104]	; (30bc <Matrix_pin+0xc0>)
    3054:	7812      	ldrb	r2, [r2, #0]
    3056:	2a02      	cmp	r2, #2
    3058:	d127      	bne.n	30aa <Matrix_pin+0xae>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    305a:	681a      	ldr	r2, [r3, #0]
    305c:	f042 0220 	orr.w	r2, r2, #32
    3060:	e022      	b.n	30a8 <Matrix_pin+0xac>
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    3062:	4b17      	ldr	r3, [pc, #92]	; (30c0 <Matrix_pin+0xc4>)

	case Type_Sense:
		#ifdef GHOSTING_MATRIX  // inverted
		return *GPIO_PDIR & (1 << gpio.pin) ? 0 : 1;
		#else
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    3064:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3068:	2301      	movs	r3, #1
    306a:	4083      	lsls	r3, r0
    306c:	421a      	tst	r2, r3
    306e:	bf14      	ite	ne
    3070:	2001      	movne	r0, #1
    3072:	2000      	moveq	r0, #0
    3074:	e01a      	b.n	30ac <Matrix_pin+0xb0>
		#endif

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    3076:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    307a:	2101      	movs	r1, #1
    307c:	4081      	lsls	r1, r0
    307e:	ea25 0101 	bic.w	r1, r5, r1
    3082:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    3086:	f44f 7288 	mov.w	r2, #272	; 0x110
    308a:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    308c:	4a0b      	ldr	r2, [pc, #44]	; (30bc <Matrix_pin+0xc0>)
    308e:	7810      	ldrb	r0, [r2, #0]
    3090:	b128      	cbz	r0, 309e <Matrix_pin+0xa2>
    3092:	2801      	cmp	r0, #1
    3094:	d109      	bne.n	30aa <Matrix_pin+0xae>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    3096:	681a      	ldr	r2, [r3, #0]
    3098:	f042 0202 	orr.w	r2, r2, #2
    309c:	e004      	b.n	30a8 <Matrix_pin+0xac>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    309e:	681a      	ldr	r2, [r3, #0]
    30a0:	f042 0203 	orr.w	r2, r2, #3
    30a4:	601a      	str	r2, [r3, #0]
			break;
    30a6:	e001      	b.n	30ac <Matrix_pin+0xb0>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    30a8:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    30aa:	2000      	movs	r0, #0
}
    30ac:	b003      	add	sp, #12
    30ae:	bd30      	pop	{r4, r5, pc}
    30b0:	400ff014 	.word	0x400ff014
    30b4:	400ff004 	.word	0x400ff004
    30b8:	400ff008 	.word	0x400ff008
    30bc:	1fff8a0a 	.word	0x1fff8a0a
    30c0:	400ff010 	.word	0x400ff010

000030c4 <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    30c4:	b538      	push	{r3, r4, r5, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    30c6:	481e      	ldr	r0, [pc, #120]	; (3140 <Matrix_setup+0x7c>)
    30c8:	491e      	ldr	r1, [pc, #120]	; (3144 <Matrix_setup+0x80>)
    30ca:	f002 ffd7 	bl	607c <CLI_registerDictionary>
    30ce:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    30d0:	4b1d      	ldr	r3, [pc, #116]	; (3148 <Matrix_setup+0x84>)
    30d2:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30d6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30da:	2102      	movs	r1, #2
    30dc:	7858      	ldrb	r0, [r3, #1]
    30de:	3401      	adds	r4, #1
    30e0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30e4:	f7ff ff8a 	bl	2ffc <Matrix_pin>
{
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    30e8:	2c09      	cmp	r4, #9
    30ea:	d1f1      	bne.n	30d0 <Matrix_setup+0xc>
    30ec:	2400      	movs	r4, #0
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    30ee:	4b17      	ldr	r3, [pc, #92]	; (314c <Matrix_setup+0x88>)
    30f0:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30f4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30f8:	2104      	movs	r1, #4
    30fa:	7858      	ldrb	r0, [r3, #1]
    30fc:	3401      	adds	r4, #1
    30fe:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    3102:	f7ff ff7b 	bl	2ffc <Matrix_pin>
		col_ghost_old[pin] = 0;
		#endif
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    3106:	2c08      	cmp	r4, #8
    3108:	d1f1      	bne.n	30ee <Matrix_setup+0x2a>
    310a:	4a11      	ldr	r2, [pc, #68]	; (3150 <Matrix_setup+0x8c>)
    310c:	2100      	movs	r1, #0
    310e:	4615      	mov	r5, r2
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3110:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3114:	2300      	movs	r3, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3116:	1928      	adds	r0, r5, r4
    3118:	3101      	adds	r1, #1
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    311a:	7113      	strb	r3, [r2, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    311c:	7153      	strb	r3, [r2, #5]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    311e:	2948      	cmp	r1, #72	; 0x48
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3120:	552b      	strb	r3, [r5, r4]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3122:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3126:	7043      	strb	r3, [r0, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3128:	7084      	strb	r4, [r0, #2]
    312a:	70c4      	strb	r4, [r0, #3]
    312c:	f102 0207 	add.w	r2, r2, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    3130:	f802 3c01 	strb.w	r3, [r2, #-1]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3134:	d1ec      	bne.n	3110 <Matrix_setup+0x4c>
		Matrix_ghostArray[ item ].saved           = KeyState_Off;
		#endif
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    3136:	4a07      	ldr	r2, [pc, #28]	; (3154 <Matrix_setup+0x90>)
    3138:	8013      	strh	r3, [r2, #0]
	matrixPrevScans = 0;
    313a:	4a07      	ldr	r2, [pc, #28]	; (3158 <Matrix_setup+0x94>)
    313c:	8013      	strh	r3, [r2, #0]
    313e:	bd38      	pop	{r3, r4, r5, pc}
    3140:	0000707c 	.word	0x0000707c
    3144:	00007062 	.word	0x00007062
    3148:	1fff89e8 	.word	0x1fff89e8
    314c:	1fff89fa 	.word	0x1fff89fa
    3150:	1fff9a03 	.word	0x1fff9a03
    3154:	1fff8ffa 	.word	0x1fff8ffa
    3158:	1fff8ff8 	.word	0x1fff8ff8

0000315c <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    315c:	2803      	cmp	r0, #3
    315e:	d80b      	bhi.n	3178 <Matrix_keyPositionDebug+0x1c>
    3160:	e8df f000 	tbb	[pc, r0]
    3164:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    3168:	4805      	ldr	r0, [pc, #20]	; (3180 <Matrix_keyPositionDebug+0x24>)
    316a:	e006      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    316c:	4805      	ldr	r0, [pc, #20]	; (3184 <Matrix_keyPositionDebug+0x28>)
    316e:	e004      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    3170:	4805      	ldr	r0, [pc, #20]	; (3188 <Matrix_keyPositionDebug+0x2c>)
    3172:	e002      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    3174:	4805      	ldr	r0, [pc, #20]	; (318c <Matrix_keyPositionDebug+0x30>)
    3176:	e000      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    3178:	4805      	ldr	r0, [pc, #20]	; (3190 <Matrix_keyPositionDebug+0x34>)
    317a:	f003 b9d3 	b.w	6524 <_print>
    317e:	bf00      	nop
    3180:	00006e4f 	.word	0x00006e4f
    3184:	00006e59 	.word	0x00006e59
    3188:	00006e66 	.word	0x00006e66
    318c:	00006e73 	.word	0x00006e73
    3190:	00006e80 	.word	0x00006e80

00003194 <Matrix_scan>:


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    3194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    3198:	4b9d      	ldr	r3, [pc, #628]	; (3410 <Matrix_scan+0x27c>)
    319a:	9301      	str	r3, [sp, #4]
    319c:	881a      	ldrh	r2, [r3, #0]
    319e:	4282      	cmp	r2, r0
    31a0:	bf38      	it	cc
    31a2:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31a4:	4607      	mov	r7, r0
    31a6:	4b9b      	ldr	r3, [pc, #620]	; (3414 <Matrix_scan+0x280>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    31a8:	b920      	cbnz	r0, 31b4 <Matrix_scan+0x20>
	{
		matrixPrevScans = matrixCurScans;
    31aa:	4a9b      	ldr	r2, [pc, #620]	; (3418 <Matrix_scan+0x284>)
    31ac:	8819      	ldrh	r1, [r3, #0]
    31ae:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    31b0:	8018      	strh	r0, [r3, #0]
    31b2:	e002      	b.n	31ba <Matrix_scan+0x26>
	}
	else
	{
		matrixCurScans++;
    31b4:	881a      	ldrh	r2, [r3, #0]
    31b6:	3201      	adds	r2, #1
    31b8:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    31ba:	4b98      	ldr	r3, [pc, #608]	; (341c <Matrix_scan+0x288>)
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	2600      	movs	r6, #0
    31c0:	fa5f fb83 	uxtb.w	fp, r3
		uint32_t start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    31c4:	f8df a26c 	ldr.w	sl, [pc, #620]	; 3434 <Matrix_scan+0x2a0>
    31c8:	0072      	lsls	r2, r6, #1
    31ca:	9200      	str	r2, [sp, #0]
    31cc:	4452      	add	r2, sl
    31ce:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    31d2:	7850      	ldrb	r0, [r2, #1]
    31d4:	2100      	movs	r1, #0
    31d6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    31da:	f7ff ff0f 	bl	2ffc <Matrix_pin>
    31de:	b2f4      	uxtb	r4, r6
    31e0:	f04f 0800 	mov.w	r8, #0
    31e4:	4d8e      	ldr	r5, [pc, #568]	; (3420 <Matrix_scan+0x28c>)
    31e6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];

			// If first scan, reset state
			if ( scanNum == 0 )
    31ea:	b937      	cbnz	r7, 31fa <Matrix_scan+0x66>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    31ec:	ebc4 0209 	rsb	r2, r4, r9
    31f0:	442a      	add	r2, r5
    31f2:	7951      	ldrb	r1, [r2, #5]
    31f4:	7111      	strb	r1, [r2, #4]
				state->curState  = KeyState_Invalid;
    31f6:	2104      	movs	r1, #4
    31f8:	7151      	strb	r1, [r2, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    31fa:	4a8a      	ldr	r2, [pc, #552]	; (3424 <Matrix_scan+0x290>)
    31fc:	f812 1018 	ldrb.w	r1, [r2, r8, lsl #1]
    3200:	eb02 0248 	add.w	r2, r2, r8, lsl #1
    3204:	7850      	ldrb	r0, [r2, #1]
    3206:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    320a:	2103      	movs	r1, #3
    320c:	f7ff fef6 	bl	2ffc <Matrix_pin>
    3210:	b178      	cbz	r0, 3232 <Matrix_scan+0x9e>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    3212:	ebc4 0109 	rsb	r1, r4, r9
    3216:	f64f 70ff 	movw	r0, #65535	; 0xffff
    321a:	5a6a      	ldrh	r2, [r5, r1]
    321c:	4282      	cmp	r2, r0
    321e:	bf1c      	itt	ne
    3220:	3201      	addne	r2, #1
    3222:	526a      	strhne	r2, [r5, r1]
				state->inactiveCount >>= 1;
    3224:	ebc4 0209 	rsb	r2, r4, r9
    3228:	442a      	add	r2, r5
    322a:	8851      	ldrh	r1, [r2, #2]
    322c:	0849      	lsrs	r1, r1, #1
    322e:	8051      	strh	r1, [r2, #2]
    3230:	e00e      	b.n	3250 <Matrix_scan+0xbc>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3232:	ebc4 0209 	rsb	r2, r4, r9
    3236:	442a      	add	r2, r5
    3238:	f64f 70ff 	movw	r0, #65535	; 0xffff
    323c:	8851      	ldrh	r1, [r2, #2]
    323e:	4281      	cmp	r1, r0
    3240:	bf1c      	itt	ne
    3242:	3101      	addne	r1, #1
    3244:	8051      	strhne	r1, [r2, #2]
				state->activeCount >>= 1;
    3246:	ebc4 0109 	rsb	r1, r4, r9
    324a:	5a6a      	ldrh	r2, [r5, r1]
    324c:	0852      	lsrs	r2, r2, #1
    324e:	526a      	strh	r2, [r5, r1]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    3250:	ebc4 0209 	rsb	r2, r4, r9
    3254:	442a      	add	r2, r5
    3256:	7951      	ldrb	r1, [r2, #5]
    3258:	2904      	cmp	r1, #4
    325a:	d157      	bne.n	330c <Matrix_scan+0x178>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    325c:	7991      	ldrb	r1, [r2, #6]

				// Attempt state transition
				switch ( state->prevState )
    325e:	7910      	ldrb	r0, [r2, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    3260:	ebc1 010b 	rsb	r1, r1, fp
    3264:	b2c9      	uxtb	r1, r1

				// Attempt state transition
				switch ( state->prevState )
    3266:	2803      	cmp	r0, #3
    3268:	d824      	bhi.n	32b4 <Matrix_scan+0x120>
    326a:	e8df f000 	tbb	[pc, r0]
    326e:	0211      	.short	0x0211
    3270:	1102      	.short	0x1102
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    3272:	ebc4 0209 	rsb	r2, r4, r9
    3276:	442a      	add	r2, r5
    3278:	f8b2 c000 	ldrh.w	ip, [r2]
    327c:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    3280:	45f4      	cmp	ip, lr
    3282:	d901      	bls.n	3288 <Matrix_scan+0xf4>
					{
						state->curState = KeyState_Hold;
    3284:	2102      	movs	r1, #2
    3286:	e011      	b.n	32ac <Matrix_scan+0x118>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    3288:	2904      	cmp	r1, #4
    328a:	d90c      	bls.n	32a6 <Matrix_scan+0x112>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    328c:	2103      	movs	r1, #3
    328e:	e00d      	b.n	32ac <Matrix_scan+0x118>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    3290:	ebc4 0209 	rsb	r2, r4, r9
    3294:	442a      	add	r2, r5
    3296:	f8b2 c000 	ldrh.w	ip, [r2]
    329a:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    329e:	45f4      	cmp	ip, lr
    32a0:	d906      	bls.n	32b0 <Matrix_scan+0x11c>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32a2:	2904      	cmp	r1, #4
    32a4:	d801      	bhi.n	32aa <Matrix_scan+0x116>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    32a6:	7150      	strb	r0, [r2, #5]
							continue;
    32a8:	e030      	b.n	330c <Matrix_scan+0x178>
						}

						state->curState = KeyState_Press;
    32aa:	2101      	movs	r1, #1
    32ac:	7151      	strb	r1, [r2, #5]
    32ae:	e004      	b.n	32ba <Matrix_scan+0x126>
					}
					else
					{
						state->curState = KeyState_Off;
    32b0:	2100      	movs	r1, #0
    32b2:	e7fb      	b.n	32ac <Matrix_scan+0x118>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    32b4:	485c      	ldr	r0, [pc, #368]	; (3428 <Matrix_scan+0x294>)
    32b6:	f003 f935 	bl	6524 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32ba:	ebc4 0309 	rsb	r3, r4, r9
    32be:	eb05 0903 	add.w	r9, r5, r3

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    32c2:	4620      	mov	r0, r4
					erro_print("Matrix scan bug!! Report me!");
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32c4:	f889 b006 	strb.w	fp, [r9, #6]

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    32c8:	f899 1005 	ldrb.w	r1, [r9, #5]
    32cc:	f000 fcd6 	bl	3c7c <Macro_keyState>
				#endif

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    32d0:	4a56      	ldr	r2, [pc, #344]	; (342c <Matrix_scan+0x298>)
    32d2:	7812      	ldrb	r2, [r2, #0]
    32d4:	b1d2      	cbz	r2, 330c <Matrix_scan+0x178>
    32d6:	f899 1005 	ldrb.w	r1, [r9, #5]
    32da:	f899 0004 	ldrb.w	r0, [r9, #4]
    32de:	4288      	cmp	r0, r1
    32e0:	d014      	beq.n	330c <Matrix_scan+0x178>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    32e2:	2a01      	cmp	r2, #1
    32e4:	d105      	bne.n	32f2 <Matrix_scan+0x15e>
    32e6:	2901      	cmp	r1, #1
    32e8:	d110      	bne.n	330c <Matrix_scan+0x178>
					{
						printHex( key );
    32ea:	4620      	mov	r0, r4
    32ec:	f003 f9bc 	bl	6668 <printHex_op>
    32f0:	e009      	b.n	3306 <Matrix_scan+0x172>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    32f2:	2a02      	cmp	r2, #2
    32f4:	d10a      	bne.n	330c <Matrix_scan+0x178>
					{
						printHex( key );
    32f6:	4620      	mov	r0, r4
    32f8:	2101      	movs	r1, #1
    32fa:	f003 f9b5 	bl	6668 <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    32fe:	f899 0005 	ldrb.w	r0, [r9, #5]
    3302:	f7ff ff2b 	bl	315c <Matrix_keyPositionDebug>
						print(" ");
    3306:	484a      	ldr	r0, [pc, #296]	; (3430 <Matrix_scan+0x29c>)
    3308:	f003 f90c 	bl	6524 <_print>
    330c:	f108 0801 	add.w	r8, r8, #1
    3310:	3409      	adds	r4, #9
		start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    3312:	f1b8 0f08 	cmp.w	r8, #8
    3316:	b2e4      	uxtb	r4, r4
    3318:	f47f af64 	bne.w	31e4 <Matrix_scan+0x50>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    331c:	9a00      	ldr	r2, [sp, #0]
    331e:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3322:	4691      	mov	r9, r2
    3324:	4a43      	ldr	r2, [pc, #268]	; (3434 <Matrix_scan+0x2a0>)
    3326:	4491      	add	r9, r2
    3328:	2101      	movs	r1, #1
    332a:	f899 0001 	ldrb.w	r0, [r9, #1]
    332e:	3601      	adds	r6, #1
    3330:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3334:	f7ff fe62 	bl	2ffc <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    3338:	2e09      	cmp	r6, #9
    333a:	f47f af43 	bne.w	31c4 <Matrix_scan+0x30>
#endif
	// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .


	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    333e:	4a3e      	ldr	r2, [pc, #248]	; (3438 <Matrix_scan+0x2a4>)
    3340:	8813      	ldrh	r3, [r2, #0]
    3342:	2b00      	cmp	r3, #0
    3344:	d060      	beq.n	3408 <Matrix_scan+0x274>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3346:	3b01      	subs	r3, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    3348:	483c      	ldr	r0, [pc, #240]	; (343c <Matrix_scan+0x2a8>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    334a:	8013      	strh	r3, [r2, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    334c:	f003 f8ea 	bl	6524 <_print>
		info_msg("Max scans:      ");
    3350:	483b      	ldr	r0, [pc, #236]	; (3440 <Matrix_scan+0x2ac>)
    3352:	4e33      	ldr	r6, [pc, #204]	; (3420 <Matrix_scan+0x28c>)
    3354:	f003 f8e6 	bl	6524 <_print>
		printHex( matrixMaxScans );
    3358:	9b01      	ldr	r3, [sp, #4]
    335a:	2101      	movs	r1, #1
    335c:	8818      	ldrh	r0, [r3, #0]
    335e:	f003 f983 	bl	6668 <printHex_op>
		print( NL );
    3362:	4836      	ldr	r0, [pc, #216]	; (343c <Matrix_scan+0x2a8>)
    3364:	f003 f8de 	bl	6524 <_print>
		info_msg("Previous scans: ");
    3368:	4836      	ldr	r0, [pc, #216]	; (3444 <Matrix_scan+0x2b0>)
    336a:	f003 f8db 	bl	6524 <_print>
		printHex( matrixPrevScans );
    336e:	4b2a      	ldr	r3, [pc, #168]	; (3418 <Matrix_scan+0x284>)
    3370:	2101      	movs	r1, #1
    3372:	8818      	ldrh	r0, [r3, #0]
    3374:	f003 f978 	bl	6668 <printHex_op>
		print( NL );
    3378:	4830      	ldr	r0, [pc, #192]	; (343c <Matrix_scan+0x2a8>)
    337a:	f003 f8d3 	bl	6524 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    337e:	4832      	ldr	r0, [pc, #200]	; (3448 <Matrix_scan+0x2b4>)
    3380:	f003 f8d0 	bl	6524 <_print>
		printHex( scanNum );
    3384:	2101      	movs	r1, #1
    3386:	4638      	mov	r0, r7
    3388:	f003 f96e 	bl	6668 <printHex_op>
		print( NL );
    338c:	482b      	ldr	r0, [pc, #172]	; (343c <Matrix_scan+0x2a8>)
    338e:	f003 f8c9 	bl	6524 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    3392:	482e      	ldr	r0, [pc, #184]	; (344c <Matrix_scan+0x2b8>)
    3394:	f003 f8c6 	bl	6524 <_print>
    3398:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    339a:	07a3      	lsls	r3, r4, #30
    339c:	d102      	bne.n	33a4 <Matrix_scan+0x210>
				print( NL );
    339e:	4827      	ldr	r0, [pc, #156]	; (343c <Matrix_scan+0x2a8>)
    33a0:	f003 f8c0 	bl	6524 <_print>

			print("\033[1m0x");
    33a4:	482a      	ldr	r0, [pc, #168]	; (3450 <Matrix_scan+0x2bc>)
    33a6:	f003 f8bd 	bl	6524 <_print>
			printHex_op( key, 2 );
    33aa:	2102      	movs	r1, #2
    33ac:	b2a0      	uxth	r0, r4
    33ae:	f003 f95b 	bl	6668 <printHex_op>
			print("\033[0m");
    33b2:	4828      	ldr	r0, [pc, #160]	; (3454 <Matrix_scan+0x2c0>)
    33b4:	f003 f8b6 	bl	6524 <_print>
			print(":");
    33b8:	4827      	ldr	r0, [pc, #156]	; (3458 <Matrix_scan+0x2c4>)
    33ba:	f003 f8b3 	bl	6524 <_print>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33be:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3

			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    33c2:	7930      	ldrb	r0, [r6, #4]
    33c4:	f7ff feca 	bl	315c <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33c8:	442f      	add	r7, r5
			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    33ca:	7970      	ldrb	r0, [r6, #5]
    33cc:	f7ff fec6 	bl	315c <Matrix_keyPositionDebug>
			print(" 0x");
    33d0:	4822      	ldr	r0, [pc, #136]	; (345c <Matrix_scan+0x2c8>)
    33d2:	f003 f8a7 	bl	6524 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33d6:	2104      	movs	r1, #4
    33d8:	8838      	ldrh	r0, [r7, #0]
    33da:	f003 f945 	bl	6668 <printHex_op>
			print(" 0x");
    33de:	481f      	ldr	r0, [pc, #124]	; (345c <Matrix_scan+0x2c8>)
    33e0:	f003 f8a0 	bl	6524 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    33e4:	8878      	ldrh	r0, [r7, #2]
    33e6:	2104      	movs	r1, #4
    33e8:	f003 f93e 	bl	6668 <printHex_op>
    33ec:	3401      	adds	r4, #1
			print(" ");
    33ee:	4810      	ldr	r0, [pc, #64]	; (3430 <Matrix_scan+0x29c>)
    33f0:	f003 f898 	bl	6524 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    33f4:	2c48      	cmp	r4, #72	; 0x48
    33f6:	f106 0607 	add.w	r6, r6, #7
    33fa:	d1ce      	bne.n	339a <Matrix_scan+0x206>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    33fc:	480f      	ldr	r0, [pc, #60]	; (343c <Matrix_scan+0x2a8>)
	}
}
    33fe:	b003      	add	sp, #12
    3400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    3404:	f003 b88e 	b.w	6524 <_print>
	}
}
    3408:	b003      	add	sp, #12
    340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    340e:	bf00      	nop
    3410:	1fff8ffa 	.word	0x1fff8ffa
    3414:	1fff8ff6 	.word	0x1fff8ff6
    3418:	1fff8ff8 	.word	0x1fff8ff8
    341c:	1fff8fec 	.word	0x1fff8fec
    3420:	1fff9a03 	.word	0x1fff9a03
    3424:	1fff89fa 	.word	0x1fff89fa
    3428:	00006e8d 	.word	0x00006e8d
    342c:	1fff8ffc 	.word	0x1fff8ffc
    3430:	00006ee2 	.word	0x00006ee2
    3434:	1fff89e8 	.word	0x1fff89e8
    3438:	1fff8ffe 	.word	0x1fff8ffe
    343c:	000092ee 	.word	0x000092ee
    3440:	00006ec1 	.word	0x00006ec1
    3444:	00006ee4 	.word	0x00006ee4
    3448:	00006f07 	.word	0x00006f07
    344c:	00006f2a 	.word	0x00006f2a
    3450:	00006f70 	.word	0x00006f70
    3454:	000073e9 	.word	0x000073e9
    3458:	00006f77 	.word	0x00006f77
    345c:	00006f79 	.word	0x00006f79

00003460 <Matrix_currentChange>:


// Called by parent scan module whenever the available current changes
// current - mA
void Matrix_currentChange( unsigned int current )
{
    3460:	4770      	bx	lr
    3462:	0000      	movs	r0, r0

00003464 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    3464:	b508      	push	{r3, lr}
	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    3466:	f7ff fe2d 	bl	30c4 <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    346a:	f7ff faf1 	bl	2a50 <LED_setup>

	// Reset scan count
	Scan_scanCount = 0;
    346e:	4b02      	ldr	r3, [pc, #8]	; (3478 <Scan_setup+0x14>)
    3470:	2200      	movs	r2, #0
    3472:	801a      	strh	r2, [r3, #0]
    3474:	bd08      	pop	{r3, pc}
    3476:	bf00      	nop
    3478:	1fff9000 	.word	0x1fff9000

0000347c <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    347c:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <Scan_loop+0x18>)
    3480:	8818      	ldrh	r0, [r3, #0]
    3482:	1c42      	adds	r2, r0, #1
    3484:	801a      	strh	r2, [r3, #0]
    3486:	f7ff fe85 	bl	3194 <Matrix_scan>

	// Process any LED events
	LED_scan();
    348a:	f7ff fc95 	bl	2db8 <LED_scan>

	return 0;
}
    348e:	2000      	movs	r0, #0
    3490:	bd08      	pop	{r3, pc}
    3492:	bf00      	nop
    3494:	1fff9000 	.word	0x1fff9000

00003498 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    3498:	4770      	bx	lr
    349a:	0000      	movs	r0, r0

0000349c <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    349c:	4b01      	ldr	r3, [pc, #4]	; (34a4 <Scan_finishedWithOutput+0x8>)
    349e:	2200      	movs	r2, #0
    34a0:	801a      	strh	r2, [r3, #0]
    34a2:	4770      	bx	lr
    34a4:	1fff9000 	.word	0x1fff9000

000034a8 <Scan_currentChange>:


// Signal from the Output Module that the available current has changed
// current - mA
void Scan_currentChange( unsigned int current )
{
    34a8:	b510      	push	{r4, lr}
    34aa:	4604      	mov	r4, r0
	// Indicate to all submodules current change
	Matrix_currentChange( current );
    34ac:	f7ff ffd8 	bl	3460 <Matrix_currentChange>
	LED_currentChange( current );
    34b0:	4620      	mov	r0, r4
}
    34b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// current - mA
void Scan_currentChange( unsigned int current )
{
	// Indicate to all submodules current change
	Matrix_currentChange( current );
	LED_currentChange( current );
    34b6:	f7ff bc93 	b.w	2de0 <LED_currentChange>
    34ba:	0000      	movs	r0, r0

000034bc <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    34bc:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    34be:	4810      	ldr	r0, [pc, #64]	; (3500 <cliFunc_capList+0x44>)
    34c0:	f003 f830 	bl	6524 <_print>
	info_msg("Capabilities List ");
    34c4:	480f      	ldr	r0, [pc, #60]	; (3504 <cliFunc_capList+0x48>)
    34c6:	f003 f82d 	bl	6524 <_print>
	printHex( CapabilitiesNum );
    34ca:	200f      	movs	r0, #15
    34cc:	2101      	movs	r1, #1
    34ce:	f003 f8cb 	bl	6668 <printHex_op>
    34d2:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    34d4:	480c      	ldr	r0, [pc, #48]	; (3508 <cliFunc_capList+0x4c>)
    34d6:	f003 f825 	bl	6524 <_print>
		printHex( cap );
    34da:	b2a0      	uxth	r0, r4
    34dc:	2101      	movs	r1, #1
    34de:	f003 f8c3 	bl	6668 <printHex_op>
		print(" - ");
    34e2:	480a      	ldr	r0, [pc, #40]	; (350c <cliFunc_capList+0x50>)
    34e4:	f003 f81e 	bl	6524 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    34e8:	4b09      	ldr	r3, [pc, #36]	; (3510 <cliFunc_capList+0x54>)
		capability( 0, 0xFF, 0xFF, 0 );
    34ea:	2000      	movs	r0, #0
    34ec:	21ff      	movs	r1, #255	; 0xff
    34ee:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
    34f2:	460a      	mov	r2, r1
    34f4:	4603      	mov	r3, r0
    34f6:	3401      	adds	r4, #1
    34f8:	47a8      	blx	r5
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    34fa:	2c0f      	cmp	r4, #15
    34fc:	d1ea      	bne.n	34d4 <cliFunc_capList+0x18>
		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0, 0xFF, 0xFF, 0 );
	}
}
    34fe:	bd38      	pop	{r3, r4, r5, pc}
    3500:	000092ee 	.word	0x000092ee
    3504:	00007235 	.word	0x00007235
    3508:	0000725a 	.word	0x0000725a
    350c:	0000926e 	.word	0x0000926e
    3510:	000070d8 	.word	0x000070d8

00003514 <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    3514:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3516:	4669      	mov	r1, sp
    3518:	aa01      	add	r2, sp, #4
    351a:	f002 fd3b 	bl	5f94 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    351e:	9800      	ldr	r0, [sp, #0]
    3520:	f003 f912 	bl	6748 <numToInt>
    3524:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    3526:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    352a:	bf08      	it	eq
    352c:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    352e:	8018      	strh	r0, [r3, #0]
}
    3530:	b003      	add	sp, #12
    3532:	f85d fb04 	ldr.w	pc, [sp], #4
    3536:	bf00      	nop
    3538:	1fff9004 	.word	0x1fff9004

0000353c <cliFunc_capSelect>:
		capability( 0, 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    353c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3540:	2700      	movs	r7, #0
		capability( 0, 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    3542:	4604      	mov	r4, r0
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3544:	9001      	str	r0, [sp, #4]
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    3546:	46b9      	mov	r9, r7
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    3548:	46b8      	mov	r8, r7
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    354a:	2602      	movs	r6, #2

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    354c:	9801      	ldr	r0, [sp, #4]
    354e:	4669      	mov	r1, sp
    3550:	aa01      	add	r2, sp, #4
    3552:	f002 fd1f 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    3556:	9800      	ldr	r0, [sp, #0]
    3558:	7803      	ldrb	r3, [r0, #0]
    355a:	2b00      	cmp	r3, #0
    355c:	d05d      	beq.n	361a <cliFunc_capSelect+0xde>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    355e:	f017 0fff 	tst.w	r7, #255	; 0xff
    3562:	d10e      	bne.n	3582 <cliFunc_capSelect+0x46>
    3564:	2b4b      	cmp	r3, #75	; 0x4b
    3566:	d10c      	bne.n	3582 <cliFunc_capSelect+0x46>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    3568:	3001      	adds	r0, #1
    356a:	f003 f8ed 	bl	6748 <numToInt>

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    356e:	4b2c      	ldr	r3, [pc, #176]	; (3620 <cliFunc_capSelect+0xe4>)
		if ( c == 0 ) switch ( arg1Ptr[0] )
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    3570:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    3574:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
			continue;
    3578:	464d      	mov	r5, r9
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    357a:	791b      	ldrb	r3, [r3, #4]
    357c:	441e      	add	r6, r3
    357e:	b2f6      	uxtb	r6, r6
			continue;
    3580:	e045      	b.n	360e <cliFunc_capSelect+0xd2>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    3582:	f003 f8e1 	bl	6748 <numToInt>
    3586:	f109 0501 	add.w	r5, r9, #1
    358a:	b2ed      	uxtb	r5, r5

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    358c:	42b5      	cmp	r5, r6
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    358e:	f804 0009 	strb.w	r0, [r4, r9]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    3592:	d13c      	bne.n	360e <cliFunc_capSelect+0xd2>
		{
			// Indicate that the capability was called
			print( NL );
    3594:	4823      	ldr	r0, [pc, #140]	; (3624 <cliFunc_capSelect+0xe8>)
    3596:	f002 ffc5 	bl	6524 <_print>
			info_msg("K");
    359a:	4823      	ldr	r0, [pc, #140]	; (3628 <cliFunc_capSelect+0xec>)
    359c:	f002 ffc2 	bl	6524 <_print>
			printInt8( cap );
    35a0:	4640      	mov	r0, r8
    35a2:	f002 ffee 	bl	6582 <printInt8>
			print(" - ");
    35a6:	4821      	ldr	r0, [pc, #132]	; (362c <cliFunc_capSelect+0xf0>)
    35a8:	f002 ffbc 	bl	6524 <_print>
			printHex( argSet[0] );
    35ac:	2101      	movs	r1, #1
    35ae:	7820      	ldrb	r0, [r4, #0]
    35b0:	f003 f85a 	bl	6668 <printHex_op>
			print(" - ");
    35b4:	481d      	ldr	r0, [pc, #116]	; (362c <cliFunc_capSelect+0xf0>)
    35b6:	f002 ffb5 	bl	6524 <_print>
			printHex( argSet[1] );
    35ba:	2101      	movs	r1, #1
    35bc:	7860      	ldrb	r0, [r4, #1]
    35be:	f003 f853 	bl	6668 <printHex_op>
			print(" - ");
    35c2:	481a      	ldr	r0, [pc, #104]	; (362c <cliFunc_capSelect+0xf0>)
    35c4:	f002 ffae 	bl	6524 <_print>
			printHex( argSet[2] );
    35c8:	78a0      	ldrb	r0, [r4, #2]
    35ca:	2101      	movs	r1, #1
    35cc:	f003 f84c 	bl	6668 <printHex_op>
			print( "..." NL );
    35d0:	4817      	ldr	r0, [pc, #92]	; (3630 <cliFunc_capSelect+0xf4>)
    35d2:	f002 ffa7 	bl	6524 <_print>

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    35d6:	2300      	movs	r3, #0
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    35d8:	4a11      	ldr	r2, [pc, #68]	; (3620 <cliFunc_capSelect+0xe4>)
    35da:	4916      	ldr	r1, [pc, #88]	; (3634 <cliFunc_capSelect+0xf8>)
    35dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    35e0:	4288      	cmp	r0, r1
    35e2:	d109      	bne.n	35f8 <cliFunc_capSelect+0xbc>
				{
					print( NL );
    35e4:	480f      	ldr	r0, [pc, #60]	; (3624 <cliFunc_capSelect+0xe8>)
    35e6:	f002 ff9d 	bl	6524 <_print>
					warn_print("flashModeEnabled not set, cancelling firmware reload...");
    35ea:	4813      	ldr	r0, [pc, #76]	; (3638 <cliFunc_capSelect+0xfc>)
    35ec:	f002 ff9a 	bl	6524 <_print>
					info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    35f0:	4812      	ldr	r0, [pc, #72]	; (363c <cliFunc_capSelect+0x100>)
    35f2:	f002 ff97 	bl	6524 <_print>
    35f6:	e010      	b.n	361a <cliFunc_capSelect+0xde>
			printHex( argSet[2] );
			print( "..." NL );

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    35f8:	3301      	adds	r3, #1
    35fa:	2b0f      	cmp	r3, #15
    35fc:	d1ec      	bne.n	35d8 <cliFunc_capSelect+0x9c>
				}
			}

			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( 0, argSet[0], argSet[1], &argSet[2] );
    35fe:	f852 6038 	ldr.w	r6, [r2, r8, lsl #3]
    3602:	7821      	ldrb	r1, [r4, #0]
    3604:	7862      	ldrb	r2, [r4, #1]
    3606:	2000      	movs	r0, #0
    3608:	1ca3      	adds	r3, r4, #2
    360a:	47b0      	blx	r6
    360c:	462e      	mov	r6, r5
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    360e:	42b5      	cmp	r5, r6
    3610:	f107 0701 	add.w	r7, r7, #1
    3614:	d201      	bcs.n	361a <cliFunc_capSelect+0xde>
    3616:	46a9      	mov	r9, r5
    3618:	e798      	b.n	354c <cliFunc_capSelect+0x10>
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( 0, argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    361a:	b003      	add	sp, #12
    361c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3620:	000070d8 	.word	0x000070d8
    3624:	000092ee 	.word	0x000092ee
    3628:	0000725e 	.word	0x0000725e
    362c:	0000926e 	.word	0x0000926e
    3630:	000072bb 	.word	0x000072bb
    3634:	000047d5 	.word	0x000047d5
    3638:	00007272 	.word	0x00007272
    363c:	000072c1 	.word	0x000072c1

00003640 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    3640:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    3642:	4c08      	ldr	r4, [pc, #32]	; (3664 <cliFunc_layerDebug+0x24>)

	print( NL );
    3644:	4808      	ldr	r0, [pc, #32]	; (3668 <cliFunc_layerDebug+0x28>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    3646:	7823      	ldrb	r3, [r4, #0]
    3648:	fab3 f383 	clz	r3, r3
    364c:	095b      	lsrs	r3, r3, #5
    364e:	7023      	strb	r3, [r4, #0]

	print( NL );
    3650:	f002 ff68 	bl	6524 <_print>
	info_msg("Layer Debug Mode: ");
    3654:	4805      	ldr	r0, [pc, #20]	; (366c <cliFunc_layerDebug+0x2c>)
    3656:	f002 ff65 	bl	6524 <_print>
	printInt8( layerDebugMode );
    365a:	7820      	ldrb	r0, [r4, #0]
}
    365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    3660:	f002 bf8f 	b.w	6582 <printInt8>
    3664:	1fff9010 	.word	0x1fff9010
    3668:	000092ee 	.word	0x000092ee
    366c:	00007308 	.word	0x00007308

00003670 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    3670:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    3672:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3674:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    3676:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3678:	9801      	ldr	r0, [sp, #4]
    367a:	4669      	mov	r1, sp
    367c:	aa01      	add	r2, sp, #4
    367e:	f002 fc89 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3682:	9800      	ldr	r0, [sp, #0]
    3684:	7803      	ldrb	r3, [r0, #0]
    3686:	b1eb      	cbz	r3, 36c4 <cliFunc_layerState+0x54>
			break;

		switch ( c )
    3688:	b93c      	cbnz	r4, 369a <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    368a:	2b4c      	cmp	r3, #76	; 0x4c
    368c:	d11a      	bne.n	36c4 <cliFunc_layerState+0x54>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    368e:	3001      	adds	r0, #1
    3690:	f003 f85a 	bl	6748 <numToInt>
    3694:	2401      	movs	r4, #1
    3696:	b2c5      	uxtb	r5, r0
    3698:	e7ee      	b.n	3678 <cliFunc_layerState+0x8>
			break;
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    369a:	f003 f855 	bl	6748 <numToInt>
    369e:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    36a0:	4809      	ldr	r0, [pc, #36]	; (36c8 <cliFunc_layerState+0x58>)
    36a2:	f002 ff3f 	bl	6524 <_print>
			info_msg("Setting Layer L");
    36a6:	4809      	ldr	r0, [pc, #36]	; (36cc <cliFunc_layerState+0x5c>)
    36a8:	f002 ff3c 	bl	6524 <_print>
			printInt8( arg1 );
    36ac:	4628      	mov	r0, r5
    36ae:	f002 ff68 	bl	6582 <printInt8>
			print(" to - ");
    36b2:	4807      	ldr	r0, [pc, #28]	; (36d0 <cliFunc_layerState+0x60>)
    36b4:	f002 ff36 	bl	6524 <_print>
			printHex( arg2 );
    36b8:	4630      	mov	r0, r6
    36ba:	4621      	mov	r1, r4
    36bc:	f002 ffd4 	bl	6668 <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    36c0:	4b04      	ldr	r3, [pc, #16]	; (36d4 <cliFunc_layerState+0x64>)
    36c2:	555e      	strb	r6, [r3, r5]
			break;
		}
	}
}
    36c4:	b002      	add	sp, #8
    36c6:	bd70      	pop	{r4, r5, r6, pc}
    36c8:	000092ee 	.word	0x000092ee
    36cc:	0000732d 	.word	0x0000732d
    36d0:	0000734f 	.word	0x0000734f
    36d4:	1fff9df9 	.word	0x1fff9df9

000036d8 <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    36d8:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    36da:	4c08      	ldr	r4, [pc, #32]	; (36fc <cliFunc_macroDebug+0x24>)

	print( NL );
    36dc:	4808      	ldr	r0, [pc, #32]	; (3700 <cliFunc_macroDebug+0x28>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    36de:	7823      	ldrb	r3, [r4, #0]
    36e0:	fab3 f383 	clz	r3, r3
    36e4:	095b      	lsrs	r3, r3, #5
    36e6:	7023      	strb	r3, [r4, #0]

	print( NL );
    36e8:	f002 ff1c 	bl	6524 <_print>
	info_msg("Macro Debug Mode: ");
    36ec:	4805      	ldr	r0, [pc, #20]	; (3704 <cliFunc_macroDebug+0x2c>)
    36ee:	f002 ff19 	bl	6524 <_print>
	printInt8( macroDebugMode );
    36f2:	7820      	ldrb	r0, [r4, #0]
}
    36f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    36f8:	f002 bf43 	b.w	6582 <printInt8>
    36fc:	1fff9002 	.word	0x1fff9002
    3700:	000092ee 	.word	0x000092ee
    3704:	00007356 	.word	0x00007356

00003708 <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    3708:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    370a:	4c08      	ldr	r4, [pc, #32]	; (372c <cliFunc_macroProc+0x24>)

	print( NL );
    370c:	4808      	ldr	r0, [pc, #32]	; (3730 <cliFunc_macroProc+0x28>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    370e:	7823      	ldrb	r3, [r4, #0]
    3710:	fab3 f383 	clz	r3, r3
    3714:	095b      	lsrs	r3, r3, #5
    3716:	7023      	strb	r3, [r4, #0]

	print( NL );
    3718:	f002 ff04 	bl	6524 <_print>
	info_msg("Macro Processing Mode: ");
    371c:	4805      	ldr	r0, [pc, #20]	; (3734 <cliFunc_macroProc+0x2c>)
    371e:	f002 ff01 	bl	6524 <_print>
	printInt8( macroPauseMode );
    3722:	7820      	ldrb	r0, [r4, #0]
}
    3724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    3728:	f002 bf2b 	b.w	6582 <printInt8>
    372c:	1fff9003 	.word	0x1fff9003
    3730:	000092ee 	.word	0x000092ee
    3734:	0000737b 	.word	0x0000737b

00003738 <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    3738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL );
    373c:	482b      	ldr	r0, [pc, #172]	; (37ec <cliFunc_layerList+0xb4>)
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    373e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 3810 <cliFunc_layerList+0xd8>
		printHex( layer );
		print(" - ");
    3742:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 3814 <cliFunc_layerList+0xdc>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    3746:	4f2a      	ldr	r7, [pc, #168]	; (37f0 <cliFunc_layerList+0xb8>)
		printHex( LayerState[ layer ] );
    3748:	4e2a      	ldr	r6, [pc, #168]	; (37f4 <cliFunc_layerList+0xbc>)

		// First -> Last Indices
		print(" First -> Last Indices: ");
    374a:	4d2b      	ldr	r5, [pc, #172]	; (37f8 <cliFunc_layerList+0xc0>)
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
    374c:	4c2b      	ldr	r4, [pc, #172]	; (37fc <cliFunc_layerList+0xc4>)
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
	print( NL );
    374e:	f002 fee9 	bl	6524 <_print>
	info_msg("Layer List");
    3752:	482b      	ldr	r0, [pc, #172]	; (3800 <cliFunc_layerList+0xc8>)
    3754:	f002 fee6 	bl	6524 <_print>

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    3758:	4648      	mov	r0, r9
    375a:	f002 fee3 	bl	6524 <_print>
		printHex( layer );
    375e:	2101      	movs	r1, #1
    3760:	2000      	movs	r0, #0
    3762:	f002 ff81 	bl	6668 <printHex_op>
		print(" - ");
    3766:	4640      	mov	r0, r8
    3768:	f002 fedc 	bl	6524 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    376c:	4825      	ldr	r0, [pc, #148]	; (3804 <cliFunc_layerList+0xcc>)
    376e:	f001 fa33 	bl	4bd8 <Output_putstr>

		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");
    3772:	4825      	ldr	r0, [pc, #148]	; (3808 <cliFunc_layerList+0xd0>)
    3774:	f002 fed6 	bl	6524 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    3778:	4638      	mov	r0, r7
    377a:	f002 fed3 	bl	6524 <_print>
		printHex( LayerState[ layer ] );
    377e:	7830      	ldrb	r0, [r6, #0]
    3780:	2101      	movs	r1, #1
    3782:	f002 ff71 	bl	6668 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    3786:	4628      	mov	r0, r5
    3788:	f002 fecc 	bl	6524 <_print>
		printHex( LayerIndex[ layer ].first );
    378c:	2101      	movs	r1, #1
    378e:	2000      	movs	r0, #0
    3790:	f002 ff6a 	bl	6668 <printHex_op>
		print(" -> ");
    3794:	4620      	mov	r0, r4
    3796:	f002 fec5 	bl	6524 <_print>
		printHex( LayerIndex[ layer ].last );
    379a:	2101      	movs	r1, #1
    379c:	2046      	movs	r0, #70	; 0x46
    379e:	f002 ff63 	bl	6668 <printHex_op>
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    37a2:	4648      	mov	r0, r9
    37a4:	f002 febe 	bl	6524 <_print>
		printHex( layer );
    37a8:	2001      	movs	r0, #1
    37aa:	4601      	mov	r1, r0
    37ac:	f002 ff5c 	bl	6668 <printHex_op>
		print(" - ");
    37b0:	4640      	mov	r0, r8
    37b2:	f002 feb7 	bl	6524 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    37b6:	4815      	ldr	r0, [pc, #84]	; (380c <cliFunc_layerList+0xd4>)
    37b8:	f001 fa0e 	bl	4bd8 <Output_putstr>
		// Default map
		if ( layer == 0 )
			print(" \033[1m(default)\033[0m");

		// Layer State
		print( NL "\t\t Layer State: " );
    37bc:	4638      	mov	r0, r7
    37be:	f002 feb1 	bl	6524 <_print>
		printHex( LayerState[ layer ] );
    37c2:	7870      	ldrb	r0, [r6, #1]
    37c4:	2101      	movs	r1, #1
    37c6:	f002 ff4f 	bl	6668 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    37ca:	4628      	mov	r0, r5
    37cc:	f002 feaa 	bl	6524 <_print>
		printHex( LayerIndex[ layer ].first );
    37d0:	2101      	movs	r1, #1
    37d2:	2000      	movs	r0, #0
    37d4:	f002 ff48 	bl	6668 <printHex_op>
		print(" -> ");
    37d8:	4620      	mov	r0, r4
    37da:	f002 fea3 	bl	6524 <_print>
		printHex( LayerIndex[ layer ].last );
    37de:	2046      	movs	r0, #70	; 0x46
    37e0:	2101      	movs	r1, #1
	}
}
    37e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

		// First -> Last Indices
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
    37e6:	f002 bf3f 	b.w	6668 <printHex_op>
    37ea:	bf00      	nop
    37ec:	000092ee 	.word	0x000092ee
    37f0:	000073ee 	.word	0x000073ee
    37f4:	1fff9df9 	.word	0x1fff9df9
    37f8:	00007401 	.word	0x00007401
    37fc:	0000741a 	.word	0x0000741a
    3800:	000073a5 	.word	0x000073a5
    3804:	000073c2 	.word	0x000073c2
    3808:	000073db 	.word	0x000073db
    380c:	0000741f 	.word	0x0000741f
    3810:	0000725a 	.word	0x0000725a
    3814:	0000926e 	.word	0x0000926e

00003818 <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    3818:	b538      	push	{r3, r4, r5, lr}
	// Show pending key events
	print( NL );
    381a:	4847      	ldr	r0, [pc, #284]	; (3938 <cliFunc_macroList+0x120>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    381c:	4c47      	ldr	r4, [pc, #284]	; (393c <cliFunc_macroList+0x124>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    381e:	f002 fe81 	bl	6524 <_print>
	info_msg("Pending Key Events: ");
    3822:	4847      	ldr	r0, [pc, #284]	; (3940 <cliFunc_macroList+0x128>)
    3824:	f002 fe7e 	bl	6524 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    3828:	7820      	ldrb	r0, [r4, #0]
    382a:	f002 fec8 	bl	65be <printInt16>
	print(" : ");
    382e:	4845      	ldr	r0, [pc, #276]	; (3944 <cliFunc_macroList+0x12c>)
    3830:	f002 fe78 	bl	6524 <_print>
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    3834:	2300      	movs	r3, #0
    3836:	7822      	ldrb	r2, [r4, #0]
    3838:	1c5d      	adds	r5, r3, #1
    383a:	b2db      	uxtb	r3, r3
    383c:	429a      	cmp	r2, r3
    383e:	d90c      	bls.n	385a <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    3840:	4a41      	ldr	r2, [pc, #260]	; (3948 <cliFunc_macroList+0x130>)
    3842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3846:	4413      	add	r3, r2
    3848:	2101      	movs	r1, #1
    384a:	7898      	ldrb	r0, [r3, #2]
    384c:	f002 ff0c 	bl	6668 <printHex_op>
		print(" ");
    3850:	483e      	ldr	r0, [pc, #248]	; (394c <cliFunc_macroList+0x134>)
    3852:	f002 fe67 	bl	6524 <_print>
    3856:	462b      	mov	r3, r5
    3858:	e7ed      	b.n	3836 <cliFunc_macroList+0x1e>
	}

	// Show pending trigger macros
	print( NL );
    385a:	4837      	ldr	r0, [pc, #220]	; (3938 <cliFunc_macroList+0x120>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    385c:	4c3c      	ldr	r4, [pc, #240]	; (3950 <cliFunc_macroList+0x138>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    385e:	f002 fe61 	bl	6524 <_print>
	info_msg("Pending Trigger Macros: ");
    3862:	483c      	ldr	r0, [pc, #240]	; (3954 <cliFunc_macroList+0x13c>)
    3864:	f002 fe5e 	bl	6524 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    3868:	8820      	ldrh	r0, [r4, #0]
    386a:	f002 fea8 	bl	65be <printInt16>
	print(" : ");
    386e:	4835      	ldr	r0, [pc, #212]	; (3944 <cliFunc_macroList+0x12c>)
    3870:	f002 fe58 	bl	6524 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    3874:	2300      	movs	r3, #0
    3876:	8822      	ldrh	r2, [r4, #0]
    3878:	1c5d      	adds	r5, r3, #1
    387a:	b2db      	uxtb	r3, r3
    387c:	4293      	cmp	r3, r2
    387e:	d20a      	bcs.n	3896 <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    3880:	4a35      	ldr	r2, [pc, #212]	; (3958 <cliFunc_macroList+0x140>)
    3882:	2101      	movs	r1, #1
    3884:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    3888:	f002 feee 	bl	6668 <printHex_op>
		print(" ");
    388c:	482f      	ldr	r0, [pc, #188]	; (394c <cliFunc_macroList+0x134>)
    388e:	f002 fe49 	bl	6524 <_print>
    3892:	462b      	mov	r3, r5
    3894:	e7ef      	b.n	3876 <cliFunc_macroList+0x5e>
	}

	// Show pending result macros
	print( NL );
    3896:	4828      	ldr	r0, [pc, #160]	; (3938 <cliFunc_macroList+0x120>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingList.size );
    3898:	4c30      	ldr	r4, [pc, #192]	; (395c <cliFunc_macroList+0x144>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    389a:	f002 fe43 	bl	6524 <_print>
	info_msg("Pending Result Macros: ");
    389e:	4830      	ldr	r0, [pc, #192]	; (3960 <cliFunc_macroList+0x148>)
    38a0:	f002 fe40 	bl	6524 <_print>
	printInt16( (uint16_t)macroResultMacroPendingList.size );
    38a4:	f8b4 0318 	ldrh.w	r0, [r4, #792]	; 0x318
    38a8:	f002 fe89 	bl	65be <printInt16>
	print(" : ");
    38ac:	4825      	ldr	r0, [pc, #148]	; (3944 <cliFunc_macroList+0x12c>)
    38ae:	f002 fe39 	bl	6524 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    38b2:	2300      	movs	r3, #0
    38b4:	f8b4 2318 	ldrh.w	r2, [r4, #792]	; 0x318
    38b8:	1c5d      	adds	r5, r3, #1
    38ba:	b2db      	uxtb	r3, r3
    38bc:	4293      	cmp	r3, r2
    38be:	d20b      	bcs.n	38d8 <cliFunc_macroList+0xc0>
	{
		printHex( macroResultMacroPendingList.data[ macro ].index );
    38c0:	4a26      	ldr	r2, [pc, #152]	; (395c <cliFunc_macroList+0x144>)
    38c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    38c6:	2101      	movs	r1, #1
    38c8:	8898      	ldrh	r0, [r3, #4]
    38ca:	f002 fecd 	bl	6668 <printHex_op>
		print(" ");
    38ce:	481f      	ldr	r0, [pc, #124]	; (394c <cliFunc_macroList+0x134>)
    38d0:	f002 fe28 	bl	6524 <_print>
    38d4:	462b      	mov	r3, r5
    38d6:	e7ed      	b.n	38b4 <cliFunc_macroList+0x9c>
	}

	// Show available trigger macro indices
	print( NL );
    38d8:	4817      	ldr	r0, [pc, #92]	; (3938 <cliFunc_macroList+0x120>)
    38da:	f002 fe23 	bl	6524 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    38de:	4821      	ldr	r0, [pc, #132]	; (3964 <cliFunc_macroList+0x14c>)
    38e0:	f002 fe20 	bl	6524 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    38e4:	206c      	movs	r0, #108	; 0x6c
    38e6:	f002 fe6a 	bl	65be <printInt16>

	// Show available result macro indices
	print( NL );
    38ea:	4813      	ldr	r0, [pc, #76]	; (3938 <cliFunc_macroList+0x120>)
    38ec:	f002 fe1a 	bl	6524 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    38f0:	481d      	ldr	r0, [pc, #116]	; (3968 <cliFunc_macroList+0x150>)
    38f2:	f002 fe17 	bl	6524 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    38f6:	2062      	movs	r0, #98	; 0x62
    38f8:	f002 fe61 	bl	65be <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    38fc:	480e      	ldr	r0, [pc, #56]	; (3938 <cliFunc_macroList+0x120>)
    38fe:	f002 fe11 	bl	6524 <_print>
	info_msg("Trigger : Result Macro Pairs");
    3902:	481a      	ldr	r0, [pc, #104]	; (396c <cliFunc_macroList+0x154>)
    3904:	f002 fe0e 	bl	6524 <_print>
    3908:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    390a:	480b      	ldr	r0, [pc, #44]	; (3938 <cliFunc_macroList+0x120>)
    390c:	f002 fe0a 	bl	6524 <_print>
		print("\tT");
    3910:	4817      	ldr	r0, [pc, #92]	; (3970 <cliFunc_macroList+0x158>)
    3912:	f002 fe07 	bl	6524 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    3916:	b2a0      	uxth	r0, r4
    3918:	f002 fe51 	bl	65be <printInt16>
		print(" : R");
    391c:	4815      	ldr	r0, [pc, #84]	; (3974 <cliFunc_macroList+0x15c>)
    391e:	f002 fe01 	bl	6524 <_print>
    3922:	4b15      	ldr	r3, [pc, #84]	; (3978 <cliFunc_macroList+0x160>)
    3924:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    3928:	3401      	adds	r4, #1
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    392a:	7918      	ldrb	r0, [r3, #4]
    392c:	f002 fe47 	bl	65be <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    3930:	2c6d      	cmp	r4, #109	; 0x6d
    3932:	d1ea      	bne.n	390a <cliFunc_macroList+0xf2>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    3934:	bd38      	pop	{r3, r4, r5, pc}
    3936:	bf00      	nop
    3938:	000092ee 	.word	0x000092ee
    393c:	1fff9006 	.word	0x1fff9006
    3940:	00007438 	.word	0x00007438
    3944:	0000745f 	.word	0x0000745f
    3948:	1fff9bfe 	.word	0x1fff9bfe
    394c:	00006ee2 	.word	0x00006ee2
    3950:	1fff9012 	.word	0x1fff9012
    3954:	00007463 	.word	0x00007463
    3958:	1fff9014 	.word	0x1fff9014
    395c:	1fff9f1c 	.word	0x1fff9f1c
    3960:	0000748e 	.word	0x0000748e
    3964:	000074b8 	.word	0x000074b8
    3968:	000074e8 	.word	0x000074e8
    396c:	00007518 	.word	0x00007518
    3970:	00007547 	.word	0x00007547
    3974:	0000754a 	.word	0x0000754a
    3978:	0000818c 	.word	0x0000818c

0000397c <Macro_layerState.part.0>:


// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
    397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    397e:	4d2a      	ldr	r5, [pc, #168]	; (3a28 <Macro_layerState.part.0+0xac>)
    3980:	882f      	ldrh	r7, [r5, #0]
    3982:	2200      	movs	r2, #0
    3984:	b293      	uxth	r3, r2
    3986:	42bb      	cmp	r3, r7
    3988:	d209      	bcs.n	399e <Macro_layerState.part.0+0x22>
    398a:	4c28      	ldr	r4, [pc, #160]	; (3a2c <Macro_layerState.part.0+0xb0>)
    398c:	3201      	adds	r2, #1
    398e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    3992:	f834 4c02 	ldrh.w	r4, [r4, #-2]
    3996:	4284      	cmp	r4, r0
    3998:	d1f4      	bne.n	3984 <Macro_layerState.part.0+0x8>
		{
			inLayerIndexStack = 1;
    399a:	2601      	movs	r6, #1
    399c:	e000      	b.n	39a0 <Macro_layerState.part.0+0x24>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    399e:	2600      	movs	r6, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    39a0:	4c23      	ldr	r4, [pc, #140]	; (3a30 <Macro_layerState.part.0+0xb4>)
    39a2:	5c22      	ldrb	r2, [r4, r0]
    39a4:	420a      	tst	r2, r1
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    39a6:	bf14      	ite	ne
    39a8:	ea22 0101 	bicne.w	r1, r2, r1
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    39ac:	4311      	orreq	r1, r2
    39ae:	5421      	strb	r1, [r4, r0]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    39b0:	b926      	cbnz	r6, 39bc <Macro_layerState.part.0+0x40>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    39b2:	1c7a      	adds	r2, r7, #1
    39b4:	802a      	strh	r2, [r5, #0]
    39b6:	4a1d      	ldr	r2, [pc, #116]	; (3a2c <Macro_layerState.part.0+0xb0>)
    39b8:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    39bc:	5c22      	ldrb	r2, [r4, r0]
    39be:	b96a      	cbnz	r2, 39dc <Macro_layerState.part.0+0x60>
    39c0:	b166      	cbz	r6, 39dc <Macro_layerState.part.0+0x60>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    39c2:	882a      	ldrh	r2, [r5, #0]
    39c4:	4293      	cmp	r3, r2
    39c6:	d207      	bcs.n	39d8 <Macro_layerState.part.0+0x5c>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    39c8:	4818      	ldr	r0, [pc, #96]	; (3a2c <Macro_layerState.part.0+0xb0>)
    39ca:	1c59      	adds	r1, r3, #1
    39cc:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
    39d0:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
			stackItem++;
    39d4:	b28b      	uxth	r3, r1
    39d6:	e7f5      	b.n	39c4 <Macro_layerState.part.0+0x48>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    39d8:	3a01      	subs	r2, #1
    39da:	802a      	strh	r2, [r5, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    39dc:	4b15      	ldr	r3, [pc, #84]	; (3a34 <Macro_layerState.part.0+0xb8>)
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	b303      	cbz	r3, 3a24 <Macro_layerState.part.0+0xa8>
	{
		dbug_msg("Layer ");
    39e2:	4815      	ldr	r0, [pc, #84]	; (3a38 <Macro_layerState.part.0+0xbc>)
    39e4:	f002 fd9e 	bl	6524 <_print>

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    39e8:	7820      	ldrb	r0, [r4, #0]
    39ea:	2100      	movs	r1, #0
    39ec:	f002 fe3c 	bl	6668 <printHex_op>
    39f0:	7860      	ldrb	r0, [r4, #1]
    39f2:	2100      	movs	r1, #0
    39f4:	f002 fe38 	bl	6668 <printHex_op>
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    39f8:	4810      	ldr	r0, [pc, #64]	; (3a3c <Macro_layerState.part.0+0xc0>)
    39fa:	f002 fd93 	bl	6524 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    39fe:	882c      	ldrh	r4, [r5, #0]
    3a00:	b15c      	cbz	r4, 3a1a <Macro_layerState.part.0+0x9e>
		{
			print(":");
    3a02:	480f      	ldr	r0, [pc, #60]	; (3a40 <Macro_layerState.part.0+0xc4>)
    3a04:	f002 fd8e 	bl	6524 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    3a08:	3c01      	subs	r4, #1
    3a0a:	4b08      	ldr	r3, [pc, #32]	; (3a2c <Macro_layerState.part.0+0xb0>)
    3a0c:	2100      	movs	r1, #0
    3a0e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    3a12:	f002 fe29 	bl	6668 <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    3a16:	b2a4      	uxth	r4, r4
    3a18:	e7f2      	b.n	3a00 <Macro_layerState.part.0+0x84>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    3a1a:	480a      	ldr	r0, [pc, #40]	; (3a44 <Macro_layerState.part.0+0xc8>)
	}
}
    3a1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    3a20:	f002 bd80 	b.w	6524 <_print>
    3a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a26:	bf00      	nop
    3a28:	1fff9008 	.word	0x1fff9008
    3a2c:	1fff900a 	.word	0x1fff900a
    3a30:	1fff9df9 	.word	0x1fff9df9
    3a34:	1fff9010 	.word	0x1fff9010
    3a38:	0000754f 	.word	0x0000754f
    3a3c:	00007569 	.word	0x00007569
    3a40:	00006f77 	.word	0x00006f77
    3a44:	000092ee 	.word	0x000092ee

00003a48 <Macro_layerState_capability>:
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a48:	2aff      	cmp	r2, #255	; 0xff
    3a4a:	d104      	bne.n	3a56 <Macro_layerState_capability+0xe>
    3a4c:	29ff      	cmp	r1, #255	; 0xff
    3a4e:	d105      	bne.n	3a5c <Macro_layerState_capability+0x14>
	{
		print("Macro_layerState(layerIndex,layerState)");
    3a50:	4806      	ldr	r0, [pc, #24]	; (3a6c <Macro_layerState_capability+0x24>)
    3a52:	f002 bd67 	b.w	6524 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    3a56:	b90a      	cbnz	r2, 3a5c <Macro_layerState_capability+0x14>
    3a58:	2902      	cmp	r1, #2
    3a5a:	d005      	beq.n	3a68 <Macro_layerState_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3a5c:	8818      	ldrh	r0, [r3, #0]
	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];
    3a5e:	7899      	ldrb	r1, [r3, #2]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3a60:	2801      	cmp	r0, #1
    3a62:	d101      	bne.n	3a68 <Macro_layerState_capability+0x20>
    3a64:	f7ff bf8a 	b.w	397c <Macro_layerState.part.0>
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	0000756c 	.word	0x0000756c

00003a70 <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a70:	2aff      	cmp	r2, #255	; 0xff
    3a72:	d104      	bne.n	3a7e <Macro_layerShift_capability+0xe>
    3a74:	29ff      	cmp	r1, #255	; 0xff
    3a76:	d106      	bne.n	3a86 <Macro_layerShift_capability+0x16>
	{
		print("Macro_layerShift(layerIndex)");
    3a78:	480a      	ldr	r0, [pc, #40]	; (3aa4 <Macro_layerShift_capability+0x34>)
    3a7a:	f002 bd53 	b.w	6524 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    3a7e:	b912      	cbnz	r2, 3a86 <Macro_layerShift_capability+0x16>
    3a80:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    3a84:	d00d      	beq.n	3aa2 <Macro_layerShift_capability+0x32>
		return;

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);
    3a86:	8818      	ldrh	r0, [r3, #0]

	// Only set the layer if it is disabled
	if ( LayerState[ layer ] != 0x00 && state == 0x01 )
    3a88:	4b07      	ldr	r3, [pc, #28]	; (3aa8 <Macro_layerShift_capability+0x38>)
    3a8a:	5c1b      	ldrb	r3, [r3, r0]
    3a8c:	b113      	cbz	r3, 3a94 <Macro_layerShift_capability+0x24>
    3a8e:	2901      	cmp	r1, #1
    3a90:	d102      	bne.n	3a98 <Macro_layerShift_capability+0x28>
    3a92:	4770      	bx	lr
		return;

	// Only unset the layer if it is enabled
	if ( LayerState[ layer ] == 0x00 && state == 0x03 )
    3a94:	2903      	cmp	r1, #3
    3a96:	d004      	beq.n	3aa2 <Macro_layerShift_capability+0x32>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3a98:	2801      	cmp	r0, #1
    3a9a:	d102      	bne.n	3aa2 <Macro_layerShift_capability+0x32>
    3a9c:	4601      	mov	r1, r0
    3a9e:	f7ff bf6d 	b.w	397c <Macro_layerState.part.0>
    3aa2:	4770      	bx	lr
    3aa4:	00007594 	.word	0x00007594
    3aa8:	1fff9df9 	.word	0x1fff9df9

00003aac <Macro_layerLatch_capability>:
// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3aac:	2aff      	cmp	r2, #255	; 0xff
    3aae:	d104      	bne.n	3aba <Macro_layerLatch_capability+0xe>
    3ab0:	29ff      	cmp	r1, #255	; 0xff
    3ab2:	d105      	bne.n	3ac0 <Macro_layerLatch_capability+0x14>
	{
		print("Macro_layerLatch(layerIndex)");
    3ab4:	4806      	ldr	r0, [pc, #24]	; (3ad0 <Macro_layerLatch_capability+0x24>)
    3ab6:	f002 bd35 	b.w	6524 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    3aba:	b90a      	cbnz	r2, 3ac0 <Macro_layerLatch_capability+0x14>
    3abc:	2903      	cmp	r1, #3
    3abe:	d105      	bne.n	3acc <Macro_layerLatch_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3ac0:	8818      	ldrh	r0, [r3, #0]
    3ac2:	2801      	cmp	r0, #1
    3ac4:	d102      	bne.n	3acc <Macro_layerLatch_capability+0x20>
    3ac6:	2102      	movs	r1, #2
    3ac8:	f7ff bf58 	b.w	397c <Macro_layerState.part.0>
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop
    3ad0:	000075b1 	.word	0x000075b1

00003ad4 <Macro_layerLock_capability>:
// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3ad4:	2aff      	cmp	r2, #255	; 0xff
    3ad6:	d104      	bne.n	3ae2 <Macro_layerLock_capability+0xe>
    3ad8:	29ff      	cmp	r1, #255	; 0xff
    3ada:	d105      	bne.n	3ae8 <Macro_layerLock_capability+0x14>
	{
		print("Macro_layerLock(layerIndex)");
    3adc:	4806      	ldr	r0, [pc, #24]	; (3af8 <Macro_layerLock_capability+0x24>)
    3ade:	f002 bd21 	b.w	6524 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    3ae2:	b90a      	cbnz	r2, 3ae8 <Macro_layerLock_capability+0x14>
    3ae4:	2901      	cmp	r1, #1
    3ae6:	d105      	bne.n	3af4 <Macro_layerLock_capability+0x20>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3ae8:	8818      	ldrh	r0, [r3, #0]
    3aea:	2801      	cmp	r0, #1
    3aec:	d102      	bne.n	3af4 <Macro_layerLock_capability+0x20>
    3aee:	2104      	movs	r1, #4
    3af0:	f7ff bf44 	b.w	397c <Macro_layerState.part.0>
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop
    3af8:	000075ce 	.word	0x000075ce

00003afc <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3afc:	2aff      	cmp	r2, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    3afe:	b538      	push	{r3, r4, r5, lr}
    3b00:	461d      	mov	r5, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3b02:	d106      	bne.n	3b12 <Macro_layerRotate_capability+0x16>
    3b04:	29ff      	cmp	r1, #255	; 0xff
    3b06:	d107      	bne.n	3b18 <Macro_layerRotate_capability+0x1c>
	{
		print("Macro_layerRotate(previous)");
    3b08:	4813      	ldr	r0, [pc, #76]	; (3b58 <Macro_layerRotate_capability+0x5c>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    3b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    3b0e:	f002 bd09 	b.w	6524 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    3b12:	b90a      	cbnz	r2, 3b18 <Macro_layerRotate_capability+0x1c>
    3b14:	2901      	cmp	r1, #1
    3b16:	d11e      	bne.n	3b56 <Macro_layerRotate_capability+0x5a>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    3b18:	4c10      	ldr	r4, [pc, #64]	; (3b5c <Macro_layerRotate_capability+0x60>)

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3b1a:	8820      	ldrh	r0, [r4, #0]
    3b1c:	2801      	cmp	r0, #1
    3b1e:	d102      	bne.n	3b26 <Macro_layerRotate_capability+0x2a>
    3b20:	2104      	movs	r1, #4
    3b22:	f7ff ff2b 	bl	397c <Macro_layerState.part.0>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    3b26:	7829      	ldrb	r1, [r5, #0]
	{
		Macro_rotationLayer++;
    3b28:	4a0c      	ldr	r2, [pc, #48]	; (3b5c <Macro_layerRotate_capability+0x60>)
    3b2a:	8823      	ldrh	r3, [r4, #0]

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    3b2c:	b929      	cbnz	r1, 3b3a <Macro_layerRotate_capability+0x3e>
	{
		Macro_rotationLayer++;
    3b2e:	3301      	adds	r3, #1
    3b30:	b29b      	uxth	r3, r3

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    3b32:	2b01      	cmp	r3, #1
    3b34:	d906      	bls.n	3b44 <Macro_layerRotate_capability+0x48>
			Macro_rotationLayer = 0;
    3b36:	8011      	strh	r1, [r2, #0]
    3b38:	e005      	b.n	3b46 <Macro_layerRotate_capability+0x4a>
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    3b3a:	3b01      	subs	r3, #1
    3b3c:	b29b      	uxth	r3, r3

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    3b3e:	2b01      	cmp	r3, #1
			Macro_rotationLayer = LayerNum - 1;
    3b40:	bf88      	it	hi
    3b42:	2301      	movhi	r3, #1
    3b44:	8013      	strh	r3, [r2, #0]

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3b46:	8820      	ldrh	r0, [r4, #0]
    3b48:	2801      	cmp	r0, #1
    3b4a:	d104      	bne.n	3b56 <Macro_layerRotate_capability+0x5a>
    3b4c:	2104      	movs	r1, #4
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    3b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3b52:	f7ff bf13 	b.w	397c <Macro_layerState.part.0>
    3b56:	bd38      	pop	{r3, r4, r5, pc}
    3b58:	000075ea 	.word	0x000075ea
    3b5c:	1fff9bfc 	.word	0x1fff9bfc

00003b60 <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    3b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    3b64:	7803      	ldrb	r3, [r0, #0]

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
	uint8_t scanCode = guide->scanCode;
    3b66:	7884      	ldrb	r4, [r0, #2]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    3b68:	460f      	mov	r7, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    3b6a:	b9cb      	cbnz	r3, 3ba0 <Macro_layerLookup+0x40>
    3b6c:	7843      	ldrb	r3, [r0, #1]
    3b6e:	2b01      	cmp	r3, #1
    3b70:	d016      	beq.n	3ba0 <Macro_layerLookup+0x40>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    3b72:	4b3a      	ldr	r3, [pc, #232]	; (3c5c <Macro_layerLookup+0xfc>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    3b74:	493a      	ldr	r1, [pc, #232]	; (3c60 <Macro_layerLookup+0x100>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    3b76:	5d18      	ldrb	r0, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    3b78:	230c      	movs	r3, #12
    3b7a:	4343      	muls	r3, r0
    3b7c:	18ca      	adds	r2, r1, r3
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    3b7e:	58cb      	ldr	r3, [r1, r3]
    3b80:	7a12      	ldrb	r2, [r2, #8]
    3b82:	1aa4      	subs	r4, r4, r2
    3b84:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    3b88:	4b36      	ldr	r3, [pc, #216]	; (3c64 <Macro_layerLookup+0x104>)
    3b8a:	5c1b      	ldrb	r3, [r3, r0]
		if ( latch && latch_expire )
    3b8c:	079b      	lsls	r3, r3, #30
    3b8e:	d561      	bpl.n	3c54 <Macro_layerLookup+0xf4>
    3b90:	2f00      	cmp	r7, #0
    3b92:	d05f      	beq.n	3c54 <Macro_layerLookup+0xf4>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3b94:	2801      	cmp	r0, #1
    3b96:	d15d      	bne.n	3c54 <Macro_layerLookup+0xf4>
    3b98:	2102      	movs	r1, #2
    3b9a:	f7ff feef 	bl	397c <Macro_layerState.part.0>
    3b9e:	e059      	b.n	3c54 <Macro_layerLookup+0xf4>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    3ba0:	4b31      	ldr	r3, [pc, #196]	; (3c68 <Macro_layerLookup+0x108>)
    3ba2:	881d      	ldrh	r5, [r3, #0]
    3ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3ba8:	429d      	cmp	r5, r3
    3baa:	d03a      	beq.n	3c22 <Macro_layerLookup+0xc2>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    3bac:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3c78 <Macro_layerLookup+0x118>

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    3bb0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3c64 <Macro_layerLookup+0x104>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    3bb4:	f839 6015 	ldrh.w	r6, [r9, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    3bb8:	f818 3006 	ldrb.w	r3, [r8, r6]
    3bbc:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    3bc0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    3bc4:	b133      	cbz	r3, 3bd4 <Macro_layerLookup+0x74>
    3bc6:	b12f      	cbz	r7, 3bd4 <Macro_layerLookup+0x74>

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3bc8:	2e01      	cmp	r6, #1
    3bca:	d103      	bne.n	3bd4 <Macro_layerLookup+0x74>
    3bcc:	4630      	mov	r0, r6
    3bce:	2102      	movs	r1, #2
    3bd0:	f7ff fed4 	bl	397c <Macro_layerState.part.0>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    3bd4:	f839 1015 	ldrh.w	r1, [r9, r5, lsl #1]
    3bd8:	f818 3001 	ldrb.w	r3, [r8, r1]
    3bdc:	f003 0201 	and.w	r2, r3, #1
    3be0:	ea82 025a 	eor.w	r2, r2, sl, lsr #1
    3be4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3be8:	429a      	cmp	r2, r3
    3bea:	d017      	beq.n	3c1c <Macro_layerLookup+0xbc>
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    3bec:	200c      	movs	r0, #12
    3bee:	4a1c      	ldr	r2, [pc, #112]	; (3c60 <Macro_layerLookup+0x100>)
    3bf0:	4370      	muls	r0, r6
    3bf2:	1813      	adds	r3, r2, r0
    3bf4:	5812      	ldr	r2, [r2, r0]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    3bf6:	b18a      	cbz	r2, 3c1c <Macro_layerLookup+0xbc>
				&& scanCode <= layer->last
    3bf8:	7a58      	ldrb	r0, [r3, #9]
    3bfa:	42a0      	cmp	r0, r4
    3bfc:	d30e      	bcc.n	3c1c <Macro_layerLookup+0xbc>
				&& scanCode >= layer->first
    3bfe:	7a1b      	ldrb	r3, [r3, #8]
    3c00:	429c      	cmp	r4, r3
    3c02:	d30b      	bcc.n	3c1c <Macro_layerLookup+0xbc>
				&& *map[ scanCode - layer->first ] != 0 )
    3c04:	1ae3      	subs	r3, r4, r3
    3c06:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    3c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	b123      	cbz	r3, 3c1c <Macro_layerLookup+0xbc>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    3c12:	4b12      	ldr	r3, [pc, #72]	; (3c5c <Macro_layerLookup+0xfc>)
    3c14:	5519      	strb	r1, [r3, r4]

				return map[ scanCode - layer->first ];
    3c16:	6800      	ldr	r0, [r0, #0]
    3c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    3c1c:	3d01      	subs	r5, #1
    3c1e:	b2ad      	uxth	r5, r5
    3c20:	e7c0      	b.n	3ba4 <Macro_layerLookup+0x44>
	// Lookup default layer
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
    3c22:	2c46      	cmp	r4, #70	; 0x46
    3c24:	d809      	bhi.n	3c3a <Macro_layerLookup+0xda>
		&& scanCode >= layer->first
		&& *map[ scanCode - layer->first ] != 0 )
    3c26:	4b11      	ldr	r3, [pc, #68]	; (3c6c <Macro_layerLookup+0x10c>)
    3c28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3c2c:	6803      	ldr	r3, [r0, #0]
    3c2e:	b123      	cbz	r3, 3c3a <Macro_layerLookup+0xda>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    3c30:	4b0a      	ldr	r3, [pc, #40]	; (3c5c <Macro_layerLookup+0xfc>)
    3c32:	2200      	movs	r2, #0
    3c34:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    3c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    3c3a:	480d      	ldr	r0, [pc, #52]	; (3c70 <Macro_layerLookup+0x110>)
    3c3c:	f002 fc72 	bl	6524 <_print>
	printHex( scanCode );
    3c40:	4620      	mov	r0, r4
    3c42:	2101      	movs	r1, #1
    3c44:	f002 fd10 	bl	6668 <printHex_op>
	print( NL );
    3c48:	480a      	ldr	r0, [pc, #40]	; (3c74 <Macro_layerLookup+0x114>)
    3c4a:	f002 fc6b 	bl	6524 <_print>
	return 0;
    3c4e:	2000      	movs	r0, #0
    3c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			);
			LCD_layerStack_capability( 0, 0, 0, 0 );
#endif
		}

		return trigger_list;
    3c54:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    3c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c5a:	bf00      	nop
    3c5c:	1fff9dfb 	.word	0x1fff9dfb
    3c60:	00008070 	.word	0x00008070
    3c64:	1fff9df9 	.word	0x1fff9df9
    3c68:	1fff9008 	.word	0x1fff9008
    3c6c:	1fff8a0c 	.word	0x1fff8a0c
    3c70:	00007606 	.word	0x00007606
    3c74:	000092ee 	.word	0x000092ee
    3c78:	1fff900a 	.word	0x1fff900a

00003c7c <Macro_keyState>:
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    3c7c:	1e4b      	subs	r3, r1, #1
    3c7e:	2b02      	cmp	r3, #2
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    3c80:	b570      	push	{r4, r5, r6, lr}
    3c82:	4604      	mov	r4, r0
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    3c84:	d819      	bhi.n	3cba <Macro_keyState+0x3e>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    3c86:	2846      	cmp	r0, #70	; 0x46
    3c88:	d90b      	bls.n	3ca2 <Macro_keyState+0x26>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    3c8a:	480c      	ldr	r0, [pc, #48]	; (3cbc <Macro_keyState+0x40>)
    3c8c:	f002 fc4a 	bl	6524 <_print>
			printHex( scanCode );
    3c90:	4620      	mov	r0, r4
    3c92:	2101      	movs	r1, #1
    3c94:	f002 fce8 	bl	6668 <printHex_op>
			print( NL );
    3c98:	4809      	ldr	r0, [pc, #36]	; (3cc0 <Macro_keyState+0x44>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    3c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    3c9e:	f002 bc41 	b.w	6524 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    3ca2:	4a08      	ldr	r2, [pc, #32]	; (3cc4 <Macro_keyState+0x48>)
    3ca4:	4d08      	ldr	r5, [pc, #32]	; (3cc8 <Macro_keyState+0x4c>)
    3ca6:	7813      	ldrb	r3, [r2, #0]
    3ca8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    3cac:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    3cae:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    3cb0:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    3cb2:	2100      	movs	r1, #0
    3cb4:	5429      	strb	r1, [r5, r0]
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    3cb6:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    3cb8:	7013      	strb	r3, [r2, #0]
    3cba:	bd70      	pop	{r4, r5, r6, pc}
    3cbc:	00007644 	.word	0x00007644
    3cc0:	000092ee 	.word	0x000092ee
    3cc4:	1fff9006 	.word	0x1fff9006
    3cc8:	1fff9bfe 	.word	0x1fff9bfe

00003ccc <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    3ccc:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3cce:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3cd0:	9801      	ldr	r0, [sp, #4]
    3cd2:	4669      	mov	r1, sp
    3cd4:	aa01      	add	r2, sp, #4
    3cd6:	f002 f95d 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3cda:	9800      	ldr	r0, [sp, #0]
    3cdc:	7803      	ldrb	r3, [r0, #0]
    3cde:	b14b      	cbz	r3, 3cf4 <cliFunc_keyHold+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3ce0:	2b53      	cmp	r3, #83	; 0x53
    3ce2:	d1f5      	bne.n	3cd0 <cliFunc_keyHold+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    3ce4:	3001      	adds	r0, #1
    3ce6:	f002 fd2f 	bl	6748 <numToInt>
    3cea:	2102      	movs	r1, #2
    3cec:	b2c0      	uxtb	r0, r0
    3cee:	f7ff ffc5 	bl	3c7c <Macro_keyState>
			break;
    3cf2:	e7ed      	b.n	3cd0 <cliFunc_keyHold+0x4>
		}
	}
}
    3cf4:	b003      	add	sp, #12
    3cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00003cfa <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    3cfa:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3cfc:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3cfe:	9801      	ldr	r0, [sp, #4]
    3d00:	4669      	mov	r1, sp
    3d02:	aa01      	add	r2, sp, #4
    3d04:	f002 f946 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3d08:	9800      	ldr	r0, [sp, #0]
    3d0a:	7803      	ldrb	r3, [r0, #0]
    3d0c:	b14b      	cbz	r3, 3d22 <cliFunc_keyPress+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3d0e:	2b53      	cmp	r3, #83	; 0x53
    3d10:	d1f5      	bne.n	3cfe <cliFunc_keyPress+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    3d12:	3001      	adds	r0, #1
    3d14:	f002 fd18 	bl	6748 <numToInt>
    3d18:	2101      	movs	r1, #1
    3d1a:	b2c0      	uxtb	r0, r0
    3d1c:	f7ff ffae 	bl	3c7c <Macro_keyState>
			break;
    3d20:	e7ed      	b.n	3cfe <cliFunc_keyPress+0x4>
		}
	}
}
    3d22:	b003      	add	sp, #12
    3d24:	f85d fb04 	ldr.w	pc, [sp], #4

00003d28 <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    3d28:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3d2a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3d2c:	9801      	ldr	r0, [sp, #4]
    3d2e:	4669      	mov	r1, sp
    3d30:	aa01      	add	r2, sp, #4
    3d32:	f002 f92f 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3d36:	9800      	ldr	r0, [sp, #0]
    3d38:	7803      	ldrb	r3, [r0, #0]
    3d3a:	b14b      	cbz	r3, 3d50 <cliFunc_keyRelease+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3d3c:	2b53      	cmp	r3, #83	; 0x53
    3d3e:	d1f5      	bne.n	3d2c <cliFunc_keyRelease+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    3d40:	3001      	adds	r0, #1
    3d42:	f002 fd01 	bl	6748 <numToInt>
    3d46:	2103      	movs	r1, #3
    3d48:	b2c0      	uxtb	r0, r0
    3d4a:	f7ff ff97 	bl	3c7c <Macro_keyState>
			break;
    3d4e:	e7ed      	b.n	3d2c <cliFunc_keyRelease+0x4>
		}
	}
}
    3d50:	b003      	add	sp, #12
    3d52:	f85d fb04 	ldr.w	pc, [sp], #4
    3d56:	0000      	movs	r0, r0

00003d58 <Macro_appendResultMacroToPendingList>:


// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
    3d58:	b530      	push	{r4, r5, lr}
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    3d5a:	4b21      	ldr	r3, [pc, #132]	; (3de0 <Macro_appendResultMacroToPendingList+0x88>)
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    3d5c:	7902      	ldrb	r2, [r0, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    3d5e:	f8b3 1318 	ldrh.w	r1, [r3, #792]	; 0x318
    3d62:	2500      	movs	r5, #0
    3d64:	b2ec      	uxtb	r4, r5
    3d66:	428c      	cmp	r4, r1
    3d68:	d206      	bcs.n	3d78 <Macro_appendResultMacroToPendingList+0x20>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList.data[ macro ].index == resultMacroIndex )
    3d6a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    3d6e:	3501      	adds	r5, #1
    3d70:	88a4      	ldrh	r4, [r4, #4]
    3d72:	4294      	cmp	r4, r2
    3d74:	d1f6      	bne.n	3d64 <Macro_appendResultMacroToPendingList+0xc>
    3d76:	e031      	b.n	3ddc <Macro_appendResultMacroToPendingList+0x84>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    3d78:	1c4c      	adds	r4, r1, #1
		if ( macroResultMacroPendingList.data[ macro ].index == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
    3d7a:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    3d7e:	f8a3 4318 	strh.w	r4, [r3, #792]	; 0x318
    3d82:	eb03 03c1 	add.w	r3, r3, r1, lsl #3

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d86:	6800      	ldr	r0, [r0, #0]
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    3d88:	809a      	strh	r2, [r3, #4]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d8a:	7801      	ldrb	r1, [r0, #0]
	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    3d8c:	2300      	movs	r3, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d8e:	b131      	cbz	r1, 3d9e <Macro_appendResultMacroToPendingList+0x46>
	{
		pos += TriggerGuideSize * comboLength + 1;
    3d90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3d94:	3101      	adds	r1, #1
    3d96:	4419      	add	r1, r3
    3d98:	b2cb      	uxtb	r3, r1
		comboLength = triggerMacro->guide[ pos ];
    3d9a:	5cc1      	ldrb	r1, [r0, r3]
    3d9c:	e7f7      	b.n	3d8e <Macro_appendResultMacroToPendingList+0x36>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    3d9e:	4403      	add	r3, r0
    3da0:	2003      	movs	r0, #3
    3da2:	f813 4c01 	ldrb.w	r4, [r3, #-1]

	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    3da6:	4b0f      	ldr	r3, [pc, #60]	; (3de4 <Macro_appendResultMacroToPendingList+0x8c>)
    3da8:	7819      	ldrb	r1, [r3, #0]
    3daa:	4b0f      	ldr	r3, [pc, #60]	; (3de8 <Macro_appendResultMacroToPendingList+0x90>)
    3dac:	fb00 3001 	mla	r0, r0, r1, r3
    3db0:	4283      	cmp	r3, r0
    3db2:	d00e      	beq.n	3dd2 <Macro_appendResultMacroToPendingList+0x7a>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    3db4:	7819      	ldrb	r1, [r3, #0]
    3db6:	42a1      	cmp	r1, r4
    3db8:	d109      	bne.n	3dce <Macro_appendResultMacroToPendingList+0x76>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    3dba:	4d0c      	ldr	r5, [pc, #48]	; (3dec <Macro_appendResultMacroToPendingList+0x94>)
    3dbc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    3dc0:	4429      	add	r1, r5
    3dc2:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    3dc6:	704d      	strb	r5, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    3dc8:	f813 5c02 	ldrb.w	r5, [r3, #-2]
    3dcc:	708d      	strb	r5, [r1, #2]
    3dce:	3303      	adds	r3, #3
    3dd0:	e7ee      	b.n	3db0 <Macro_appendResultMacroToPendingList+0x58>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    3dd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3dd6:	4b05      	ldr	r3, [pc, #20]	; (3dec <Macro_appendResultMacroToPendingList+0x94>)
    3dd8:	2100      	movs	r1, #0
    3dda:	5499      	strb	r1, [r3, r2]
    3ddc:	bd30      	pop	{r4, r5, pc}
    3dde:	bf00      	nop
    3de0:	1fff9f1c 	.word	0x1fff9f1c
    3de4:	1fff9006 	.word	0x1fff9006
    3de8:	1fff9c00 	.word	0x1fff9c00
    3dec:	1fff9cd0 	.word	0x1fff9cd0

00003df0 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    3df0:	b510      	push	{r4, lr}
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    3df2:	4b0e      	ldr	r3, [pc, #56]	; (3e2c <Macro_process+0x3c>)
    3df4:	781b      	ldrb	r3, [r3, #0]
    3df6:	b13b      	cbz	r3, 3e08 <Macro_process+0x18>
	{
		if ( macroStepCounter == 0 )
    3df8:	4a0d      	ldr	r2, [pc, #52]	; (3e30 <Macro_process+0x40>)
    3dfa:	8813      	ldrh	r3, [r2, #0]
    3dfc:	b1ab      	cbz	r3, 3e2a <Macro_process+0x3a>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    3dfe:	3b01      	subs	r3, #1
		dbug_print("Macro Step");
    3e00:	480c      	ldr	r0, [pc, #48]	; (3e34 <Macro_process+0x44>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    3e02:	8013      	strh	r3, [r2, #0]
		dbug_print("Macro Step");
    3e04:	f002 fb8e 	bl	6524 <_print>

	// Process result macros
	Result_process();

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    3e08:	4c0b      	ldr	r4, [pc, #44]	; (3e38 <Macro_process+0x48>)
		macroStepCounter--;
		dbug_print("Macro Step");
	}

	// Process Trigger Macros
	Trigger_process();
    3e0a:	f000 fb63 	bl	44d4 <Trigger_process>


	// Process result macros
	Result_process();
    3e0e:	f000 f9fd 	bl	420c <Result_process>

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    3e12:	7820      	ldrb	r0, [r4, #0]
    3e14:	f7ff fb40 	bl	3498 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    3e18:	4a08      	ldr	r2, [pc, #32]	; (3e3c <Macro_process+0x4c>)
    3e1a:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    3e1c:	2300      	movs	r3, #0
    3e1e:	7023      	strb	r3, [r4, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    3e20:	b11a      	cbz	r2, 3e2a <Macro_process+0x3a>
	{
		USBKeys_Modifiers = 0;
    3e22:	4a07      	ldr	r2, [pc, #28]	; (3e40 <Macro_process+0x50>)
    3e24:	7013      	strb	r3, [r2, #0]
		USBKeys_Sent = 0;
    3e26:	4a07      	ldr	r2, [pc, #28]	; (3e44 <Macro_process+0x54>)
    3e28:	7013      	strb	r3, [r2, #0]
    3e2a:	bd10      	pop	{r4, pc}
    3e2c:	1fff9003 	.word	0x1fff9003
    3e30:	1fff9004 	.word	0x1fff9004
    3e34:	00007680 	.word	0x00007680
    3e38:	1fff9006 	.word	0x1fff9006
    3e3c:	1fff9002 	.word	0x1fff9002
    3e40:	1fff90f0 	.word	0x1fff90f0
    3e44:	1fffa25f 	.word	0x1fffa25f

00003e48 <Macro_setup>:
	}
}


inline void Macro_setup()
{
    3e48:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    3e4a:	480a      	ldr	r0, [pc, #40]	; (3e74 <Macro_setup+0x2c>)
    3e4c:	490a      	ldr	r1, [pc, #40]	; (3e78 <Macro_setup+0x30>)
    3e4e:	f002 f915 	bl	607c <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    3e52:	4a0a      	ldr	r2, [pc, #40]	; (3e7c <Macro_setup+0x34>)
    3e54:	2300      	movs	r3, #0
    3e56:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    3e58:	4a09      	ldr	r2, [pc, #36]	; (3e80 <Macro_setup+0x38>)
    3e5a:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    3e5c:	4a09      	ldr	r2, [pc, #36]	; (3e84 <Macro_setup+0x3c>)
    3e5e:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    3e60:	4a09      	ldr	r2, [pc, #36]	; (3e88 <Macro_setup+0x40>)
    3e62:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    3e64:	4a09      	ldr	r2, [pc, #36]	; (3e8c <Macro_setup+0x44>)
    3e66:	8013      	strh	r3, [r2, #0]

	// Setup Triggers
	Trigger_setup();
    3e68:	f000 fb26 	bl	44b8 <Trigger_setup>

	// Setup Results
	Result_setup();
}
    3e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Setup Triggers
	Trigger_setup();

	// Setup Results
	Result_setup();
    3e70:	f000 b9b8 	b.w	41e4 <Result_setup>
    3e74:	00007dd8 	.word	0x00007dd8
    3e78:	00007891 	.word	0x00007891
    3e7c:	1fff9002 	.word	0x1fff9002
    3e80:	1fff9003 	.word	0x1fff9003
    3e84:	1fff9004 	.word	0x1fff9004
    3e88:	1fff9006 	.word	0x1fff9006
    3e8c:	1fff9bfc 	.word	0x1fff9bfc

00003e90 <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    3e90:	286c      	cmp	r0, #108	; 0x6c
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    3e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e96:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    3e98:	d865      	bhi.n	3f66 <macroDebugShowTrigger+0xd6>

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    3e9a:	4834      	ldr	r0, [pc, #208]	; (3f6c <macroDebugShowTrigger+0xdc>)
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    3e9c:	4e34      	ldr	r6, [pc, #208]	; (3f70 <macroDebugShowTrigger+0xe0>)

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    3e9e:	f002 fb41 	bl	6524 <_print>
	info_msg("Trigger Macro Index: ");
    3ea2:	4834      	ldr	r0, [pc, #208]	; (3f74 <macroDebugShowTrigger+0xe4>)
    3ea4:	f002 fb3e 	bl	6524 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    3ea8:	4628      	mov	r0, r5
    3eaa:	f002 fb88 	bl	65be <printInt16>
	print( NL );
    3eae:	482f      	ldr	r0, [pc, #188]	; (3f6c <macroDebugShowTrigger+0xdc>)
    3eb0:	f002 fb38 	bl	6524 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    3eb4:	f856 8035 	ldr.w	r8, [r6, r5, lsl #3]
    3eb8:	f898 7000 	ldrb.w	r7, [r8]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    3ebc:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    3ebe:	b367      	cbz	r7, 3f1a <macroDebugShowTrigger+0x8a>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    3ec0:	3401      	adds	r4, #1
    3ec2:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    3ec4:	2303      	movs	r3, #3
    3ec6:	fb13 4707 	smlabb	r7, r3, r7, r4
    3eca:	42bc      	cmp	r4, r7
    3ecc:	d21e      	bcs.n	3f0c <macroDebugShowTrigger+0x7c>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    3ece:	eb08 0904 	add.w	r9, r8, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    3ed2:	2101      	movs	r1, #1
    3ed4:	f899 0002 	ldrb.w	r0, [r9, #2]
    3ed8:	f002 fbc6 	bl	6668 <printHex_op>
			print("|");
    3edc:	4826      	ldr	r0, [pc, #152]	; (3f78 <macroDebugShowTrigger+0xe8>)
    3ede:	f002 fb21 	bl	6524 <_print>
			printHex( guide->type );
    3ee2:	f818 0004 	ldrb.w	r0, [r8, r4]
    3ee6:	2101      	movs	r1, #1
    3ee8:	f002 fbbe 	bl	6668 <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    3eec:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    3eee:	4822      	ldr	r0, [pc, #136]	; (3f78 <macroDebugShowTrigger+0xe8>)
    3ef0:	f002 fb18 	bl	6524 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    3ef4:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    3ef6:	f899 0001 	ldrb.w	r0, [r9, #1]
    3efa:	2101      	movs	r1, #1
    3efc:	f002 fbb4 	bl	6668 <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    3f00:	42bc      	cmp	r4, r7
    3f02:	d2e2      	bcs.n	3eca <macroDebugShowTrigger+0x3a>
				print("+");
    3f04:	481d      	ldr	r0, [pc, #116]	; (3f7c <macroDebugShowTrigger+0xec>)
    3f06:	f002 fb0d 	bl	6524 <_print>
    3f0a:	e7de      	b.n	3eca <macroDebugShowTrigger+0x3a>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    3f0c:	f818 7004 	ldrb.w	r7, [r8, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    3f10:	b11f      	cbz	r7, 3f1a <macroDebugShowTrigger+0x8a>
			print(";");
    3f12:	481b      	ldr	r0, [pc, #108]	; (3f80 <macroDebugShowTrigger+0xf0>)
    3f14:	f002 fb06 	bl	6524 <_print>
    3f18:	e7d1      	b.n	3ebe <macroDebugShowTrigger+0x2e>
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    3f1a:	4c1a      	ldr	r4, [pc, #104]	; (3f84 <macroDebugShowTrigger+0xf4>)
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    3f1c:	481a      	ldr	r0, [pc, #104]	; (3f88 <macroDebugShowTrigger+0xf8>)
    3f1e:	f002 fb01 	bl	6524 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    3f22:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
			print(";");
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    3f26:	f814 0015 	ldrb.w	r0, [r4, r5, lsl #1]
    3f2a:	f002 fb48 	bl	65be <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    3f2e:	4817      	ldr	r0, [pc, #92]	; (3f8c <macroDebugShowTrigger+0xfc>)
    3f30:	f002 faf8 	bl	6524 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
	switch ( record->state )
    3f34:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    3f38:	7930      	ldrb	r0, [r6, #4]
    3f3a:	f002 fb40 	bl	65be <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    3f3e:	4814      	ldr	r0, [pc, #80]	; (3f90 <macroDebugShowTrigger+0x100>)
    3f40:	f002 faf0 	bl	6524 <_print>
	switch ( record->state )
    3f44:	786b      	ldrb	r3, [r5, #1]
    3f46:	2b01      	cmp	r3, #1
    3f48:	d006      	beq.n	3f58 <macroDebugShowTrigger+0xc8>
    3f4a:	d303      	bcc.n	3f54 <macroDebugShowTrigger+0xc4>
    3f4c:	2b02      	cmp	r3, #2
    3f4e:	d005      	beq.n	3f5c <macroDebugShowTrigger+0xcc>
    3f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    3f54:	480f      	ldr	r0, [pc, #60]	; (3f94 <macroDebugShowTrigger+0x104>)
    3f56:	e002      	b.n	3f5e <macroDebugShowTrigger+0xce>
	case TriggerMacro_Release: print("Release"); break;
    3f58:	480f      	ldr	r0, [pc, #60]	; (3f98 <macroDebugShowTrigger+0x108>)
    3f5a:	e000      	b.n	3f5e <macroDebugShowTrigger+0xce>
	case TriggerMacro_Waiting: print("Waiting"); break;
    3f5c:	480f      	ldr	r0, [pc, #60]	; (3f9c <macroDebugShowTrigger+0x10c>)
	}
}
    3f5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    3f62:	f002 badf 	b.w	6524 <_print>
    3f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f6a:	bf00      	nop
    3f6c:	000092ee 	.word	0x000092ee
    3f70:	0000818c 	.word	0x0000818c
    3f74:	000076a0 	.word	0x000076a0
    3f78:	000076c8 	.word	0x000076c8
    3f7c:	000076ca 	.word	0x000076ca
    3f80:	000076cc 	.word	0x000076cc
    3f84:	1fff9e41 	.word	0x1fff9e41
    3f88:	000076ce 	.word	0x000076ce
    3f8c:	000076db 	.word	0x000076db
    3f90:	000076f2 	.word	0x000076f2
    3f94:	0000777f 	.word	0x0000777f
    3f98:	00007788 	.word	0x00007788
    3f9c:	0000770a 	.word	0x0000770a

00003fa0 <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    3fa0:	2862      	cmp	r0, #98	; 0x62
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    3fa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fa6:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    3fa8:	f200 8096 	bhi.w	40d8 <macroDebugShowResult+0x138>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    3fac:	484c      	ldr	r0, [pc, #304]	; (40e0 <macroDebugShowResult+0x140>)
    3fae:	f002 fab9 	bl	6524 <_print>
	info_msg("Result Macro Index: ");
    3fb2:	484c      	ldr	r0, [pc, #304]	; (40e4 <macroDebugShowResult+0x144>)
    3fb4:	f002 fab6 	bl	6524 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    3fb8:	4620      	mov	r0, r4
    3fba:	f002 fb00 	bl	65be <printInt16>
	print( NL );
    3fbe:	4848      	ldr	r0, [pc, #288]	; (40e0 <macroDebugShowResult+0x140>)
    3fc0:	f002 fab0 	bl	6524 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    3fc4:	4b48      	ldr	r3, [pc, #288]	; (40e8 <macroDebugShowResult+0x148>)
    3fc6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    3fca:	f896 8000 	ldrb.w	r8, [r6]
    3fce:	2701      	movs	r7, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    3fd0:	f1b8 0f00 	cmp.w	r8, #0
    3fd4:	d065      	beq.n	40a2 <macroDebugShowResult+0x102>
    3fd6:	463d      	mov	r5, r7
    3fd8:	2700      	movs	r7, #0
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    3fda:	2101      	movs	r1, #1
    3fdc:	5d70      	ldrb	r0, [r6, r5]
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    3fde:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4114 <macroDebugShowResult+0x174>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    3fe2:	f002 fb41 	bl	6668 <printHex_op>
			print("|");
    3fe6:	4841      	ldr	r0, [pc, #260]	; (40ec <macroDebugShowResult+0x14c>)
    3fe8:	f002 fa9c 	bl	6524 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    3fec:	5d73      	ldrb	r3, [r6, r5]
    3fee:	2101      	movs	r1, #1
    3ff0:	f839 0033 	ldrh.w	r0, [r9, r3, lsl #3]
    3ff4:	f002 fb38 	bl	6668 <printHex_op>
			print("|");
    3ff8:	483c      	ldr	r0, [pc, #240]	; (40ec <macroDebugShowResult+0x14c>)
    3ffa:	f002 fa93 	bl	6524 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    3ffe:	5d73      	ldrb	r3, [r6, r5]
			capability( 0, 0xFF, 0xFF, 0 );
    4000:	2000      	movs	r0, #0
    4002:	21ff      	movs	r1, #255	; 0xff
    4004:	f859 c033 	ldr.w	ip, [r9, r3, lsl #3]
    4008:	460a      	mov	r2, r1
    400a:	4603      	mov	r3, r0
    400c:	47e0      	blx	ip

			// Display Argument(s)
			print("(");
    400e:	4838      	ldr	r0, [pc, #224]	; (40f0 <macroDebugShowResult+0x150>)
    4010:	f002 fa88 	bl	6524 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    4014:	eb06 0b05 	add.w	fp, r6, r5
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0, 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
    4018:	2200      	movs	r2, #0
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    401a:	f89b 3000 	ldrb.w	r3, [fp]
    401e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 4114 <macroDebugShowResult+0x174>
    4022:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
    4026:	7919      	ldrb	r1, [r3, #4]
    4028:	b2d3      	uxtb	r3, r2
    402a:	4299      	cmp	r1, r3
    402c:	d919      	bls.n	4062 <macroDebugShowResult+0xc2>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    402e:	eb0b 0103 	add.w	r1, fp, r3
    4032:	9201      	str	r2, [sp, #4]
    4034:	7848      	ldrb	r0, [r1, #1]
    4036:	9300      	str	r3, [sp, #0]
    4038:	2101      	movs	r1, #1
    403a:	f002 fb15 	bl	6668 <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    403e:	f89b 1000 	ldrb.w	r1, [fp]
    4042:	9b00      	ldr	r3, [sp, #0]
    4044:	9a01      	ldr	r2, [sp, #4]
    4046:	eb0a 0ac1 	add.w	sl, sl, r1, lsl #3
    404a:	3301      	adds	r3, #1
    404c:	f89a 1004 	ldrb.w	r1, [sl, #4]
    4050:	428b      	cmp	r3, r1
    4052:	da04      	bge.n	405e <macroDebugShowResult+0xbe>
					print(",");
    4054:	4827      	ldr	r0, [pc, #156]	; (40f4 <macroDebugShowResult+0x154>)
    4056:	9200      	str	r2, [sp, #0]
    4058:	f002 fa64 	bl	6524 <_print>
    405c:	9a00      	ldr	r2, [sp, #0]
    405e:	3201      	adds	r2, #1
    4060:	e7db      	b.n	401a <macroDebugShowResult+0x7a>
			}
			print(")");
    4062:	4825      	ldr	r0, [pc, #148]	; (40f8 <macroDebugShowResult+0x158>)
    4064:	f002 fa5e 	bl	6524 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    4068:	f89b 3000 	ldrb.w	r3, [fp]
    406c:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3

			// Increment function count
			funcCount++;
    4070:	3701      	adds	r7, #1
    4072:	f89a 3004 	ldrb.w	r3, [sl, #4]
    4076:	b2ff      	uxtb	r7, r7
    4078:	3301      	adds	r3, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    407a:	441d      	add	r5, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    407c:	4547      	cmp	r7, r8
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    407e:	b2ed      	uxtb	r5, r5

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    4080:	d202      	bcs.n	4088 <macroDebugShowResult+0xe8>
				print("+");
    4082:	481e      	ldr	r0, [pc, #120]	; (40fc <macroDebugShowResult+0x15c>)
    4084:	f002 fa4e 	bl	6524 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    4088:	4547      	cmp	r7, r8
    408a:	d1a6      	bne.n	3fda <macroDebugShowResult+0x3a>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    408c:	f816 8005 	ldrb.w	r8, [r6, r5]
    4090:	1c6f      	adds	r7, r5, #1
    4092:	b2ff      	uxtb	r7, r7

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    4094:	f1b8 0f00 	cmp.w	r8, #0
    4098:	d003      	beq.n	40a2 <macroDebugShowResult+0x102>
			print(";");
    409a:	4819      	ldr	r0, [pc, #100]	; (4100 <macroDebugShowResult+0x160>)
    409c:	f002 fa42 	bl	6524 <_print>
    40a0:	e796      	b.n	3fd0 <macroDebugShowResult+0x30>
	}

	// Display current position
	print( NL "Position: " );
    40a2:	4818      	ldr	r0, [pc, #96]	; (4104 <macroDebugShowResult+0x164>)
    40a4:	f002 fa3e 	bl	6524 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    40a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    40ac:	4b16      	ldr	r3, [pc, #88]	; (4108 <macroDebugShowResult+0x168>)
    40ae:	191d      	adds	r5, r3, r4
    40b0:	5d18      	ldrb	r0, [r3, r4]
    40b2:	f002 fa84 	bl	65be <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    40b6:	4815      	ldr	r0, [pc, #84]	; (410c <macroDebugShowResult+0x16c>)
    40b8:	f002 fa34 	bl	6524 <_print>
	printHex( record->state );
    40bc:	7868      	ldrb	r0, [r5, #1]
    40be:	2101      	movs	r1, #1
    40c0:	f002 fad2 	bl	6668 <printHex_op>
	print("/");
    40c4:	4812      	ldr	r0, [pc, #72]	; (4110 <macroDebugShowResult+0x170>)
    40c6:	f002 fa2d 	bl	6524 <_print>
	printHex( record->stateType );
    40ca:	78a8      	ldrb	r0, [r5, #2]
    40cc:	2101      	movs	r1, #1
}
    40ce:	b003      	add	sp, #12
    40d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    40d4:	f002 bac8 	b.w	6668 <printHex_op>
}
    40d8:	b003      	add	sp, #12
    40da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40de:	bf00      	nop
    40e0:	000092ee 	.word	0x000092ee
    40e4:	00007712 	.word	0x00007712
    40e8:	0000861c 	.word	0x0000861c
    40ec:	000076c8 	.word	0x000076c8
    40f0:	00009207 	.word	0x00009207
    40f4:	00007739 	.word	0x00007739
    40f8:	00008ce0 	.word	0x00008ce0
    40fc:	000076ca 	.word	0x000076ca
    4100:	000076cc 	.word	0x000076cc
    4104:	000076ce 	.word	0x000076ce
    4108:	1fff9cd0 	.word	0x1fff9cd0
    410c:	0000773b 	.word	0x0000773b
    4110:	00007760 	.word	0x00007760
    4114:	000070d8 	.word	0x000070d8

00004118 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    4118:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    411a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    411c:	9801      	ldr	r0, [sp, #4]
    411e:	4669      	mov	r1, sp
    4120:	aa01      	add	r2, sp, #4
    4122:	f001 ff37 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    4126:	9800      	ldr	r0, [sp, #0]
    4128:	7803      	ldrb	r3, [r0, #0]
    412a:	b18b      	cbz	r3, 4150 <cliFunc_macroShow+0x38>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    412c:	2b52      	cmp	r3, #82	; 0x52
    412e:	d008      	beq.n	4142 <cliFunc_macroShow+0x2a>
    4130:	2b54      	cmp	r3, #84	; 0x54
    4132:	d1f3      	bne.n	411c <cliFunc_macroShow+0x4>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    4134:	3001      	adds	r0, #1
    4136:	f002 fb07 	bl	6748 <numToInt>
    413a:	b2c0      	uxtb	r0, r0
    413c:	f7ff fea8 	bl	3e90 <macroDebugShowTrigger>
			break;
    4140:	e7ec      	b.n	411c <cliFunc_macroShow+0x4>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    4142:	3001      	adds	r0, #1
    4144:	f002 fb00 	bl	6748 <numToInt>
    4148:	b2c0      	uxtb	r0, r0
    414a:	f7ff ff29 	bl	3fa0 <macroDebugShowResult>
			break;
    414e:	e7e5      	b.n	411c <cliFunc_macroShow+0x4>
		}
	}
}
    4150:	b003      	add	sp, #12
    4152:	f85d fb04 	ldr.w	pc, [sp], #4
    4156:	0000      	movs	r0, r0

00004158 <Macro_evalResultMacro>:

// ----- Functions -----

// Evaluate/Update ResultMacro
ResultMacroEval Macro_evalResultMacro( ResultPendingElem resultElem )
{
    4158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    415c:	ab02      	add	r3, sp, #8
    415e:	e903 0003 	stmdb	r3, {r0, r1}
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultElem.index ];
    4162:	f8bd 5004 	ldrh.w	r5, [sp, #4]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultElem.index ];

	// Current Macro position
	var_uint_t pos = record->pos;
    4166:	4f1c      	ldr	r7, [pc, #112]	; (41d8 <Macro_evalResultMacro+0x80>)
    4168:	ea4f 0845 	mov.w	r8, r5, lsl #1
    416c:	eb08 0305 	add.w	r3, r8, r5

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    4170:	f04f 0900 	mov.w	r9, #0
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultElem.index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultElem.index ];

	// Current Macro position
	var_uint_t pos = record->pos;
    4174:	5cfc      	ldrb	r4, [r7, r3]

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    4176:	4b19      	ldr	r3, [pc, #100]	; (41dc <Macro_evalResultMacro+0x84>)
    4178:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    417c:	f816 a004 	ldrb.w	sl, [r6, r4]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    4180:	3401      	adds	r4, #1
    4182:	b2e4      	uxtb	r4, r4

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    4184:	fa5f f389 	uxtb.w	r3, r9
    4188:	4553      	cmp	r3, sl
    418a:	d218      	bcs.n	41be <Macro_evalResultMacro+0x66>
		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    418c:	eb08 0205 	add.w	r2, r8, r5
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    4190:	5d31      	ldrb	r1, [r6, r4]
    4192:	f8df b04c 	ldr.w	fp, [pc, #76]	; 41e0 <Macro_evalResultMacro+0x88>

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    4196:	9800      	ldr	r0, [sp, #0]
    4198:	f85b c031 	ldr.w	ip, [fp, r1, lsl #3]
    419c:	443a      	add	r2, r7

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    419e:	1933      	adds	r3, r6, r4
		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    41a0:	7851      	ldrb	r1, [r2, #1]
    41a2:	7892      	ldrb	r2, [r2, #2]
    41a4:	3301      	adds	r3, #1
    41a6:	47e0      	blx	ip

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    41a8:	5d33      	ldrb	r3, [r6, r4]
    41aa:	eb0b 0bc3 	add.w	fp, fp, r3, lsl #3
    41ae:	f109 0901 	add.w	r9, r9, #1
    41b2:	f89b 3004 	ldrb.w	r3, [fp, #4]
    41b6:	3301      	adds	r3, #1
    41b8:	441c      	add	r4, r3
    41ba:	b2e4      	uxtb	r4, r4
    41bc:	e7e2      	b.n	4184 <Macro_evalResultMacro+0x2c>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    41be:	4445      	add	r5, r8
    41c0:	557c      	strb	r4, [r7, r5]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    41c2:	5d33      	ldrb	r3, [r6, r4]
    41c4:	b91b      	cbnz	r3, 41ce <Macro_evalResultMacro+0x76>
	{
		record->pos = 0;
    41c6:	4a04      	ldr	r2, [pc, #16]	; (41d8 <Macro_evalResultMacro+0x80>)
		return ResultMacroEval_Remove;
    41c8:	2001      	movs	r0, #1
	record->pos = comboItem;

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
	{
		record->pos = 0;
    41ca:	5553      	strb	r3, [r2, r5]
		return ResultMacroEval_Remove;
    41cc:	e000      	b.n	41d0 <Macro_evalResultMacro+0x78>
	}

	// Otherwise leave the macro in the list
	return ResultMacroEval_DoNothing;
    41ce:	2000      	movs	r0, #0
}
    41d0:	b003      	add	sp, #12
    41d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41d6:	bf00      	nop
    41d8:	1fff9cd0 	.word	0x1fff9cd0
    41dc:	0000861c 	.word	0x0000861c
    41e0:	000070d8 	.word	0x000070d8

000041e4 <Result_setup>:


void Result_setup()
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;
    41e4:	4a07      	ldr	r2, [pc, #28]	; (4204 <Result_setup+0x20>)
    41e6:	2300      	movs	r3, #0
    41e8:	f8a2 3318 	strh.w	r3, [r2, #792]	; 0x318

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    41ec:	4806      	ldr	r0, [pc, #24]	; (4208 <Result_setup+0x24>)
    41ee:	1819      	adds	r1, r3, r0
    41f0:	2200      	movs	r2, #0
    41f2:	541a      	strb	r2, [r3, r0]
		ResultMacroRecordList[ macro ].state     = 0;
    41f4:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    41f6:	708a      	strb	r2, [r1, #2]
    41f8:	3303      	adds	r3, #3
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    41fa:	f240 1229 	movw	r2, #297	; 0x129
    41fe:	4293      	cmp	r3, r2
    4200:	d1f4      	bne.n	41ec <Result_setup+0x8>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    4202:	4770      	bx	lr
    4204:	1fff9f1c 	.word	0x1fff9f1c
    4208:	1fff9cd0 	.word	0x1fff9cd0

0000420c <Result_process>:


void Result_process()
{
    420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	index_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( index_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    4210:	2700      	movs	r7, #0

void Result_process()
{
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	index_uint_t macroResultMacroPendingListTail = 0;
    4212:	463e      	mov	r6, r7

	// Iterate through the pending ResultMacros, processing each of them
	for ( index_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    4214:	4d0f      	ldr	r5, [pc, #60]	; (4254 <Result_process+0x48>)
    4216:	f8b5 3318 	ldrh.w	r3, [r5, #792]	; 0x318
    421a:	b2bc      	uxth	r4, r7
    421c:	42a3      	cmp	r3, r4
    421e:	d914      	bls.n	424a <Result_process+0x3e>
	{
		switch ( Macro_evalResultMacro( macroResultMacroPendingList.data[ macro ] ) )
    4220:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    4224:	e894 0003 	ldmia.w	r4, {r0, r1}
    4228:	f7ff ff96 	bl	4158 <Macro_evalResultMacro>
    422c:	2801      	cmp	r0, #1
    422e:	d00a      	beq.n	4246 <Result_process+0x3a>
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			memcpy( &macroResultMacroPendingList.data[ macroResultMacroPendingListTail++ ],
    4230:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
    4234:	4621      	mov	r1, r4
    4236:	2208      	movs	r2, #8
    4238:	f106 0801 	add.w	r8, r6, #1
    423c:	f7fe f99c 	bl	2578 <memcpy>
    4240:	fa1f f888 	uxth.w	r8, r8
    4244:	4646      	mov	r6, r8
    4246:	3701      	adds	r7, #1
    4248:	e7e4      	b.n	4214 <Result_process+0x8>
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingList.size = macroResultMacroPendingListTail;
    424a:	f8a5 6318 	strh.w	r6, [r5, #792]	; 0x318
    424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4252:	bf00      	nop
    4254:	1fff9f1c 	.word	0x1fff9f1c

00004258 <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    4258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    425c:	4d8d      	ldr	r5, [pc, #564]	; (4494 <Macro_evalTriggerMacro+0x23c>)
    425e:	f8df 924c 	ldr.w	r9, [pc, #588]	; 44ac <Macro_evalTriggerMacro+0x254>
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    4262:	b085      	sub	sp, #20
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    4264:	0043      	lsls	r3, r0, #1
    4266:	9302      	str	r3, [sp, #8]
    4268:	18eb      	adds	r3, r5, r3
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    426a:	4682      	mov	sl, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    426c:	7859      	ldrb	r1, [r3, #1]
    426e:	2901      	cmp	r1, #1
    4270:	d10c      	bne.n	428c <Macro_evalTriggerMacro+0x34>
	{
		record->state = TriggerMacro_Waiting;
    4272:	2102      	movs	r1, #2
    4274:	7059      	strb	r1, [r3, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    4276:	f815 1010 	ldrb.w	r1, [r5, r0, lsl #1]
    427a:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]
    427e:	5c5b      	ldrb	r3, [r3, r1]
    4280:	1c48      	adds	r0, r1, #1
    4282:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4286:	4403      	add	r3, r0
    4288:	f805 301a 	strb.w	r3, [r5, sl, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    428c:	f815 301a 	ldrb.w	r3, [r5, sl, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    4290:	f859 003a 	ldr.w	r0, [r9, sl, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    4294:	9300      	str	r3, [sp, #0]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    4296:	5cc3      	ldrb	r3, [r0, r3]
    4298:	eb03 0343 	add.w	r3, r3, r3, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    429c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    42a0:	9303      	str	r3, [sp, #12]
    42a2:	d101      	bne.n	42a8 <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
    42a4:	2003      	movs	r0, #3
    42a6:	e0f1      	b.n	448c <Macro_evalTriggerMacro+0x234>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    42a8:	7801      	ldrb	r1, [r0, #0]
    42aa:	2303      	movs	r3, #3
    42ac:	fb03 0301 	mla	r3, r3, r1, r0
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    42b0:	2400      	movs	r4, #0
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    42b2:	785f      	ldrb	r7, [r3, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    42b4:	9b00      	ldr	r3, [sp, #0]
    42b6:	f103 0801 	add.w	r8, r3, #1
    42ba:	fa5f f888 	uxtb.w	r8, r8
    42be:	9b00      	ldr	r3, [sp, #0]
    42c0:	9a03      	ldr	r2, [sp, #12]
    42c2:	4413      	add	r3, r2
    42c4:	4543      	cmp	r3, r8
    42c6:	db77      	blt.n	43b8 <Macro_evalTriggerMacro+0x160>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    42c8:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    42cc:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    42d0:	4443      	add	r3, r8
    42d2:	9301      	str	r3, [sp, #4]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    42d4:	465e      	mov	r6, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    42d6:	4b70      	ldr	r3, [pc, #448]	; (4498 <Macro_evalTriggerMacro+0x240>)
    42d8:	7819      	ldrb	r1, [r3, #0]
    42da:	fa5f f38b 	uxtb.w	r3, fp
    42de:	4299      	cmp	r1, r3
    42e0:	f240 80d1 	bls.w	4486 <Macro_evalTriggerMacro+0x22e>
    42e4:	9a01      	ldr	r2, [sp, #4]
    42e6:	7811      	ldrb	r1, [r2, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
    42e8:	b36f      	cbz	r7, 4346 <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    42ea:	2901      	cmp	r1, #1
    42ec:	d024      	beq.n	4338 <Macro_evalTriggerMacro+0xe0>
    42ee:	d303      	bcc.n	42f8 <Macro_evalTriggerMacro+0xa0>
    42f0:	2902      	cmp	r1, #2
    42f2:	d123      	bne.n	433c <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    42f4:	4869      	ldr	r0, [pc, #420]	; (449c <Macro_evalTriggerMacro+0x244>)
    42f6:	e022      	b.n	433e <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    42f8:	4969      	ldr	r1, [pc, #420]	; (44a0 <Macro_evalTriggerMacro+0x248>)
    42fa:	9a01      	ldr	r2, [sp, #4]
    42fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4300:	440b      	add	r3, r1
    4302:	7890      	ldrb	r0, [r2, #2]
    4304:	7899      	ldrb	r1, [r3, #2]
    4306:	785b      	ldrb	r3, [r3, #1]
    4308:	4288      	cmp	r0, r1
    430a:	d00c      	beq.n	4326 <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    430c:	2b02      	cmp	r3, #2
    430e:	d040      	beq.n	4392 <Macro_evalTriggerMacro+0x13a>
    4310:	2b03      	cmp	r3, #3
    4312:	d006      	beq.n	4322 <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    4314:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    4318:	f1dc 0300 	rsbs	r3, ip, #0
    431c:	eb43 030c 	adc.w	r3, r3, ip
    4320:	e037      	b.n	4392 <Macro_evalTriggerMacro+0x13a>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    4322:	2306      	movs	r3, #6
    4324:	e035      	b.n	4392 <Macro_evalTriggerMacro+0x13a>
		}

		// Correct key
		else
		{
			switch ( key->state )
    4326:	2b02      	cmp	r3, #2
    4328:	d027      	beq.n	437a <Macro_evalTriggerMacro+0x122>
    432a:	2b03      	cmp	r3, #3
    432c:	d027      	beq.n	437e <Macro_evalTriggerMacro+0x126>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    432e:	2b01      	cmp	r3, #1
    4330:	bf0c      	ite	eq
    4332:	2308      	moveq	r3, #8
    4334:	2300      	movne	r3, #0
    4336:	e02c      	b.n	4392 <Macro_evalTriggerMacro+0x13a>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    4338:	485a      	ldr	r0, [pc, #360]	; (44a4 <Macro_evalTriggerMacro+0x24c>)
    433a:	e000      	b.n	433e <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    433c:	485a      	ldr	r0, [pc, #360]	; (44a8 <Macro_evalTriggerMacro+0x250>)
    433e:	f002 f8f1 	bl	6524 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    4342:	2300      	movs	r3, #0
    4344:	e025      	b.n	4392 <Macro_evalTriggerMacro+0x13a>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    4346:	2901      	cmp	r1, #1
    4348:	d01b      	beq.n	4382 <Macro_evalTriggerMacro+0x12a>
    434a:	d303      	bcc.n	4354 <Macro_evalTriggerMacro+0xfc>
    434c:	2902      	cmp	r1, #2
    434e:	d11a      	bne.n	4386 <Macro_evalTriggerMacro+0x12e>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    4350:	4852      	ldr	r0, [pc, #328]	; (449c <Macro_evalTriggerMacro+0x244>)
    4352:	e019      	b.n	4388 <Macro_evalTriggerMacro+0x130>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    4354:	4952      	ldr	r1, [pc, #328]	; (44a0 <Macro_evalTriggerMacro+0x248>)
    4356:	9a01      	ldr	r2, [sp, #4]
    4358:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    435c:	440b      	add	r3, r1
    435e:	7890      	ldrb	r0, [r2, #2]
    4360:	7899      	ldrb	r1, [r3, #2]
    4362:	4288      	cmp	r0, r1
    4364:	d114      	bne.n	4390 <Macro_evalTriggerMacro+0x138>
		{
			switch ( key->state )
    4366:	785b      	ldrb	r3, [r3, #1]
    4368:	2b02      	cmp	r3, #2
    436a:	d006      	beq.n	437a <Macro_evalTriggerMacro+0x122>
    436c:	2b03      	cmp	r3, #3
    436e:	d006      	beq.n	437e <Macro_evalTriggerMacro+0x126>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    4370:	2b01      	cmp	r3, #1
    4372:	bf0c      	ite	eq
    4374:	2308      	moveq	r3, #8
    4376:	2302      	movne	r3, #2
    4378:	e00b      	b.n	4392 <Macro_evalTriggerMacro+0x13a>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    437a:	2318      	movs	r3, #24
    437c:	e009      	b.n	4392 <Macro_evalTriggerMacro+0x13a>

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    437e:	2310      	movs	r3, #16
    4380:	e007      	b.n	4392 <Macro_evalTriggerMacro+0x13a>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    4382:	4848      	ldr	r0, [pc, #288]	; (44a4 <Macro_evalTriggerMacro+0x24c>)
    4384:	e000      	b.n	4388 <Macro_evalTriggerMacro+0x130>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    4386:	4848      	ldr	r0, [pc, #288]	; (44a8 <Macro_evalTriggerMacro+0x250>)
    4388:	f002 f8cc 	bl	6524 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    438c:	463b      	mov	r3, r7
    438e:	e000      	b.n	4392 <Macro_evalTriggerMacro+0x13a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    4390:	2302      	movs	r3, #2
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    4392:	4333      	orrs	r3, r6
    4394:	b2de      	uxtb	r6, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    4396:	2e07      	cmp	r6, #7
    4398:	f10b 0b01 	add.w	fp, fp, #1
    439c:	d99b      	bls.n	42d6 <Macro_evalTriggerMacro+0x7e>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    439e:	f006 0618 	and.w	r6, r6, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    43a2:	b91f      	cbnz	r7, 43ac <Macro_evalTriggerMacro+0x154>
    43a4:	2e07      	cmp	r6, #7
    43a6:	d801      	bhi.n	43ac <Macro_evalTriggerMacro+0x154>
			vote |= TriggerMacroVote_Fail;
    43a8:	f046 0601 	orr.w	r6, r6, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    43ac:	f108 0803 	add.w	r8, r8, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    43b0:	4334      	orrs	r4, r6
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    43b2:	fa5f f888 	uxtb.w	r8, r8
    43b6:	e782      	b.n	42be <Macro_evalTriggerMacro+0x66>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    43b8:	b12f      	cbz	r7, 43c6 <Macro_evalTriggerMacro+0x16e>
    43ba:	0760      	lsls	r0, r4, #29
    43bc:	d503      	bpl.n	43c6 <Macro_evalTriggerMacro+0x16e>
    43be:	9a00      	ldr	r2, [sp, #0]
    43c0:	b90a      	cbnz	r2, 43c6 <Macro_evalTriggerMacro+0x16e>
		overallVote |= TriggerMacroVote_Fail;
    43c2:	f044 0401 	orr.w	r4, r4, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    43c6:	f014 0001 	ands.w	r0, r4, #1
    43ca:	f47f af6b 	bne.w	42a4 <Macro_evalTriggerMacro+0x4c>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    43ce:	07a1      	lsls	r1, r4, #30
    43d0:	d501      	bpl.n	43d6 <Macro_evalTriggerMacro+0x17e>
    43d2:	2f00      	cmp	r7, #0
    43d4:	d15a      	bne.n	448c <Macro_evalTriggerMacro+0x234>
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    43d6:	f004 0110 	and.w	r1, r4, #16
    43da:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    43de:	b1e1      	cbz	r1, 441a <Macro_evalTriggerMacro+0x1c2>
    43e0:	9a02      	ldr	r2, [sp, #8]
    43e2:	18a9      	adds	r1, r5, r2
    43e4:	784e      	ldrb	r6, [r1, #1]
    43e6:	b9c6      	cbnz	r6, 441a <Macro_evalTriggerMacro+0x1c2>
	{
		record->state = TriggerMacro_Release;
    43e8:	2301      	movs	r3, #1
    43ea:	704b      	strb	r3, [r1, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    43ec:	4b29      	ldr	r3, [pc, #164]	; (4494 <Macro_evalTriggerMacro+0x23c>)
    43ee:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    43f2:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    43f6:	5cc8      	ldrb	r0, [r1, r3]
    43f8:	2203      	movs	r2, #3
    43fa:	3301      	adds	r3, #1
    43fc:	fb12 3300 	smlabb	r3, r2, r0, r3
    4400:	5ccb      	ldrb	r3, [r1, r3]
    4402:	b143      	cbz	r3, 4416 <Macro_evalTriggerMacro+0x1be>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    4404:	2f00      	cmp	r7, #0
    4406:	f43f af4d 	beq.w	42a4 <Macro_evalTriggerMacro+0x4c>
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    440a:	2000      	movs	r0, #0
    440c:	e03e      	b.n	448c <Macro_evalTriggerMacro+0x234>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    440e:	5cc3      	ldrb	r3, [r0, r3]
    4410:	b353      	cbz	r3, 4468 <Macro_evalTriggerMacro+0x210>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    4412:	2c08      	cmp	r4, #8
    4414:	d1f6      	bne.n	4404 <Macro_evalTriggerMacro+0x1ac>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    4416:	2002      	movs	r0, #2
    4418:	e038      	b.n	448c <Macro_evalTriggerMacro+0x234>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    441a:	0722      	lsls	r2, r4, #28
    441c:	d530      	bpl.n	4480 <Macro_evalTriggerMacro+0x228>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    441e:	9a02      	ldr	r2, [sp, #8]
    4420:	4415      	add	r5, r2
    4422:	7869      	ldrb	r1, [r5, #1]
    4424:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
    4428:	d12a      	bne.n	4480 <Macro_evalTriggerMacro+0x228>
	{
		record->state = TriggerMacro_Press;
    442a:	7069      	strb	r1, [r5, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    442c:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    4430:	440b      	add	r3, r1
    4432:	7859      	ldrb	r1, [r3, #1]
    4434:	2900      	cmp	r1, #0
    4436:	d1e5      	bne.n	4404 <Macro_evalTriggerMacro+0x1ac>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    4438:	4b1c      	ldr	r3, [pc, #112]	; (44ac <Macro_evalTriggerMacro+0x254>)
    443a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    443e:	7918      	ldrb	r0, [r3, #4]
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    4440:	4b1b      	ldr	r3, [pc, #108]	; (44b0 <Macro_evalTriggerMacro+0x258>)
    4442:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4446:	7806      	ldrb	r6, [r0, #0]
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    4448:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    444a:	b2cd      	uxtb	r5, r1
    444c:	42b5      	cmp	r5, r6
    444e:	d2de      	bcs.n	440e <Macro_evalTriggerMacro+0x1b6>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    4450:	f810 e003 	ldrb.w	lr, [r0, r3]
    4454:	4d17      	ldr	r5, [pc, #92]	; (44b4 <Macro_evalTriggerMacro+0x25c>)
    4456:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
    445a:	3101      	adds	r1, #1
    445c:	792d      	ldrb	r5, [r5, #4]
    445e:	3501      	adds	r5, #1
    4460:	fa53 f385 	uxtab	r3, r3, r5
    4464:	b2db      	uxtb	r3, r3
    4466:	e7f0      	b.n	444a <Macro_evalTriggerMacro+0x1f2>
    4468:	4b10      	ldr	r3, [pc, #64]	; (44ac <Macro_evalTriggerMacro+0x254>)
    446a:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    446e:	7811      	ldrb	r1, [r2, #0]
    4470:	2001      	movs	r0, #1
    4472:	2303      	movs	r3, #3
    4474:	fb13 0301 	smlabb	r3, r3, r1, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    4478:	5cd3      	ldrb	r3, [r2, r3]
    447a:	2b00      	cmp	r3, #0
    447c:	d1cb      	bne.n	4416 <Macro_evalTriggerMacro+0x1be>
    447e:	e005      	b.n	448c <Macro_evalTriggerMacro+0x234>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    4480:	2800      	cmp	r0, #0
    4482:	d1c8      	bne.n	4416 <Macro_evalTriggerMacro+0x1be>
    4484:	e7be      	b.n	4404 <Macro_evalTriggerMacro+0x1ac>
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    4486:	2f00      	cmp	r7, #0
    4488:	d08e      	beq.n	43a8 <Macro_evalTriggerMacro+0x150>
    448a:	e78f      	b.n	43ac <Macro_evalTriggerMacro+0x154>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    448c:	b005      	add	sp, #20
    448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4492:	bf00      	nop
    4494:	1fff9e41 	.word	0x1fff9e41
    4498:	1fff9006 	.word	0x1fff9006
    449c:	000088f3 	.word	0x000088f3
    44a0:	1fff9bfe 	.word	0x1fff9bfe
    44a4:	000088b8 	.word	0x000088b8
    44a8:	00008931 	.word	0x00008931
    44ac:	0000818c 	.word	0x0000818c
    44b0:	0000861c 	.word	0x0000861c
    44b4:	000070d8 	.word	0x000070d8

000044b8 <Trigger_setup>:
	return 0;
}


void Trigger_setup()
{
    44b8:	2300      	movs	r3, #0
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    44ba:	4a05      	ldr	r2, [pc, #20]	; (44d0 <Trigger_setup+0x18>)
    44bc:	2000      	movs	r0, #0
    44be:	1899      	adds	r1, r3, r2
    44c0:	5498      	strb	r0, [r3, r2]
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    44c2:	2202      	movs	r2, #2
    44c4:	4413      	add	r3, r2


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    44c6:	2bda      	cmp	r3, #218	; 0xda
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    44c8:	704a      	strb	r2, [r1, #1]


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    44ca:	d1f6      	bne.n	44ba <Trigger_setup+0x2>
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}
}
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop
    44d0:	1fff9e41 	.word	0x1fff9e41

000044d4 <Trigger_process>:


void Trigger_process()
{
    44d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    44d8:	2500      	movs	r5, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    44da:	4b36      	ldr	r3, [pc, #216]	; (45b4 <Trigger_process+0xe0>)
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	b2e8      	uxtb	r0, r5
    44e0:	4283      	cmp	r3, r0
    44e2:	d93b      	bls.n	455c <Trigger_process+0x88>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    44e4:	4b34      	ldr	r3, [pc, #208]	; (45b8 <Trigger_process+0xe4>)
    44e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    44ea:	4418      	add	r0, r3
    44ec:	7841      	ldrb	r1, [r0, #1]
    44ee:	b399      	cbz	r1, 4558 <Trigger_process+0x84>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    44f0:	1ecb      	subs	r3, r1, #3
    44f2:	4259      	negs	r1, r3
    44f4:	4159      	adcs	r1, r3
    44f6:	f7ff fb33 	bl	3b60 <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    44fa:	b368      	cbz	r0, 4558 <Trigger_process+0x84>
    44fc:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 45c4 <Trigger_process+0xf0>
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    4500:	f8d0 c000 	ldr.w	ip, [r0]
    4504:	f8be 3000 	ldrh.w	r3, [lr]

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    4508:	2201      	movs	r2, #1
    450a:	f10c 0101 	add.w	r1, ip, #1
    450e:	428a      	cmp	r2, r1
    4510:	d220      	bcs.n	4554 <Trigger_process+0x80>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    4512:	f810 4022 	ldrb.w	r4, [r0, r2, lsl #2]
    4516:	2600      	movs	r6, #0

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    4518:	b2f7      	uxtb	r7, r6
    451a:	b2b9      	uxth	r1, r7
    451c:	4299      	cmp	r1, r3
    451e:	d207      	bcs.n	4530 <Trigger_process+0x5c>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    4520:	f8df 8098 	ldr.w	r8, [pc, #152]	; 45bc <Trigger_process+0xe8>
    4524:	f838 7017 	ldrh.w	r7, [r8, r7, lsl #1]
    4528:	42a7      	cmp	r7, r4
    452a:	f106 0601 	add.w	r6, r6, #1
    452e:	d1f3      	bne.n	4518 <Trigger_process+0x44>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    4530:	4299      	cmp	r1, r3
    4532:	d10c      	bne.n	454e <Trigger_process+0x7a>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    4534:	4e21      	ldr	r6, [pc, #132]	; (45bc <Trigger_process+0xe8>)
    4536:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    453a:	4921      	ldr	r1, [pc, #132]	; (45c0 <Trigger_process+0xec>)
    453c:	2600      	movs	r6, #0
    453e:	f801 6014 	strb.w	r6, [r1, r4, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    4542:	eb01 0144 	add.w	r1, r1, r4, lsl #1

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    4546:	3301      	adds	r3, #1

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    4548:	2402      	movs	r4, #2

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    454a:	b29b      	uxth	r3, r3

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    454c:	704c      	strb	r4, [r1, #1]
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    454e:	3201      	adds	r2, #1
    4550:	b2d2      	uxtb	r2, r2
    4552:	e7da      	b.n	450a <Trigger_process+0x36>
    4554:	f8ae 3000 	strh.w	r3, [lr]
    4558:	3501      	adds	r5, #1
    455a:	e7be      	b.n	44da <Trigger_process+0x6>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    455c:	2700      	movs	r7, #0
    455e:	463e      	mov	r6, r7
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    4560:	4b18      	ldr	r3, [pc, #96]	; (45c4 <Trigger_process+0xf0>)
    4562:	881a      	ldrh	r2, [r3, #0]
    4564:	b2fc      	uxtb	r4, r7
    4566:	4294      	cmp	r4, r2
    4568:	d221      	bcs.n	45ae <Trigger_process+0xda>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    456a:	4d14      	ldr	r5, [pc, #80]	; (45bc <Trigger_process+0xe8>)
    456c:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
    4570:	f7ff fe72 	bl	4258 <Macro_evalTriggerMacro>
    4574:	2802      	cmp	r0, #2
    4576:	d011      	beq.n	459c <Trigger_process+0xc8>
    4578:	2803      	cmp	r0, #3
    457a:	d016      	beq.n	45aa <Trigger_process+0xd6>
    457c:	2801      	cmp	r0, #1
    457e:	d106      	bne.n	458e <Trigger_process+0xba>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    4580:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    4584:	4b10      	ldr	r3, [pc, #64]	; (45c8 <Trigger_process+0xf4>)
    4586:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    458a:	f7ff fbe5 	bl	3d58 <Macro_appendResultMacroToPendingList>

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    458e:	1c73      	adds	r3, r6, #1
    4590:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
    4594:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    4598:	b2de      	uxtb	r6, r3
			break;
    459a:	e006      	b.n	45aa <Trigger_process+0xd6>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    459c:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    45a0:	4b09      	ldr	r3, [pc, #36]	; (45c8 <Trigger_process+0xf4>)
    45a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    45a6:	f7ff fbd7 	bl	3d58 <Macro_appendResultMacroToPendingList>
    45aa:	3701      	adds	r7, #1
    45ac:	e7d8      	b.n	4560 <Trigger_process+0x8c>
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    45ae:	801e      	strh	r6, [r3, #0]
    45b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45b4:	1fff9006 	.word	0x1fff9006
    45b8:	1fff9bfe 	.word	0x1fff9bfe
    45bc:	1fff9014 	.word	0x1fff9014
    45c0:	1fff9e41 	.word	0x1fff9e41
    45c4:	1fff9012 	.word	0x1fff9012
    45c8:	0000818c 	.word	0x0000818c

000045cc <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    45cc:	4b04      	ldr	r3, [pc, #16]	; (45e0 <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    45ce:	781a      	ldrb	r2, [r3, #0]
    45d0:	4b04      	ldr	r3, [pc, #16]	; (45e4 <cliFunc_sendKeys+0x18>)
    45d2:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    45d4:	4b04      	ldr	r3, [pc, #16]	; (45e8 <cliFunc_sendKeys+0x1c>)
    45d6:	781a      	ldrb	r2, [r3, #0]
    45d8:	4b04      	ldr	r3, [pc, #16]	; (45ec <cliFunc_sendKeys+0x20>)
    45da:	701a      	strb	r2, [r3, #0]
    45dc:	4770      	bx	lr
    45de:	bf00      	nop
    45e0:	1fffa238 	.word	0x1fffa238
    45e4:	1fffa25f 	.word	0x1fffa25f
    45e8:	1fff9106 	.word	0x1fff9106
    45ec:	1fff90f0 	.word	0x1fff90f0

000045f0 <cliFunc_setKeys>:
}


void cliFunc_setKeys( char* args )
{
    45f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    45f2:	4b0b      	ldr	r3, [pc, #44]	; (4620 <cliFunc_setKeys+0x30>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    45f4:	9001      	str	r0, [sp, #4]

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    45f6:	2200      	movs	r2, #0
    45f8:	701a      	strb	r2, [r3, #0]
    45fa:	461c      	mov	r4, r3
    45fc:	7823      	ldrb	r3, [r4, #0]
    45fe:	4d08      	ldr	r5, [pc, #32]	; (4620 <cliFunc_setKeys+0x30>)
    4600:	2b05      	cmp	r3, #5
    4602:	d80b      	bhi.n	461c <cliFunc_setKeys+0x2c>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4604:	9801      	ldr	r0, [sp, #4]
    4606:	4669      	mov	r1, sp
    4608:	aa01      	add	r2, sp, #4
    460a:	f001 fcc3 	bl	5f94 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    460e:	9b00      	ldr	r3, [sp, #0]
    4610:	781b      	ldrb	r3, [r3, #0]
    4612:	b11b      	cbz	r3, 461c <cliFunc_setKeys+0x2c>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    4614:	782b      	ldrb	r3, [r5, #0]
    4616:	3301      	adds	r3, #1
    4618:	702b      	strb	r3, [r5, #0]
    461a:	e7ef      	b.n	45fc <cliFunc_setKeys+0xc>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    461c:	b003      	add	sp, #12
    461e:	bd30      	pop	{r4, r5, pc}
    4620:	1fffa238 	.word	0x1fffa238

00004624 <cliFunc_outputDebug>:
	}
}


void cliFunc_outputDebug( char* args )
{
    4624:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    4626:	4c07      	ldr	r4, [pc, #28]	; (4644 <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4628:	4669      	mov	r1, sp
    462a:	aa01      	add	r2, sp, #4
    462c:	f001 fcb2 	bl	5f94 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    4630:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    4632:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    4634:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    4636:	7803      	ldrb	r3, [r0, #0]
    4638:	b113      	cbz	r3, 4640 <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    463a:	f002 f885 	bl	6748 <numToInt>
    463e:	7020      	strb	r0, [r4, #0]
	}
}
    4640:	b002      	add	sp, #8
    4642:	bd10      	pop	{r4, pc}
    4644:	1fff9105 	.word	0x1fff9105

00004648 <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    4648:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    464a:	4669      	mov	r1, sp
    464c:	aa01      	add	r2, sp, #4
    464e:	f001 fca1 	bl	5f94 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    4652:	9800      	ldr	r0, [sp, #0]
    4654:	f002 f878 	bl	6748 <numToInt>
    4658:	4b02      	ldr	r3, [pc, #8]	; (4664 <cliFunc_setMod+0x1c>)
    465a:	7018      	strb	r0, [r3, #0]
}
    465c:	b003      	add	sp, #12
    465e:	f85d fb04 	ldr.w	pc, [sp], #4
    4662:	bf00      	nop
    4664:	1fff9106 	.word	0x1fff9106

00004668 <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    4668:	b508      	push	{r3, lr}
	print( NL );
    466a:	4806      	ldr	r0, [pc, #24]	; (4684 <cliFunc_readLEDs+0x1c>)
    466c:	f001 ff5a 	bl	6524 <_print>
	info_msg("LED State: ");
    4670:	4805      	ldr	r0, [pc, #20]	; (4688 <cliFunc_readLEDs+0x20>)
    4672:	f001 ff57 	bl	6524 <_print>
	printInt8( USBKeys_LEDs );
    4676:	4b05      	ldr	r3, [pc, #20]	; (468c <cliFunc_readLEDs+0x24>)
    4678:	7818      	ldrb	r0, [r3, #0]
}
    467a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    467e:	f001 bf80 	b.w	6582 <printInt8>
    4682:	bf00      	nop
    4684:	000092ee 	.word	0x000092ee
    4688:	00008b85 	.word	0x00008b85
    468c:	1fff90fd 	.word	0x1fff90fd

00004690 <cliFunc_usbInitTime>:

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
}

void cliFunc_usbInitTime( char* args )
{
    4690:	b508      	push	{r3, lr}
	// Calculate overall USB initialization time
	// XXX A protocol analyzer will be more accurate, however, this is built-in and easier to collect data
	print(NL);
    4692:	480d      	ldr	r0, [pc, #52]	; (46c8 <cliFunc_usbInitTime+0x38>)
    4694:	f001 ff46 	bl	6524 <_print>
	info_msg("USB Init Time: ");
    4698:	480c      	ldr	r0, [pc, #48]	; (46cc <cliFunc_usbInitTime+0x3c>)
    469a:	f001 ff43 	bl	6524 <_print>
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
    469e:	4b0c      	ldr	r3, [pc, #48]	; (46d0 <cliFunc_usbInitTime+0x40>)
    46a0:	6818      	ldr	r0, [r3, #0]
    46a2:	4b0c      	ldr	r3, [pc, #48]	; (46d4 <cliFunc_usbInitTime+0x44>)
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	1ac0      	subs	r0, r0, r3
    46a8:	f001 ffa8 	bl	65fc <printInt32>
	print(" ms - ");
    46ac:	480a      	ldr	r0, [pc, #40]	; (46d8 <cliFunc_usbInitTime+0x48>)
    46ae:	f001 ff39 	bl	6524 <_print>
	printInt16( USBInit_Ticks );
    46b2:	4b0a      	ldr	r3, [pc, #40]	; (46dc <cliFunc_usbInitTime+0x4c>)
    46b4:	8818      	ldrh	r0, [r3, #0]
    46b6:	b280      	uxth	r0, r0
    46b8:	f001 ff81 	bl	65be <printInt16>
	print(" ticks");
    46bc:	4808      	ldr	r0, [pc, #32]	; (46e0 <cliFunc_usbInitTime+0x50>)
}
    46be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print(NL);
	info_msg("USB Init Time: ");
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
	print(" ms - ");
	printInt16( USBInit_Ticks );
	print(" ticks");
    46c2:	f001 bf2f 	b.w	6524 <_print>
    46c6:	bf00      	nop
    46c8:	000092ee 	.word	0x000092ee
    46cc:	00008ba3 	.word	0x00008ba3
    46d0:	1fffa23c 	.word	0x1fffa23c
    46d4:	1fffa27c 	.word	0x1fffa27c
    46d8:	00008bc5 	.word	0x00008bc5
    46dc:	1fffa242 	.word	0x1fffa242
    46e0:	00008bcc 	.word	0x00008bcc

000046e4 <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    46e4:	b513      	push	{r0, r1, r4, lr}
    46e6:	4604      	mov	r4, r0
	print( NL );
    46e8:	480f      	ldr	r0, [pc, #60]	; (4728 <cliFunc_kbdProtocol+0x44>)
    46ea:	f001 ff1b 	bl	6524 <_print>

	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    46ee:	4620      	mov	r0, r4
    46f0:	4669      	mov	r1, sp
    46f2:	aa01      	add	r2, sp, #4
    46f4:	f001 fc4e 	bl	5f94 <CLI_argumentIsolation>

	if ( arg1Ptr[0] != '\0' )
    46f8:	9800      	ldr	r0, [sp, #0]
    46fa:	7803      	ldrb	r3, [r0, #0]
    46fc:	b15b      	cbz	r3, 4716 <cliFunc_kbdProtocol+0x32>
	{
		uint8_t mode = (uint8_t)numToInt( arg1Ptr );
    46fe:	f002 f823 	bl	6748 <numToInt>
    4702:	b2c0      	uxtb	r0, r0

		// Do nothing if the argument was wrong
		if ( mode == 0 || mode == 1 )
    4704:	2801      	cmp	r0, #1
    4706:	d80d      	bhi.n	4724 <cliFunc_kbdProtocol+0x40>
		{
			USBKeys_Protocol = mode;
    4708:	4c08      	ldr	r4, [pc, #32]	; (472c <cliFunc_kbdProtocol+0x48>)
    470a:	7020      	strb	r0, [r4, #0]
			info_msg("Setting Keyboard Protocol to: ");
    470c:	4808      	ldr	r0, [pc, #32]	; (4730 <cliFunc_kbdProtocol+0x4c>)
    470e:	f001 ff09 	bl	6524 <_print>
			printInt8( USBKeys_Protocol );
    4712:	7820      	ldrb	r0, [r4, #0]
    4714:	e004      	b.n	4720 <cliFunc_kbdProtocol+0x3c>
		}
	}
	else
	{
		info_msg("Keyboard Protocol: ");
    4716:	4807      	ldr	r0, [pc, #28]	; (4734 <cliFunc_kbdProtocol+0x50>)
    4718:	f001 ff04 	bl	6524 <_print>
		printInt8( USBKeys_Protocol );
    471c:	4b03      	ldr	r3, [pc, #12]	; (472c <cliFunc_kbdProtocol+0x48>)
    471e:	7818      	ldrb	r0, [r3, #0]
    4720:	f001 ff2f 	bl	6582 <printInt8>
	}
}
    4724:	b002      	add	sp, #8
    4726:	bd10      	pop	{r4, pc}
    4728:	000092ee 	.word	0x000092ee
    472c:	1fff8c44 	.word	0x1fff8c44
    4730:	00008bd3 	.word	0x00008bd3
    4734:	00008c04 	.word	0x00008c04

00004738 <Output_consCtrlSend_capability>:
// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4738:	2aff      	cmp	r2, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    473a:	b530      	push	{r4, r5, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    473c:	d106      	bne.n	474c <Output_consCtrlSend_capability+0x14>
    473e:	29ff      	cmp	r1, #255	; 0xff
    4740:	d104      	bne.n	474c <Output_consCtrlSend_capability+0x14>
	{
		print("Output_consCtrlSend(consCode)");
    4742:	480b      	ldr	r0, [pc, #44]	; (4770 <Output_consCtrlSend_capability+0x38>)
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
#endif
}
    4744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_consCtrlSend(consCode)");
    4748:	f001 beec 	b.w	6524 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    474c:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
    4750:	2801      	cmp	r0, #1
    4752:	4c08      	ldr	r4, [pc, #32]	; (4774 <Output_consCtrlSend_capability+0x3c>)
    4754:	d109      	bne.n	476a <Output_consCtrlSend_capability+0x32>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    4756:	4d08      	ldr	r5, [pc, #32]	; (4778 <Output_consCtrlSend_capability+0x40>)
    4758:	7828      	ldrb	r0, [r5, #0]
    475a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    475e:	7028      	strb	r0, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    4760:	b91a      	cbnz	r2, 476a <Output_consCtrlSend_capability+0x32>
    4762:	2903      	cmp	r1, #3
    4764:	d101      	bne.n	476a <Output_consCtrlSend_capability+0x32>
	{
		USBKeys_ConsCtrl = 0;
    4766:	8022      	strh	r2, [r4, #0]
		return;
    4768:	bd30      	pop	{r4, r5, pc}
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    476a:	881b      	ldrh	r3, [r3, #0]
    476c:	8023      	strh	r3, [r4, #0]
    476e:	bd30      	pop	{r4, r5, pc}
    4770:	00008c2a 	.word	0x00008c2a
    4774:	1fffa280 	.word	0x1fffa280
    4778:	1fff90f1 	.word	0x1fff90f1

0000477c <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    477c:	2aff      	cmp	r2, #255	; 0xff
    477e:	d104      	bne.n	478a <Output_noneSend_capability+0xe>
    4780:	29ff      	cmp	r1, #255	; 0xff
    4782:	d102      	bne.n	478a <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    4784:	4801      	ldr	r0, [pc, #4]	; (478c <Output_noneSend_capability+0x10>)
    4786:	f001 becd 	b.w	6524 <_print>
    478a:	4770      	bx	lr
    478c:	00008c48 	.word	0x00008c48

00004790 <Output_sysCtrlSend_capability>:
// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4790:	2aff      	cmp	r2, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    4792:	b530      	push	{r4, r5, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4794:	d106      	bne.n	47a4 <Output_sysCtrlSend_capability+0x14>
    4796:	29ff      	cmp	r1, #255	; 0xff
    4798:	d104      	bne.n	47a4 <Output_sysCtrlSend_capability+0x14>
	{
		print("Output_sysCtrlSend(sysCode)");
    479a:	480b      	ldr	r0, [pc, #44]	; (47c8 <Output_sysCtrlSend_capability+0x38>)
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
#endif
}
    479c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_sysCtrlSend(sysCode)");
    47a0:	f001 bec0 	b.w	6524 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    47a4:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
    47a8:	2801      	cmp	r0, #1
    47aa:	4c08      	ldr	r4, [pc, #32]	; (47cc <Output_sysCtrlSend_capability+0x3c>)
    47ac:	d109      	bne.n	47c2 <Output_sysCtrlSend_capability+0x32>
		USBKeys_Changed |= USBKeyChangeState_System;
    47ae:	4d08      	ldr	r5, [pc, #32]	; (47d0 <Output_sysCtrlSend_capability+0x40>)
    47b0:	7828      	ldrb	r0, [r5, #0]
    47b2:	f040 0020 	orr.w	r0, r0, #32
    47b6:	7028      	strb	r0, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    47b8:	b91a      	cbnz	r2, 47c2 <Output_sysCtrlSend_capability+0x32>
    47ba:	2903      	cmp	r1, #3
    47bc:	d101      	bne.n	47c2 <Output_sysCtrlSend_capability+0x32>
	{
		USBKeys_SysCtrl = 0;
    47be:	7022      	strb	r2, [r4, #0]
		return;
    47c0:	bd30      	pop	{r4, r5, pc}
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	7023      	strb	r3, [r4, #0]
    47c6:	bd30      	pop	{r4, r5, pc}
    47c8:	00008c5a 	.word	0x00008c5a
    47cc:	1fffa240 	.word	0x1fffa240
    47d0:	1fff90f1 	.word	0x1fff90f1

000047d4 <Output_flashMode_capability>:
}

void Output_flashMode_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    47d4:	2aff      	cmp	r2, #255	; 0xff
    47d6:	d104      	bne.n	47e2 <Output_flashMode_capability+0xe>
    47d8:	29ff      	cmp	r1, #255	; 0xff
    47da:	d102      	bne.n	47e2 <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    47dc:	4802      	ldr	r0, [pc, #8]	; (47e8 <Output_flashMode_capability+0x14>)
    47de:	f001 bea1 	b.w	6524 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    47e2:	f000 bb43 	b.w	4e6c <usb_device_reload>
    47e6:	bf00      	nop
    47e8:	00008c76 	.word	0x00008c76

000047ec <Output_usbMouse_capability>:
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    47ec:	2aff      	cmp	r2, #255	; 0xff
//     If you use it, be prepared that your .kll files will break in the future (post KLL 0.5)
// Argument #1: USB Mouse Button (16 bit)
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    47ee:	b570      	push	{r4, r5, r6, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    47f0:	d106      	bne.n	4800 <Output_usbMouse_capability+0x14>
    47f2:	29ff      	cmp	r1, #255	; 0xff
    47f4:	d104      	bne.n	4800 <Output_usbMouse_capability+0x14>
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    47f6:	4819      	ldr	r0, [pc, #100]	; (485c <Output_usbMouse_capability+0x70>)
	if ( mouse_button )
		USBMouse_Changed |= USBMouseChangeState_Buttons;

	if ( mouse_x || mouse_y )
		USBMouse_Changed |= USBMouseChangeState_Relative;
}
    47f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    47fc:	f001 be92 	b.w	6524 <_print>
	// The USB spec defines up to a max of 0xFFFF buttons
	// The usual are:
	// 1 - Button 1 - (Primary)
	// 2 - Button 2 - (Secondary)
	// 3 - Button 3 - (Tertiary)
	uint16_t mouse_button = *(uint16_t*)(&args[0]);
    4800:	8818      	ldrh	r0, [r3, #0]

	// X/Y Relative Axis
	uint16_t mouse_x = *(uint16_t*)(&args[2]);
    4802:	885e      	ldrh	r6, [r3, #2]
	uint16_t mouse_y = *(uint16_t*)(&args[4]);
    4804:	889d      	ldrh	r5, [r3, #4]

	// Adjust for bit shift
	uint16_t mouse_button_shift = mouse_button - 1;
    4806:	1e44      	subs	r4, r0, #1
    4808:	b2a4      	uxth	r4, r4

	// Only send mouse button if in press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    480a:	b95a      	cbnz	r2, 4824 <Output_usbMouse_capability+0x38>
    480c:	2903      	cmp	r1, #3
    480e:	d109      	bne.n	4824 <Output_usbMouse_capability+0x38>
	{
		// Release
		if ( mouse_button )
    4810:	b1e0      	cbz	r0, 484c <Output_usbMouse_capability+0x60>
			USBMouse_Buttons &= ~(1 << mouse_button_shift);
    4812:	4913      	ldr	r1, [pc, #76]	; (4860 <Output_usbMouse_capability+0x74>)
    4814:	880b      	ldrh	r3, [r1, #0]
    4816:	b29a      	uxth	r2, r3
    4818:	2301      	movs	r3, #1
    481a:	40a3      	lsls	r3, r4
    481c:	ea22 0303 	bic.w	r3, r2, r3
    4820:	800b      	strh	r3, [r1, #0]
    4822:	e00e      	b.n	4842 <Output_usbMouse_capability+0x56>
	}
	else
	{
		// Press or hold
		if ( mouse_button )
    4824:	b130      	cbz	r0, 4834 <Output_usbMouse_capability+0x48>
			USBMouse_Buttons |= (1 << mouse_button_shift);
    4826:	490e      	ldr	r1, [pc, #56]	; (4860 <Output_usbMouse_capability+0x74>)
    4828:	2301      	movs	r3, #1
    482a:	880a      	ldrh	r2, [r1, #0]
    482c:	40a3      	lsls	r3, r4
    482e:	4313      	orrs	r3, r2
    4830:	b29b      	uxth	r3, r3
    4832:	800b      	strh	r3, [r1, #0]

		if ( mouse_x )
    4834:	b10e      	cbz	r6, 483a <Output_usbMouse_capability+0x4e>
			USBMouse_Relative_x = mouse_x;
    4836:	4b0b      	ldr	r3, [pc, #44]	; (4864 <Output_usbMouse_capability+0x78>)
    4838:	801e      	strh	r6, [r3, #0]
		if ( mouse_y )
    483a:	b10d      	cbz	r5, 4840 <Output_usbMouse_capability+0x54>
			USBMouse_Relative_y = mouse_y;
    483c:	4b0a      	ldr	r3, [pc, #40]	; (4868 <Output_usbMouse_capability+0x7c>)
    483e:	801d      	strh	r5, [r3, #0]
	}

	// Trigger updates
	if ( mouse_button )
    4840:	b120      	cbz	r0, 484c <Output_usbMouse_capability+0x60>
		USBMouse_Changed |= USBMouseChangeState_Buttons;
    4842:	4a0a      	ldr	r2, [pc, #40]	; (486c <Output_usbMouse_capability+0x80>)
    4844:	7813      	ldrb	r3, [r2, #0]
    4846:	f043 0301 	orr.w	r3, r3, #1
    484a:	7013      	strb	r3, [r2, #0]

	if ( mouse_x || mouse_y )
    484c:	b906      	cbnz	r6, 4850 <Output_usbMouse_capability+0x64>
    484e:	b125      	cbz	r5, 485a <Output_usbMouse_capability+0x6e>
		USBMouse_Changed |= USBMouseChangeState_Relative;
    4850:	4a06      	ldr	r2, [pc, #24]	; (486c <Output_usbMouse_capability+0x80>)
    4852:	7813      	ldrb	r3, [r2, #0]
    4854:	f043 0302 	orr.w	r3, r3, #2
    4858:	7013      	strb	r3, [r2, #0]
    485a:	bd70      	pop	{r4, r5, r6, pc}
    485c:	00008c89 	.word	0x00008c89
    4860:	1fff90ee 	.word	0x1fff90ee
    4864:	1fff90f8 	.word	0x1fff90f8
    4868:	1fff90fa 	.word	0x1fff90fa
    486c:	1fff90f4 	.word	0x1fff90f4

00004870 <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    4870:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    4872:	4908      	ldr	r1, [pc, #32]	; (4894 <Output_flushBuffers+0x24>)
    4874:	2300      	movs	r3, #0
    4876:	5453      	strb	r3, [r2, r1]
    4878:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    487a:	2a1b      	cmp	r2, #27
    487c:	d1f9      	bne.n	4872 <Output_flushBuffers+0x2>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    487e:	4a06      	ldr	r2, [pc, #24]	; (4898 <Output_flushBuffers+0x28>)
    4880:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    4882:	4a06      	ldr	r2, [pc, #24]	; (489c <Output_flushBuffers+0x2c>)
    4884:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    4886:	4a06      	ldr	r2, [pc, #24]	; (48a0 <Output_flushBuffers+0x30>)
    4888:	7013      	strb	r3, [r2, #0]

	// Reset USBKeys_Keys size
	USBKeys_Sent = 0;
    488a:	4a06      	ldr	r2, [pc, #24]	; (48a4 <Output_flushBuffers+0x34>)
    488c:	7013      	strb	r3, [r2, #0]
	USBKeys_SentCLI = 0;
    488e:	4a06      	ldr	r2, [pc, #24]	; (48a8 <Output_flushBuffers+0x38>)
    4890:	7013      	strb	r3, [r2, #0]
    4892:	4770      	bx	lr
    4894:	1fffa244 	.word	0x1fffa244
    4898:	1fffa280 	.word	0x1fffa280
    489c:	1fff90f0 	.word	0x1fff90f0
    48a0:	1fffa240 	.word	0x1fffa240
    48a4:	1fffa25f 	.word	0x1fffa25f
    48a8:	1fffa238 	.word	0x1fffa238

000048ac <Output_kbdProtocolBoot_capability>:
// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    48ac:	2aff      	cmp	r2, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    48ae:	b510      	push	{r4, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    48b0:	d106      	bne.n	48c0 <Output_kbdProtocolBoot_capability+0x14>
    48b2:	29ff      	cmp	r1, #255	; 0xff
    48b4:	d104      	bne.n	48c0 <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    48b6:	4807      	ldr	r0, [pc, #28]	; (48d4 <Output_kbdProtocolBoot_capability+0x28>)
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
#endif
}
    48b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    48bc:	f001 be32 	b.w	6524 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    48c0:	4c05      	ldr	r4, [pc, #20]	; (48d8 <Output_kbdProtocolBoot_capability+0x2c>)
    48c2:	7823      	ldrb	r3, [r4, #0]
    48c4:	b12b      	cbz	r3, 48d2 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    48c6:	2a01      	cmp	r2, #1
    48c8:	d103      	bne.n	48d2 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    48ca:	f7ff ffd1 	bl	4870 <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    48ce:	2300      	movs	r3, #0
    48d0:	7023      	strb	r3, [r4, #0]
    48d2:	bd10      	pop	{r4, pc}
    48d4:	00008cb0 	.word	0x00008cb0
    48d8:	1fff8c44 	.word	0x1fff8c44

000048dc <Output_kbdProtocolNKRO_capability>:
// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    48dc:	2aff      	cmp	r2, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    48de:	b538      	push	{r3, r4, r5, lr}
    48e0:	4614      	mov	r4, r2
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    48e2:	d106      	bne.n	48f2 <Output_kbdProtocolNKRO_capability+0x16>
    48e4:	29ff      	cmp	r1, #255	; 0xff
    48e6:	d104      	bne.n	48f2 <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    48e8:	4807      	ldr	r0, [pc, #28]	; (4908 <Output_kbdProtocolNKRO_capability+0x2c>)
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
#endif
}
    48ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    48ee:	f001 be19 	b.w	6524 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    48f2:	4d06      	ldr	r5, [pc, #24]	; (490c <Output_kbdProtocolNKRO_capability+0x30>)
    48f4:	782b      	ldrb	r3, [r5, #0]
    48f6:	2b01      	cmp	r3, #1
    48f8:	d004      	beq.n	4904 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    48fa:	2c01      	cmp	r4, #1
    48fc:	d102      	bne.n	4904 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    48fe:	f7ff ffb7 	bl	4870 <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    4902:	702c      	strb	r4, [r5, #0]
    4904:	bd38      	pop	{r3, r4, r5, pc}
    4906:	bf00      	nop
    4908:	00008cc9 	.word	0x00008cc9
    490c:	1fff8c44 	.word	0x1fff8c44

00004910 <Output_toggleKbdProtocol_capability>:
// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4910:	2aff      	cmp	r2, #255	; 0xff
}


// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    4912:	b508      	push	{r3, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4914:	d106      	bne.n	4924 <Output_toggleKbdProtocol_capability+0x14>
    4916:	29ff      	cmp	r1, #255	; 0xff
    4918:	d10f      	bne.n	493a <Output_toggleKbdProtocol_capability+0x2a>
	{
		print("Output_toggleKbdProtocol()");
    491a:	4808      	ldr	r0, [pc, #32]	; (493c <Output_toggleKbdProtocol_capability+0x2c>)

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
	}
#endif
}
    491c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_toggleKbdProtocol()");
    4920:	f001 be00 	b.w	6524 <_print>
		return;
	}

	// Only toggle protocol if release state
	if ( stateType == 0x00 && state == 0x03 )
    4924:	b94a      	cbnz	r2, 493a <Output_toggleKbdProtocol_capability+0x2a>
    4926:	2903      	cmp	r1, #3
    4928:	d107      	bne.n	493a <Output_toggleKbdProtocol_capability+0x2a>
	{
		// Flush the key buffers
		Output_flushBuffers();
    492a:	f7ff ffa1 	bl	4870 <Output_flushBuffers>

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
    492e:	4a04      	ldr	r2, [pc, #16]	; (4940 <Output_toggleKbdProtocol_capability+0x30>)
    4930:	7813      	ldrb	r3, [r2, #0]
    4932:	fab3 f383 	clz	r3, r3
    4936:	095b      	lsrs	r3, r3, #5
    4938:	7013      	strb	r3, [r2, #0]
    493a:	bd08      	pop	{r3, pc}
    493c:	00008ce2 	.word	0x00008ce2
    4940:	1fff8c44 	.word	0x1fff8c44

00004944 <Output_usbCodeSend_capability>:
// Argument #1: USB Code
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4944:	2aff      	cmp	r2, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    4946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4948:	d103      	bne.n	4952 <Output_usbCodeSend_capability+0xe>
    494a:	29ff      	cmp	r1, #255	; 0xff
    494c:	d109      	bne.n	4962 <Output_usbCodeSend_capability+0x1e>
	{
		print("Output_usbCodeSend(usbCode)");
    494e:	486b      	ldr	r0, [pc, #428]	; (4afc <Output_usbCodeSend_capability+0x1b8>)
    4950:	e0bc      	b.n	4acc <Output_usbCodeSend_capability+0x188>

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release

	// Only send press and release events
	if ( stateType == 0x00 && state == 0x02 ) // Hold state
    4952:	b932      	cbnz	r2, 4962 <Output_usbCodeSend_capability+0x1e>
    4954:	2902      	cmp	r1, #2
    4956:	f000 80cf 	beq.w	4af8 <Output_usbCodeSend_capability+0x1b4>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release
    495a:	3901      	subs	r1, #1
    495c:	424a      	negs	r2, r1
    495e:	414a      	adcs	r2, r1
    4960:	e000      	b.n	4964 <Output_usbCodeSend_capability+0x20>
    4962:	2200      	movs	r2, #0
	// If press, send bit (NKRO) or byte (6KRO)
	if ( stateType == 0x00 && state == 0x01 ) // Press state
		keyPress = 1;

	// Get the keycode from arguments
	uint8_t key = args[0];
    4964:	781c      	ldrb	r4, [r3, #0]
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;

	switch ( USBKeys_Protocol )
    4966:	4b66      	ldr	r3, [pc, #408]	; (4b00 <Output_usbCodeSend_capability+0x1bc>)
    4968:	781b      	ldrb	r3, [r3, #0]
    496a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    496e:	b113      	cbz	r3, 4976 <Output_usbCodeSend_capability+0x32>
    4970:	2d01      	cmp	r5, #1
    4972:	d044      	beq.n	49fe <Output_usbCodeSend_capability+0xba>
    4974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    4976:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    497a:	2be0      	cmp	r3, #224	; 0xe0
    497c:	d10d      	bne.n	499a <Output_usbCodeSend_capability+0x56>
    497e:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    4982:	2301      	movs	r3, #1
    4984:	495f      	ldr	r1, [pc, #380]	; (4b04 <Output_usbCodeSend_capability+0x1c0>)
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    4986:	40a3      	lsls	r3, r4
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    4988:	b112      	cbz	r2, 4990 <Output_usbCodeSend_capability+0x4c>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    498a:	780a      	ldrb	r2, [r1, #0]
    498c:	4313      	orrs	r3, r2
    498e:	e002      	b.n	4996 <Output_usbCodeSend_capability+0x52>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    4990:	780a      	ldrb	r2, [r1, #0]
    4992:	ea22 0303 	bic.w	r3, r2, r3
    4996:	700b      	strb	r3, [r1, #0]
    4998:	e042      	b.n	4a20 <Output_usbCodeSend_capability+0xdc>
		// Normal USB Code
		else
		{
			// Determine if key was set
			uint8_t keyFound = 0;
			uint8_t old_sent = USBKeys_Sent;
    499a:	485b      	ldr	r0, [pc, #364]	; (4b08 <Output_usbCodeSend_capability+0x1c4>)
    499c:	7806      	ldrb	r6, [r0, #0]

			for ( uint8_t curkey = 0, newkey = 0; curkey < old_sent; curkey++, newkey++ )
    499e:	4629      	mov	r1, r5
    49a0:	b2cb      	uxtb	r3, r1
    49a2:	42b3      	cmp	r3, r6
    49a4:	d214      	bcs.n	49d0 <Output_usbCodeSend_capability+0x8c>
    49a6:	4d59      	ldr	r5, [pc, #356]	; (4b0c <Output_usbCodeSend_capability+0x1c8>)
			{
				// On press, key already present, don't re-add
				if ( keyPress && USBKeys_Keys[newkey] == key )
    49a8:	b11a      	cbz	r2, 49b2 <Output_usbCodeSend_capability+0x6e>
    49aa:	5c6b      	ldrb	r3, [r5, r1]
    49ac:	42a3      	cmp	r3, r4
    49ae:	d10d      	bne.n	49cc <Output_usbCodeSend_capability+0x88>
    49b0:	e010      	b.n	49d4 <Output_usbCodeSend_capability+0x90>
					keyFound = 1;
					break;
				}

				// On release, remove if found
				if ( !keyPress && USBKeys_Keys[newkey] == key )
    49b2:	5c6f      	ldrb	r7, [r5, r1]
    49b4:	42a7      	cmp	r7, r4
    49b6:	d109      	bne.n	49cc <Output_usbCodeSend_capability+0x88>
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
    49b8:	3301      	adds	r3, #1
    49ba:	b2db      	uxtb	r3, r3
					USBKeys_Sent--;
    49bc:	3e01      	subs	r6, #1
				// On release, remove if found
				if ( !keyPress && USBKeys_Keys[newkey] == key )
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
    49be:	5ceb      	ldrb	r3, [r5, r3]
    49c0:	546b      	strb	r3, [r5, r1]
					USBKeys_Sent--;
					keyFound = 1;
					USBKeys_Changed = USBKeyChangeState_MainKeys;
    49c2:	4b53      	ldr	r3, [pc, #332]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
				if ( !keyPress && USBKeys_Keys[newkey] == key )
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
					USBKeys_Sent--;
    49c4:	7006      	strb	r6, [r0, #0]
					keyFound = 1;
					USBKeys_Changed = USBKeyChangeState_MainKeys;
    49c6:	2102      	movs	r1, #2
    49c8:	7019      	strb	r1, [r3, #0]
    49ca:	e003      	b.n	49d4 <Output_usbCodeSend_capability+0x90>
    49cc:	3101      	adds	r1, #1
    49ce:	e7e7      	b.n	49a0 <Output_usbCodeSend_capability+0x5c>
		}
		// Normal USB Code
		else
		{
			// Determine if key was set
			uint8_t keyFound = 0;
    49d0:	2100      	movs	r1, #0
    49d2:	e000      	b.n	49d6 <Output_usbCodeSend_capability+0x92>
			for ( uint8_t curkey = 0, newkey = 0; curkey < old_sent; curkey++, newkey++ )
			{
				// On press, key already present, don't re-add
				if ( keyPress && USBKeys_Keys[newkey] == key )
				{
					keyFound = 1;
    49d4:	2101      	movs	r1, #1
					break;
				}
			}

			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    49d6:	7803      	ldrb	r3, [r0, #0]
    49d8:	2b05      	cmp	r3, #5
    49da:	d901      	bls.n	49e0 <Output_usbCodeSend_capability+0x9c>
			{
				warn_print("USB Key limit reached");
    49dc:	484d      	ldr	r0, [pc, #308]	; (4b14 <Output_usbCodeSend_capability+0x1d0>)
    49de:	e075      	b.n	4acc <Output_usbCodeSend_capability+0x188>
				break;
			}

			// Add key if not already found in the buffer
			if ( keyPress && !keyFound )
    49e0:	2a00      	cmp	r2, #0
    49e2:	f000 8089 	beq.w	4af8 <Output_usbCodeSend_capability+0x1b4>
    49e6:	2900      	cmp	r1, #0
    49e8:	f040 8086 	bne.w	4af8 <Output_usbCodeSend_capability+0x1b4>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    49ec:	4a46      	ldr	r2, [pc, #280]	; (4b08 <Output_usbCodeSend_capability+0x1c4>)
    49ee:	1c59      	adds	r1, r3, #1
    49f0:	7011      	strb	r1, [r2, #0]
    49f2:	4a46      	ldr	r2, [pc, #280]	; (4b0c <Output_usbCodeSend_capability+0x1c8>)
    49f4:	54d4      	strb	r4, [r2, r3]
				USBKeys_Changed = USBKeyChangeState_MainKeys;
    49f6:	4b46      	ldr	r3, [pc, #280]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    49f8:	2202      	movs	r2, #2
    49fa:	701a      	strb	r2, [r3, #0]
    49fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    49fe:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    4a02:	2be0      	cmp	r3, #224	; 0xe0
    4a04:	d112      	bne.n	4a2c <Output_usbCodeSend_capability+0xe8>
    4a06:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    4a0a:	4b3e      	ldr	r3, [pc, #248]	; (4b04 <Output_usbCodeSend_capability+0x1c0>)
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    4a0c:	fa05 f104 	lsl.w	r1, r5, r4

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    4a10:	b112      	cbz	r2, 4a18 <Output_usbCodeSend_capability+0xd4>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    4a12:	781a      	ldrb	r2, [r3, #0]
    4a14:	4311      	orrs	r1, r2
    4a16:	e002      	b.n	4a1e <Output_usbCodeSend_capability+0xda>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    4a18:	781a      	ldrb	r2, [r3, #0]
    4a1a:	ea22 0101 	bic.w	r1, r2, r1
    4a1e:	7019      	strb	r1, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    4a20:	4a3b      	ldr	r2, [pc, #236]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4a22:	7813      	ldrb	r3, [r2, #0]
    4a24:	f043 0301 	orr.w	r3, r3, #1
    4a28:	7013      	strb	r3, [r2, #0]
			break;
    4a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    4a2c:	1f23      	subs	r3, r4, #4
    4a2e:	2b2d      	cmp	r3, #45	; 0x2d
    4a30:	d80f      	bhi.n	4a52 <Output_usbCodeSend_capability+0x10e>
    4a32:	3c05      	subs	r4, #5
    4a34:	b2e4      	uxtb	r4, r4
    4a36:	2c2e      	cmp	r4, #46	; 0x2e
    4a38:	bf9f      	itttt	ls
    4a3a:	4b37      	ldrls	r3, [pc, #220]	; (4b18 <Output_usbCodeSend_capability+0x1d4>)
    4a3c:	5d19      	ldrbls	r1, [r3, r4]
    4a3e:	4b37      	ldrls	r3, [pc, #220]	; (4b1c <Output_usbCodeSend_capability+0x1d8>)
    4a40:	5d18      	ldrbls	r0, [r3, r4]
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    4a42:	4c33      	ldr	r4, [pc, #204]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4a44:	7823      	ldrb	r3, [r4, #0]

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
			break;
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    4a46:	bf84      	itt	hi
    4a48:	2000      	movhi	r0, #0
    4a4a:	4601      	movhi	r1, r0
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    4a4c:	f043 0302 	orr.w	r3, r3, #2
    4a50:	e00c      	b.n	4a6c <Output_usbCodeSend_capability+0x128>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    4a52:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
    4a56:	b2db      	uxtb	r3, r3
    4a58:	2b68      	cmp	r3, #104	; 0x68
    4a5a:	d809      	bhi.n	4a70 <Output_usbCodeSend_capability+0x12c>
    4a5c:	4930      	ldr	r1, [pc, #192]	; (4b20 <Output_usbCodeSend_capability+0x1dc>)
    4a5e:	4831      	ldr	r0, [pc, #196]	; (4b24 <Output_usbCodeSend_capability+0x1e0>)
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    4a60:	4c2b      	ldr	r4, [pc, #172]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4a62:	5cc9      	ldrb	r1, [r1, r3]
    4a64:	5cc0      	ldrb	r0, [r0, r3]
    4a66:	7823      	ldrb	r3, [r4, #0]
    4a68:	f043 0304 	orr.w	r3, r3, #4
    4a6c:	7023      	strb	r3, [r4, #0]
    4a6e:	e031      	b.n	4ad4 <Output_usbCodeSend_capability+0x190>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    4a70:	f104 0363 	add.w	r3, r4, #99	; 0x63
    4a74:	b2db      	uxtb	r3, r3
    4a76:	2b07      	cmp	r3, #7
    4a78:	d808      	bhi.n	4a8c <Output_usbCodeSend_capability+0x148>
    4a7a:	492b      	ldr	r1, [pc, #172]	; (4b28 <Output_usbCodeSend_capability+0x1e4>)
    4a7c:	5cc8      	ldrb	r0, [r1, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    4a7e:	4924      	ldr	r1, [pc, #144]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4a80:	780b      	ldrb	r3, [r1, #0]
    4a82:	f043 0308 	orr.w	r3, r3, #8
    4a86:	700b      	strb	r3, [r1, #0]
    4a88:	2114      	movs	r1, #20
    4a8a:	e023      	b.n	4ad4 <Output_usbCodeSend_capability+0x190>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    4a8c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4a90:	b2db      	uxtb	r3, r3
    4a92:	2b2d      	cmp	r3, #45	; 0x2d
    4a94:	d808      	bhi.n	4aa8 <Output_usbCodeSend_capability+0x164>
    4a96:	4925      	ldr	r1, [pc, #148]	; (4b2c <Output_usbCodeSend_capability+0x1e8>)
    4a98:	4825      	ldr	r0, [pc, #148]	; (4b30 <Output_usbCodeSend_capability+0x1ec>)
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    4a9a:	4c1d      	ldr	r4, [pc, #116]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4a9c:	5cc9      	ldrb	r1, [r1, r3]
    4a9e:	5cc0      	ldrb	r0, [r0, r3]
    4aa0:	7823      	ldrb	r3, [r4, #0]
    4aa2:	f043 0310 	orr.w	r3, r3, #16
    4aa6:	e7e1      	b.n	4a6c <Output_usbCodeSend_capability+0x128>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    4aa8:	b944      	cbnz	r4, 4abc <Output_usbCodeSend_capability+0x178>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    4aaa:	4a19      	ldr	r2, [pc, #100]	; (4b10 <Output_usbCodeSend_capability+0x1cc>)
    4aac:	7813      	ldrb	r3, [r2, #0]
    4aae:	f043 0302 	orr.w	r3, r3, #2
    4ab2:	7013      	strb	r3, [r2, #0]
		}

		break;
	}
#endif
}
    4ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;

			// Also flush out buffers just in case
			Output_flushBuffers();
    4ab8:	f7ff beda 	b.w	4870 <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    4abc:	481d      	ldr	r0, [pc, #116]	; (4b34 <Output_usbCodeSend_capability+0x1f0>)
    4abe:	f001 fd31 	bl	6524 <_print>
			printHex( key );
    4ac2:	4620      	mov	r0, r4
    4ac4:	4629      	mov	r1, r5
    4ac6:	f001 fdcf 	bl	6668 <printHex_op>
			print( NL );
    4aca:	481b      	ldr	r0, [pc, #108]	; (4b38 <Output_usbCodeSend_capability+0x1f4>)
		}

		break;
	}
#endif
}
    4acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    4ad0:	f001 bd28 	b.w	6524 <_print>
    4ad4:	2301      	movs	r3, #1
    4ad6:	4c0c      	ldr	r4, [pc, #48]	; (4b08 <Output_usbCodeSend_capability+0x1c4>)
    4ad8:	4d0c      	ldr	r5, [pc, #48]	; (4b0c <Output_usbCodeSend_capability+0x1c8>)
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    4ada:	4083      	lsls	r3, r0
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    4adc:	b12a      	cbz	r2, 4aea <Output_usbCodeSend_capability+0x1a6>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    4ade:	5c6a      	ldrb	r2, [r5, r1]
    4ae0:	4313      	orrs	r3, r2
    4ae2:	546b      	strb	r3, [r5, r1]
			USBKeys_Sent--;
    4ae4:	7823      	ldrb	r3, [r4, #0]
    4ae6:	3b01      	subs	r3, #1
    4ae8:	e005      	b.n	4af6 <Output_usbCodeSend_capability+0x1b2>
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    4aea:	5c6a      	ldrb	r2, [r5, r1]
    4aec:	ea22 0303 	bic.w	r3, r2, r3
    4af0:	546b      	strb	r3, [r5, r1]
			USBKeys_Sent++;
    4af2:	7823      	ldrb	r3, [r4, #0]
    4af4:	3301      	adds	r3, #1
    4af6:	7023      	strb	r3, [r4, #0]
    4af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4afa:	bf00      	nop
    4afc:	00008cfd 	.word	0x00008cfd
    4b00:	1fff8c44 	.word	0x1fff8c44
    4b04:	1fff90f0 	.word	0x1fff90f0
    4b08:	1fffa25f 	.word	0x1fffa25f
    4b0c:	1fffa244 	.word	0x1fffa244
    4b10:	1fff90f1 	.word	0x1fff90f1
    4b14:	00008d19 	.word	0x00008d19
    4b18:	00008a78 	.word	0x00008a78
    4b1c:	00008f6d 	.word	0x00008f6d
    4b20:	00008ebd 	.word	0x00008ebd
    4b24:	00008a08 	.word	0x00008a08
    4b28:	00008eb5 	.word	0x00008eb5
    4b2c:	00008f9c 	.word	0x00008f9c
    4b30:	00008fcc 	.word	0x00008fcc
    4b34:	00008d46 	.word	0x00008d46
    4b38:	000092ee 	.word	0x000092ee

00004b3c <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    4b3c:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    4b3e:	f000 fdd5 	bl	56ec <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    4b42:	4804      	ldr	r0, [pc, #16]	; (4b54 <Output_setup+0x18>)
    4b44:	4904      	ldr	r1, [pc, #16]	; (4b58 <Output_setup+0x1c>)
    4b46:	f001 fa99 	bl	607c <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    4b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    4b4e:	f7ff be8f 	b.w	4870 <Output_flushBuffers>
    4b52:	bf00      	nop
    4b54:	00008ac4 	.word	0x00008ac4
    4b58:	000089f4 	.word	0x000089f4

00004b5c <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    4b5c:	b510      	push	{r4, lr}
	// USB status checks
	// Non-standard USB state manipulation, usually does nothing
	usb_device_check();
    4b5e:	f000 f88f 	bl	4c80 <usb_device_check>
	}
	*/

#if enableMouse_define == 1
	// Process mouse actions
	while ( USBMouse_Changed )
    4b62:	4b16      	ldr	r3, [pc, #88]	; (4bbc <Output_send+0x60>)
    4b64:	781b      	ldrb	r3, [r3, #0]
    4b66:	b113      	cbz	r3, 4b6e <Output_send+0x12>
		usb_mouse_send();
    4b68:	f000 fff8 	bl	5b5c <usb_mouse_send>
    4b6c:	e7f9      	b.n	4b62 <Output_send+0x6>
#endif

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    4b6e:	4b14      	ldr	r3, [pc, #80]	; (4bc0 <Output_send+0x64>)
    4b70:	781a      	ldrb	r2, [r3, #0]
    4b72:	461c      	mov	r4, r3
    4b74:	b94a      	cbnz	r2, 4b8a <Output_send+0x2e>
	{
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    4b76:	4b13      	ldr	r3, [pc, #76]	; (4bc4 <Output_send+0x68>)
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b05      	cmp	r3, #5
    4b7c:	d805      	bhi.n	4b8a <Output_send+0x2e>
		{
			USBKeys_Keys[c] = 0;
    4b7e:	4a12      	ldr	r2, [pc, #72]	; (4bc8 <Output_send+0x6c>)
    4b80:	2100      	movs	r1, #0
    4b82:	54d1      	strb	r1, [r2, r3]

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
	{
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    4b84:	3301      	adds	r3, #1
    4b86:	b2db      	uxtb	r3, r3
    4b88:	e7f7      	b.n	4b7a <Output_send+0x1e>
			USBKeys_Keys[c] = 0;
		}
	}

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    4b8a:	4b10      	ldr	r3, [pc, #64]	; (4bcc <Output_send+0x70>)
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	b113      	cbz	r3, 4b96 <Output_send+0x3a>
		usb_keyboard_send();
    4b90:	f000 fe3a 	bl	5808 <usb_keyboard_send>
    4b94:	e7f9      	b.n	4b8a <Output_send+0x2e>

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    4b96:	7823      	ldrb	r3, [r4, #0]
    4b98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4b9c:	b113      	cbz	r3, 4ba4 <Output_send+0x48>
    4b9e:	2a01      	cmp	r2, #1
    4ba0:	d006      	beq.n	4bb0 <Output_send+0x54>
    4ba2:	bd10      	pop	{r4, pc}
	{
	case 0: // Boot Mode
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
    4ba4:	4b07      	ldr	r3, [pc, #28]	; (4bc4 <Output_send+0x68>)
    4ba6:	7818      	ldrb	r0, [r3, #0]
    4ba8:	2806      	cmp	r0, #6
    4baa:	bf28      	it	cs
    4bac:	2006      	movcs	r0, #6
    4bae:	e001      	b.n	4bb4 <Output_send+0x58>
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    4bb0:	4b04      	ldr	r3, [pc, #16]	; (4bc4 <Output_send+0x68>)
    4bb2:	7818      	ldrb	r0, [r3, #0]
		break;
	}
#endif
}
    4bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{
	case 0: // Boot Mode
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    4bb8:	f7fe bc70 	b.w	349c <Scan_finishedWithOutput>
    4bbc:	1fff90f4 	.word	0x1fff90f4
    4bc0:	1fff8c44 	.word	0x1fff8c44
    4bc4:	1fffa25f 	.word	0x1fffa25f
    4bc8:	1fffa244 	.word	0x1fffa244
    4bcc:	1fff90f1 	.word	0x1fff90f1

00004bd0 <Output_availablechar>:

// USB Input buffer available
inline unsigned int Output_availablechar()
{
#if enableVirtualSerialPort_define == 1
	return usb_serial_available();
    4bd0:	f001 b83e 	b.w	5c50 <usb_serial_available>

00004bd4 <Output_getchar>:
// USB Get Character from input buffer
inline int Output_getchar()
{
#if enableVirtualSerialPort_define == 1
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    4bd4:	f001 b816 	b.w	5c04 <usb_serial_getchar>

00004bd8 <Output_putstr>:
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    4bd8:	4603      	mov	r3, r0
    4bda:	1a19      	subs	r1, r3, r0
    4bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
    4be0:	2a00      	cmp	r2, #0
    4be2:	d1fa      	bne.n	4bda <Output_putstr+0x2>
		count++;

	return usb_serial_write( str, count );
    4be4:	f001 b842 	b.w	5c6c <usb_serial_write>

00004be8 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    4be8:	4b01      	ldr	r3, [pc, #4]	; (4bf0 <Output_softReset+0x8>)
    4bea:	4a02      	ldr	r2, [pc, #8]	; (4bf4 <Output_softReset+0xc>)
    4bec:	601a      	str	r2, [r3, #0]
    4bee:	4770      	bx	lr
    4bf0:	e000ed0c 	.word	0xe000ed0c
    4bf4:	05fa0004 	.word	0x05fa0004

00004bf8 <Output_current_available>:
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    4bf8:	4a03      	ldr	r2, [pc, #12]	; (4c08 <Output_current_available+0x10>)

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    4bfa:	4b04      	ldr	r3, [pc, #16]	; (4c0c <Output_current_available+0x14>)
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    4bfc:	8810      	ldrh	r0, [r2, #0]

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    4bfe:	881b      	ldrh	r3, [r3, #0]

	// XXX If the total available current is still 0
	// Set to 100 mA, which is generally a safe assumption at startup
	// before we've been able to determine actual available current
	if ( total_current == 0 )
    4c00:	1818      	adds	r0, r3, r0
	{
		total_current = 100;
	}

	return total_current;
}
    4c02:	bf08      	it	eq
    4c04:	2064      	moveq	r0, #100	; 0x64
    4c06:	4770      	bx	lr
    4c08:	1fff90f2 	.word	0x1fff90f2
    4c0c:	1fff90f6 	.word	0x1fff90f6

00004c10 <Output_update_usb_current>:


// Update USB current (mA)
// Triggers power change event
void Output_update_usb_current( unsigned int current )
{
    4c10:	b508      	push	{r3, lr}
	// Only signal if changed
	if ( current == Output_USBCurrent_Available )
    4c12:	4b06      	ldr	r3, [pc, #24]	; (4c2c <Output_update_usb_current+0x1c>)
    4c14:	881a      	ldrh	r2, [r3, #0]
    4c16:	4290      	cmp	r0, r2
    4c18:	d006      	beq.n	4c28 <Output_update_usb_current+0x18>
		return;

	// Update USB current
	Output_USBCurrent_Available = current;
    4c1a:	8018      	strh	r0, [r3, #0]
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    4c1c:	f7ff ffec 	bl	4bf8 <Output_current_available>
}
    4c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    4c24:	f7fe bc40 	b.w	34a8 <Scan_currentChange>
    4c28:	bd08      	pop	{r3, pc}
    4c2a:	bf00      	nop
    4c2c:	1fff90f2 	.word	0x1fff90f2

00004c30 <usb_set_config_descriptor_size>:
};

// Simplifies defines for USB descriptors
void usb_set_config_descriptor_size()
{
	config_descriptor[2] = LSB( sizeof( config_descriptor ) );
    4c30:	4b02      	ldr	r3, [pc, #8]	; (4c3c <usb_set_config_descriptor_size+0xc>)
    4c32:	22af      	movs	r2, #175	; 0xaf
    4c34:	709a      	strb	r2, [r3, #2]
	config_descriptor[3] = MSB( sizeof( config_descriptor ) );
    4c36:	2200      	movs	r2, #0
    4c38:	70da      	strb	r2, [r3, #3]
    4c3a:	4770      	bx	lr
    4c3c:	1fff8d24 	.word	0x1fff8d24

00004c40 <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    4c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c42:	4c0c      	ldr	r4, [pc, #48]	; (4c74 <endpoint0_transmit+0x34>)
    4c44:	4e0c      	ldr	r6, [pc, #48]	; (4c78 <endpoint0_transmit+0x38>)
    4c46:	7823      	ldrb	r3, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c48:	4d0c      	ldr	r5, [pc, #48]	; (4c7c <endpoint0_transmit+0x3c>)
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c4a:	f043 0702 	orr.w	r7, r3, #2
    4c4e:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4c52:	f083 0301 	eor.w	r3, r3, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c56:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c58:	782a      	ldrb	r2, [r5, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4c5a:	7023      	strb	r3, [r4, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c5c:	2a00      	cmp	r2, #0
    4c5e:	bf14      	ite	ne
    4c60:	20c8      	movne	r0, #200	; 0xc8
    4c62:	2088      	moveq	r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4c64:	f082 0201 	eor.w	r2, r2, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    4c6c:	702a      	strb	r2, [r5, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c6e:	f846 1037 	str.w	r1, [r6, r7, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c74:	1fff91b0 	.word	0x1fff91b0
    4c78:	1fff8000 	.word	0x1fff8000
    4c7c:	1fff925b 	.word	0x1fff925b

00004c80 <usb_device_check>:
// Called once per scan loop, should take minimal processing time or it may affect other modules
void usb_device_check()
{
	// Check to see if we're still waiting for the next USB request after Get Configuration Descriptor
	// If still waiting, restart the USB initialization with a lower power requirement
	if ( power_neg_delay )
    4c80:	4a07      	ldr	r2, [pc, #28]	; (4ca0 <usb_device_check+0x20>)
    4c82:	7813      	ldrb	r3, [r2, #0]
    4c84:	b15b      	cbz	r3, 4c9e <usb_device_check+0x1e>
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
    4c86:	4b07      	ldr	r3, [pc, #28]	; (4ca4 <usb_device_check+0x24>)
    4c88:	4907      	ldr	r1, [pc, #28]	; (4ca8 <usb_device_check+0x28>)
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	6809      	ldr	r1, [r1, #0]
    4c8e:	1a5b      	subs	r3, r3, r1
    4c90:	2b64      	cmp	r3, #100	; 0x64
    4c92:	d904      	bls.n	4c9e <usb_device_check+0x1e>
		{
			power_neg_delay = 0;
    4c94:	2300      	movs	r3, #0
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    4c96:	4805      	ldr	r0, [pc, #20]	; (4cac <usb_device_check+0x2c>)
	if ( power_neg_delay )
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
		{
			power_neg_delay = 0;
    4c98:	7013      	strb	r3, [r2, #0]
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    4c9a:	f001 bc43 	b.w	6524 <_print>
    4c9e:	4770      	bx	lr
    4ca0:	1fff9142 	.word	0x1fff9142
    4ca4:	1fff8fec 	.word	0x1fff8fec
    4ca8:	1fff924c 	.word	0x1fff924c
    4cac:	00009154 	.word	0x00009154

00004cb0 <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    4cb0:	1e43      	subs	r3, r0, #1

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    4cb2:	2b09      	cmp	r3, #9
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    4cb4:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    4cb6:	d810      	bhi.n	4cda <usb_rx+0x2a>
	{
		return NULL;
	}

	__disable_irq();
    4cb8:	b672      	cpsid	i

	// Receive packet, check pointer
	ret = rx_first[endpoint];
    4cba:	4a09      	ldr	r2, [pc, #36]	; (4ce0 <usb_rx+0x30>)
    4cbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    4cc0:	b148      	cbz	r0, 4cd6 <usb_rx+0x26>
	{
		rx_first[ endpoint ] = ret->next;
    4cc2:	6841      	ldr	r1, [r0, #4]
    4cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[ endpoint ] -= ret->len;
    4cc8:	4906      	ldr	r1, [pc, #24]	; (4ce4 <usb_rx+0x34>)
    4cca:	8804      	ldrh	r4, [r0, #0]
    4ccc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    4cd0:	1b12      	subs	r2, r2, r4
    4cd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	__enable_irq();
    4cd6:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    4cd8:	bd10      	pop	{r4, pc}
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
	{
		return NULL;
    4cda:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4cdc:	bd10      	pop	{r4, pc}
    4cde:	bf00      	nop
    4ce0:	1fff9188 	.word	0x1fff9188
    4ce4:	1fffa282 	.word	0x1fffa282

00004ce8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4ce8:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    4cea:	2809      	cmp	r0, #9
    4cec:	d80a      	bhi.n	4d04 <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    4cee:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4cf0:	4b05      	ldr	r3, [pc, #20]	; (4d08 <usb_tx_packet_count+0x20>)
    4cf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    4cf6:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4cf8:	b113      	cbz	r3, 4d00 <usb_tx_packet_count+0x18>
		count++;
    4cfa:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4cfc:	685b      	ldr	r3, [r3, #4]
    4cfe:	e7fb      	b.n	4cf8 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    4d00:	b662      	cpsie	i
	return count;
    4d02:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    4d04:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    4d06:	4770      	bx	lr
    4d08:	1fff91f4 	.word	0x1fff91f4

00004d0c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    4d0c:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    4d0e:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    4d10:	2301      	movs	r3, #1
    4d12:	4a17      	ldr	r2, [pc, #92]	; (4d70 <usb_rx_memory+0x64>)
    4d14:	441a      	add	r2, r3
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    4d16:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    4d1a:	0712      	lsls	r2, r2, #28
    4d1c:	d51c      	bpl.n	4d58 <usb_rx_memory+0x4c>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    4d1e:	009a      	lsls	r2, r3, #2
    4d20:	4914      	ldr	r1, [pc, #80]	; (4d74 <usb_rx_memory+0x68>)
    4d22:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    4d26:	b92c      	cbnz	r4, 4d34 <usb_rx_memory+0x28>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    4d28:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    4d2c:	3008      	adds	r0, #8
    4d2e:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    4d30:	4b11      	ldr	r3, [pc, #68]	; (4d78 <usb_rx_memory+0x6c>)
    4d32:	e009      	b.n	4d48 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    4d34:	f042 0201 	orr.w	r2, r2, #1
    4d38:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    4d3c:	b964      	cbnz	r4, 4d58 <usb_rx_memory+0x4c>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    4d3e:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    4d42:	3008      	adds	r0, #8
    4d44:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    4d46:	4b0d      	ldr	r3, [pc, #52]	; (4d7c <usb_rx_memory+0x70>)
    4d48:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
				usb_rx_memory_needed--;
    4d4c:	4a0c      	ldr	r2, [pc, #48]	; (4d80 <usb_rx_memory+0x74>)
    4d4e:	7813      	ldrb	r3, [r2, #0]
    4d50:	3b01      	subs	r3, #1
    4d52:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    4d54:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    4d56:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    4d58:	3301      	adds	r3, #1
    4d5a:	2b0b      	cmp	r3, #11
    4d5c:	d1d9      	bne.n	4d12 <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4d5e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4d60:	4b07      	ldr	r3, [pc, #28]	; (4d80 <usb_rx_memory+0x74>)
    4d62:	2200      	movs	r2, #0
    4d64:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    4d6a:	f000 bed5 	b.w	5b18 <usb_free>
    4d6e:	bf00      	nop
    4d70:	00009033 	.word	0x00009033
    4d74:	1fff8000 	.word	0x1fff8000
    4d78:	00400088 	.word	0x00400088
    4d7c:	004000c8 	.word	0x004000c8
    4d80:	1fff9251 	.word	0x1fff9251

00004d84 <usb_resume>:
	return;
}

// Call whenever there's an action that may wake the host device
uint8_t usb_resume()
{
    4d84:	b538      	push	{r3, r4, r5, lr}
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    4d86:	4d0d      	ldr	r5, [pc, #52]	; (4dbc <usb_resume+0x38>)
    4d88:	7828      	ldrb	r0, [r5, #0]
    4d8a:	b1b0      	cbz	r0, 4dba <usb_resume+0x36>

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured()
{
	return usb_configuration;
    4d8c:	4b0c      	ldr	r3, [pc, #48]	; (4dc0 <usb_resume+0x3c>)
    4d8e:	781b      	ldrb	r3, [r3, #0]

// Call whenever there's an action that may wake the host device
uint8_t usb_resume()
{
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    4d90:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4d94:	b18b      	cbz	r3, 4dba <usb_resume+0x36>
		#if enableVirtualSerialPort_define != 1
		info_print("Attempting to resume the host");
		#endif
		// Force wake-up for 10 ms
		// According to the USB Spec a device must hold resume for at least 1 ms but no more than 15 ms
		USB0_CTL |= USB_CTL_RESUME;
    4d96:	4c0b      	ldr	r4, [pc, #44]	; (4dc4 <usb_resume+0x40>)
    4d98:	7823      	ldrb	r3, [r4, #0]
    4d9a:	f043 0304 	orr.w	r3, r3, #4
    4d9e:	7023      	strb	r3, [r4, #0]
		delay(10);
    4da0:	200a      	movs	r0, #10
    4da2:	f7fd fc19 	bl	25d8 <delay>
		USB0_CTL &= ~(USB_CTL_RESUME);
    4da6:	7823      	ldrb	r3, [r4, #0]
    4da8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    4dac:	7023      	strb	r3, [r4, #0]
		delay(50); // Wait for at least 50 ms to make sure the bus is clear
    4dae:	2032      	movs	r0, #50	; 0x32
    4db0:	f7fd fc12 	bl	25d8 <delay>
		usb_dev_sleep = 0; // Make sure we don't call this again, may crash system
    4db4:	2300      	movs	r3, #0
    4db6:	702b      	strb	r3, [r5, #0]
		#else
		warn_print("Host Resume Disabled");
		#endif

		return 1;
    4db8:	2001      	movs	r0, #1
	}

	return 0;
}
    4dba:	bd38      	pop	{r3, r4, r5, pc}
    4dbc:	1fff9250 	.word	0x1fff9250
    4dc0:	1fff925a 	.word	0x1fff925a
    4dc4:	40072094 	.word	0x40072094

00004dc8 <usb_tx>:

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4dc8:	b538      	push	{r3, r4, r5, lr}
	// Update expiry counter
	USBKeys_Idle_Expiry = systick_millis_count;
    4dca:	4b21      	ldr	r3, [pc, #132]	; (4e50 <usb_tx+0x88>)
    4dcc:	681a      	ldr	r2, [r3, #0]
    4dce:	4b21      	ldr	r3, [pc, #132]	; (4e54 <usb_tx+0x8c>)
    4dd0:	601a      	str	r2, [r3, #0]

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4dd2:	4b21      	ldr	r3, [pc, #132]	; (4e58 <usb_tx+0x90>)
    4dd4:	681b      	ldr	r3, [r3, #0]

	return 0;
}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4dd6:	4604      	mov	r4, r0
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4dd8:	7818      	ldrb	r0, [r3, #0]
    4dda:	0040      	lsls	r0, r0, #1

	return 0;
}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4ddc:	460d      	mov	r5, r1
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4dde:	f7ff ff17 	bl	4c10 <Output_update_usb_current>

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    4de2:	1e63      	subs	r3, r4, #1
	if ( endpoint >= NUM_ENDPOINTS )
    4de4:	2b09      	cmp	r3, #9
    4de6:	d832      	bhi.n	4e4e <usb_tx+0x86>
	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    4de8:	0164      	lsls	r4, r4, #5
    4dea:	481c      	ldr	r0, [pc, #112]	; (4e5c <usb_tx+0x94>)
    4dec:	f044 0410 	orr.w	r4, r4, #16
    4df0:	4420      	add	r0, r4
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    4df2:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    4df4:	4a1a      	ldr	r2, [pc, #104]	; (4e60 <usb_tx+0x98>)
    4df6:	5cd1      	ldrb	r1, [r2, r3]
    4df8:	2903      	cmp	r1, #3
    4dfa:	d80b      	bhi.n	4e14 <usb_tx+0x4c>
    4dfc:	e8df f001 	tbb	[pc, r1]
    4e00:	07020418 	.word	0x07020418
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    4e04:	2105      	movs	r1, #5
    4e06:	e014      	b.n	4e32 <usb_tx+0x6a>
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4e08:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4e0a:	2102      	movs	r1, #2
		break;
    4e0c:	e011      	b.n	4e32 <usb_tx+0x6a>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    4e0e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4e10:	2104      	movs	r1, #4
		break;
    4e12:	e00e      	b.n	4e32 <usb_tx+0x6a>
	default:
		if (tx_first[ endpoint ] == NULL)
    4e14:	4913      	ldr	r1, [pc, #76]	; (4e64 <usb_tx+0x9c>)
    4e16:	4a14      	ldr	r2, [pc, #80]	; (4e68 <usb_tx+0xa0>)
    4e18:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    4e1c:	b910      	cbnz	r0, 4e24 <usb_tx+0x5c>
		{
			tx_first[ endpoint ] = packet;
    4e1e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    4e22:	e002      	b.n	4e2a <usb_tx+0x62>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    4e24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    4e28:	604d      	str	r5, [r1, #4]
		}
		tx_last[ endpoint ] = packet;
    4e2a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    4e2e:	e00d      	b.n	4e4c <usb_tx+0x84>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4e30:	2103      	movs	r1, #3
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    4e32:	54d1      	strb	r1, [r2, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4e34:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    4e38:	f105 0308 	add.w	r3, r5, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4e3c:	882a      	ldrh	r2, [r5, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    4e3e:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4e40:	bf14      	ite	ne
    4e42:	23c8      	movne	r3, #200	; 0xc8
    4e44:	2388      	moveq	r3, #136	; 0x88
    4e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4e4a:	6003      	str	r3, [r0, #0]
	__enable_irq();
    4e4c:	b662      	cpsie	i
    4e4e:	bd38      	pop	{r3, r4, r5, pc}
    4e50:	1fff8fec 	.word	0x1fff8fec
    4e54:	1fff9100 	.word	0x1fff9100
    4e58:	1fff8d20 	.word	0x1fff8d20
    4e5c:	1fff8000 	.word	0x1fff8000
    4e60:	1fff9138 	.word	0x1fff9138
    4e64:	1fff91f4 	.word	0x1fff91f4
    4e68:	1fff921c 	.word	0x1fff921c

00004e6c <usb_device_reload>:
}


void usb_device_reload()
{
    4e6c:	4b07      	ldr	r3, [pc, #28]	; (4e8c <usb_device_reload+0x20>)
    4e6e:	4908      	ldr	r1, [pc, #32]	; (4e90 <usb_device_reload+0x24>)
    4e70:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    4e74:	f5a2 3278 	sub.w	r2, r2, #253952	; 0x3e000
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    4e78:	5c52      	ldrb	r2, [r2, r1]
    4e7a:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    4e7e:	4a05      	ldr	r2, [pc, #20]	; (4e94 <usb_device_reload+0x28>)
    4e80:	4293      	cmp	r3, r2
    4e82:	d1f4      	bne.n	4e6e <usb_device_reload+0x2>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    4e84:	4b04      	ldr	r3, [pc, #16]	; (4e98 <usb_device_reload+0x2c>)
    4e86:	4a05      	ldr	r2, [pc, #20]	; (4e9c <usb_device_reload+0x30>)
    4e88:	601a      	str	r2, [r3, #0]
    4e8a:	4770      	bx	lr
    4e8c:	4003e000 	.word	0x4003e000
    4e90:	0000685a 	.word	0x0000685a
    4e94:	4003e016 	.word	0x4003e016
    4e98:	e000ed0c 	.word	0xe000ed0c
    4e9c:	05fa0004 	.word	0x05fa0004

00004ea0 <usb_isr>:
#endif
}


void usb_isr()
{
    4ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t status, stat, t;

restart:
	status = USB0_ISTAT;
    4ea4:	4da0      	ldr	r5, [pc, #640]	; (5128 <usb_isr+0x288>)
    4ea6:	782e      	ldrb	r6, [r5, #0]
    4ea8:	b2f6      	uxtb	r6, r6
	print(" ISR(");
	printHex( status );
	print(") ");
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    4eaa:	f016 0f04 	tst.w	r6, #4
    4eae:	462c      	mov	r4, r5
    4eb0:	d025      	beq.n	4efe <usb_isr+0x5e>
	{
		if ( usb_configuration )
    4eb2:	4b9e      	ldr	r3, [pc, #632]	; (512c <usb_isr+0x28c>)
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	b1ab      	cbz	r3, 4ee4 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    4eb8:	4a9d      	ldr	r2, [pc, #628]	; (5130 <usb_isr+0x290>)
    4eba:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    4ebc:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    4ec0:	b129      	cbz	r1, 4ece <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    4ec2:	3b01      	subs	r3, #1
    4ec4:	b2db      	uxtb	r3, r3
    4ec6:	7013      	strb	r3, [r2, #0]
				if ( !t )
    4ec8:	b90b      	cbnz	r3, 4ece <usb_isr+0x2e>
					usb_device_reload();
    4eca:	f7ff ffcf 	bl	4e6c <usb_device_reload>
			}

			// CDC Interface
			#if enableVirtualSerialPort_define == 1
			t = usb_cdc_transmit_flush_timer;
    4ece:	4a99      	ldr	r2, [pc, #612]	; (5134 <usb_isr+0x294>)
    4ed0:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    4ed2:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    4ed6:	b129      	cbz	r1, 4ee4 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    4ed8:	3b01      	subs	r3, #1
    4eda:	b2db      	uxtb	r3, r3
    4edc:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    4ede:	b90b      	cbnz	r3, 4ee4 <usb_isr+0x44>
					usb_serial_flush_callback();
    4ee0:	f000 ff2c 	bl	5d3c <usb_serial_flush_callback>
			#endif

		}

		// SOF tokens are used for keepalive, consider the system awake when we're receiving them
		if ( usb_dev_sleep )
    4ee4:	4f94      	ldr	r7, [pc, #592]	; (5138 <usb_isr+0x298>)
    4ee6:	783b      	ldrb	r3, [r7, #0]
    4ee8:	b13b      	cbz	r3, 4efa <usb_isr+0x5a>
		{
			Output_update_usb_current( *usb_bMaxPower * 2 );
    4eea:	4b94      	ldr	r3, [pc, #592]	; (513c <usb_isr+0x29c>)
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	7818      	ldrb	r0, [r3, #0]
    4ef0:	0040      	lsls	r0, r0, #1
    4ef2:	f7ff fe8d 	bl	4c10 <Output_update_usb_current>
			usb_dev_sleep = 0;
    4ef6:	2300      	movs	r3, #0
    4ef8:	703b      	strb	r3, [r7, #0]
		}

		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    4efa:	2304      	movs	r3, #4
    4efc:	702b      	strb	r3, [r5, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    4efe:	f006 0308 	and.w	r3, r6, #8
    4f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4f06:	2b00      	cmp	r3, #0
    4f08:	f000 8372 	beq.w	55f0 <usb_isr+0x750>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    4f0c:	4b8c      	ldr	r3, [pc, #560]	; (5140 <usb_isr+0x2a0>)
    4f0e:	4f8d      	ldr	r7, [pc, #564]	; (5144 <usb_isr+0x2a4>)
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    4f14:	0919      	lsrs	r1, r3, #4
    4f16:	ea4f 0493 	mov.w	r4, r3, lsr #2
    4f1a:	f040 82ea 	bne.w	54f2 <usb_isr+0x652>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    4f1e:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    4f22:	f8d3 9004 	ldr.w	r9, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
	pid = BDT_PID( b->desc );
    4f26:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    4f2a:	f3c3 0383 	ubfx	r3, r3, #2, #4
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch ( pid )
    4f2e:	3b01      	subs	r3, #1
    4f30:	2b0c      	cmp	r3, #12
    4f32:	f200 82da 	bhi.w	54ea <usb_isr+0x64a>
    4f36:	e8df f013 	tbh	[pc, r3, lsl #1]
    4f3a:	024e      	.short	0x024e
    4f3c:	02d8024e 	.word	0x02d8024e
    4f40:	02d802d8 	.word	0x02d802d8
    4f44:	02d802d8 	.word	0x02d802d8
    4f48:	02b302d8 	.word	0x02b302d8
    4f4c:	02d802d8 	.word	0x02d802d8
    4f50:	000d02d8 	.word	0x000d02d8
	{
	case 0x0D: // Setup received from host
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4f54:	f8df 820c 	ldr.w	r8, [pc, #524]	; 5164 <usb_isr+0x2c4>
    4f58:	f8d9 3000 	ldr.w	r3, [r9]
    4f5c:	f8c8 3000 	str.w	r3, [r8]
		setup.word2 = *(uint32_t *)(buf + 4);
    4f60:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4f64:	f8c8 3004 	str.w	r3, [r8, #4]

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    4f68:	4b77      	ldr	r3, [pc, #476]	; (5148 <usb_isr+0x2a8>)
    4f6a:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4f6e:	4b77      	ldr	r3, [pc, #476]	; (514c <usb_isr+0x2ac>)
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4f70:	4e77      	ldr	r6, [pc, #476]	; (5150 <usb_isr+0x2b0>)
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4f72:	2101      	movs	r1, #1
    4f74:	7019      	strb	r1, [r3, #0]
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	// Reset USB Init timer
	USBInit_TimeEnd = systick_millis_count;
    4f76:	4977      	ldr	r1, [pc, #476]	; (5154 <usb_isr+0x2b4>)
    4f78:	4b77      	ldr	r3, [pc, #476]	; (5158 <usb_isr+0x2b8>)
    4f7a:	6808      	ldr	r0, [r1, #0]
    4f7c:	6018      	str	r0, [r3, #0]
	USBInit_Ticks++;
    4f7e:	4877      	ldr	r0, [pc, #476]	; (515c <usb_isr+0x2bc>)
    4f80:	8803      	ldrh	r3, [r0, #0]
    4f82:	3301      	adds	r3, #1
    4f84:	b29b      	uxth	r3, r3
    4f86:	8003      	strh	r3, [r0, #0]

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    4f88:	4875      	ldr	r0, [pc, #468]	; (5160 <usb_isr+0x2c0>)
    4f8a:	7803      	ldrb	r3, [r0, #0]
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4f8c:	2200      	movs	r2, #0
    4f8e:	6032      	str	r2, [r6, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4f90:	613a      	str	r2, [r7, #16]
		table[index(0, TX, ODD)].desc = 0;
    4f92:	61ba      	str	r2, [r7, #24]
	USBInit_TimeEnd = systick_millis_count;
	USBInit_Ticks++;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    4f94:	b103      	cbz	r3, 4f98 <usb_isr+0xf8>
	{
		power_neg_delay = 0;
    4f96:	7002      	strb	r2, [r0, #0]
	}

	switch ( setup.wRequestAndType )
    4f98:	f8b8 3000 	ldrh.w	r3, [r8]
    4f9c:	4c71      	ldr	r4, [pc, #452]	; (5164 <usb_isr+0x2c4>)
    4f9e:	f240 32a1 	movw	r2, #929	; 0x3a1
    4fa2:	4293      	cmp	r3, r2
    4fa4:	f000 81e2 	beq.w	536c <usb_isr+0x4cc>
    4fa8:	d835      	bhi.n	5016 <usb_isr+0x176>
    4faa:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4fae:	f000 8160 	beq.w	5272 <usb_isr+0x3d2>
    4fb2:	d815      	bhi.n	4fe0 <usb_isr+0x140>
    4fb4:	2b82      	cmp	r3, #130	; 0x82
    4fb6:	f000 8138 	beq.w	522a <usb_isr+0x38a>
    4fba:	d807      	bhi.n	4fcc <usb_isr+0x12c>
    4fbc:	2b80      	cmp	r3, #128	; 0x80
    4fbe:	f040 8152 	bne.w	5266 <usb_isr+0x3c6>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4fc2:	4c69      	ldr	r4, [pc, #420]	; (5168 <usb_isr+0x2c8>)
    4fc4:	2300      	movs	r3, #0
    4fc6:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    4fc8:	7063      	strb	r3, [r4, #1]
    4fca:	e13c      	b.n	5246 <usb_isr+0x3a6>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    4fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4fd0:	f000 813b 	beq.w	524a <usb_isr+0x3aa>
    4fd4:	f240 1201 	movw	r2, #257	; 0x101
    4fd8:	4293      	cmp	r3, r2
    4fda:	f000 8148 	beq.w	526e <usb_isr+0x3ce>
    4fde:	e142      	b.n	5266 <usb_isr+0x3c6>
    4fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4fe4:	f000 8131 	beq.w	524a <usb_isr+0x3aa>
    4fe8:	d80a      	bhi.n	5000 <usb_isr+0x160>
    4fea:	f240 12a1 	movw	r2, #417	; 0x1a1
    4fee:	4293      	cmp	r3, r2
    4ff0:	f000 819c 	beq.w	532c <usb_isr+0x48c>
    4ff4:	f240 22a1 	movw	r2, #673	; 0x2a1
    4ff8:	4293      	cmp	r3, r2
    4ffa:	f000 81af 	beq.w	535c <usb_isr+0x4bc>
    4ffe:	e132      	b.n	5266 <usb_isr+0x3c6>
    5000:	f240 3201 	movw	r2, #769	; 0x301
    5004:	4293      	cmp	r3, r2
    5006:	f000 8144 	beq.w	5292 <usb_isr+0x3f2>
    500a:	f240 3202 	movw	r2, #770	; 0x302
    500e:	4293      	cmp	r3, r2
    5010:	f000 814b 	beq.w	52aa <usb_isr+0x40a>
    5014:	e127      	b.n	5266 <usb_isr+0x3c6>
    5016:	f640 1221 	movw	r2, #2337	; 0x921
    501a:	4293      	cmp	r3, r2
    501c:	f000 817a 	beq.w	5314 <usb_isr+0x474>
    5020:	d823      	bhi.n	506a <usb_isr+0x1ca>
    5022:	f240 6281 	movw	r2, #1665	; 0x681
    5026:	4293      	cmp	r3, r2
    5028:	d808      	bhi.n	503c <usb_isr+0x19c>
    502a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    502e:	f080 814b 	bcs.w	52c8 <usb_isr+0x428>
    5032:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5036:	f000 819f 	beq.w	5378 <usb_isr+0x4d8>
    503a:	e114      	b.n	5266 <usb_isr+0x3c6>
    503c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    5040:	f000 80f1 	beq.w	5226 <usb_isr+0x386>
    5044:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5048:	f040 810d 	bne.w	5266 <usb_isr+0x3c6>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    504c:	4b37      	ldr	r3, [pc, #220]	; (512c <usb_isr+0x28c>)
    504e:	78a2      	ldrb	r2, [r4, #2]
    5050:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    5052:	781b      	ldrb	r3, [r3, #0]
    5054:	4a45      	ldr	r2, [pc, #276]	; (516c <usb_isr+0x2cc>)
    5056:	b2db      	uxtb	r3, r3
    5058:	7013      	strb	r3, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );
    505a:	4b38      	ldr	r3, [pc, #224]	; (513c <usb_isr+0x29c>)
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	7818      	ldrb	r0, [r3, #0]
    5060:	0040      	lsls	r0, r0, #1
    5062:	f7ff fdd5 	bl	4c10 <Output_update_usb_current>
    5066:	2400      	movs	r4, #0
    5068:	e01d      	b.n	50a6 <usb_isr+0x206>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    506a:	f242 0221 	movw	r2, #8225	; 0x2021
    506e:	4293      	cmp	r3, r2
    5070:	f000 8182 	beq.w	5378 <usb_isr+0x4d8>
    5074:	d80a      	bhi.n	508c <usb_isr+0x1ec>
    5076:	f640 2221 	movw	r2, #2593	; 0xa21
    507a:	4293      	cmp	r3, r2
    507c:	f000 8166 	beq.w	534c <usb_isr+0x4ac>
    5080:	f640 3221 	movw	r2, #2849	; 0xb21
    5084:	4293      	cmp	r3, r2
    5086:	f000 816d 	beq.w	5364 <usb_isr+0x4c4>
    508a:	e0ec      	b.n	5266 <usb_isr+0x3c6>
    508c:	f242 12a1 	movw	r2, #8609	; 0x21a1
    5090:	4293      	cmp	r3, r2
    5092:	d005      	beq.n	50a0 <usb_isr+0x200>
    5094:	f242 2221 	movw	r2, #8737	; 0x2221
    5098:	4293      	cmp	r3, r2
    509a:	f000 8138 	beq.w	530e <usb_isr+0x46e>
    509e:	e0e2      	b.n	5266 <usb_isr+0x3c6>
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    50a0:	2308      	movs	r3, #8
		usb_cdc_line_rtsdtr = setup.wValue;
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
    50a2:	4c33      	ldr	r4, [pc, #204]	; (5170 <usb_isr+0x2d0>)
    50a4:	e16a      	b.n	537c <usb_isr+0x4dc>
    50a6:	193b      	adds	r3, r7, r4
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    50a8:	6a1a      	ldr	r2, [r3, #32]
    50aa:	0611      	lsls	r1, r2, #24
    50ac:	d503      	bpl.n	50b6 <usb_isr+0x216>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    50ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
    50b0:	3808      	subs	r0, #8
    50b2:	f000 fd31 	bl	5b18 <usb_free>
    50b6:	3408      	adds	r4, #8

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    50b8:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    50bc:	d1f3      	bne.n	50a6 <usb_isr+0x206>
    50be:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5180 <usb_isr+0x2e0>
    50c2:	2400      	movs	r4, #0
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    50c4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 5184 <usb_isr+0x2e4>
    50c8:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    50cc:	ea4f 0a84 	mov.w	sl, r4, lsl #2
			while ( p )
    50d0:	b130      	cbz	r0, 50e0 <usb_isr+0x240>
			{
				n = p->next;
    50d2:	6843      	ldr	r3, [r0, #4]
    50d4:	9301      	str	r3, [sp, #4]
				usb_free(p);
    50d6:	f000 fd1f 	bl	5b18 <usb_free>
				p = n;
    50da:	9b01      	ldr	r3, [sp, #4]
    50dc:	4618      	mov	r0, r3
    50de:	e7f7      	b.n	50d0 <usb_isr+0x230>
			}
			rx_first[ i ] = NULL;
    50e0:	f84b 000a 	str.w	r0, [fp, sl]
			rx_last[ i ] = NULL;
    50e4:	4b23      	ldr	r3, [pc, #140]	; (5174 <usb_isr+0x2d4>)
			p = tx_first[i];
    50e6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 5188 <usb_isr+0x2e8>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    50ea:	f84a 0003 	str.w	r0, [sl, r3]
			p = tx_first[i];
    50ee:	f85a 000b 	ldr.w	r0, [sl, fp]
			while (p)
    50f2:	b130      	cbz	r0, 5102 <usb_isr+0x262>
			{
				n = p->next;
    50f4:	6843      	ldr	r3, [r0, #4]
    50f6:	9301      	str	r3, [sp, #4]
				usb_free(p);
    50f8:	f000 fd0e 	bl	5b18 <usb_free>
				p = n;
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	4618      	mov	r0, r3
    5100:	e7f7      	b.n	50f2 <usb_isr+0x252>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    5102:	4b1d      	ldr	r3, [pc, #116]	; (5178 <usb_isr+0x2d8>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    5104:	f84b 000a 	str.w	r0, [fp, sl]
			tx_last[ i ] = NULL;
    5108:	f84a 0003 	str.w	r0, [sl, r3]
			usb_rx_byte_count_data[i] = 0;
    510c:	4b1b      	ldr	r3, [pc, #108]	; (517c <usb_isr+0x2dc>)
    510e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]

			switch ( tx_state[ i ] )
    5112:	f899 3000 	ldrb.w	r3, [r9]
    5116:	3b02      	subs	r3, #2
    5118:	2b03      	cmp	r3, #3
    511a:	d83a      	bhi.n	5192 <usb_isr+0x2f2>
    511c:	e8df f003 	tbb	[pc, r3]
    5120:	36023602 	.word	0x36023602
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5124:	2300      	movs	r3, #0
    5126:	e032      	b.n	518e <usb_isr+0x2ee>
    5128:	40072080 	.word	0x40072080
    512c:	1fff925a 	.word	0x1fff925a
    5130:	1fff91b1 	.word	0x1fff91b1
    5134:	1fff925e 	.word	0x1fff925e
    5138:	1fff9250 	.word	0x1fff9250
    513c:	1fff8d20 	.word	0x1fff8d20
    5140:	40072090 	.word	0x40072090
    5144:	1fff8000 	.word	0x1fff8000
    5148:	004000c8 	.word	0x004000c8
    514c:	1fff925b 	.word	0x1fff925b
    5150:	1fff910c 	.word	0x1fff910c
    5154:	1fff8fec 	.word	0x1fff8fec
    5158:	1fffa23c 	.word	0x1fffa23c
    515c:	1fffa242 	.word	0x1fffa242
    5160:	1fff9142 	.word	0x1fff9142
    5164:	1fff9244 	.word	0x1fff9244
    5168:	1fff9252 	.word	0x1fff9252
    516c:	1fff9104 	.word	0x1fff9104
    5170:	1fff8fe4 	.word	0x1fff8fe4
    5174:	1fff9110 	.word	0x1fff9110
    5178:	1fff921c 	.word	0x1fff921c
    517c:	1fffa282 	.word	0x1fffa282
    5180:	1fff9138 	.word	0x1fff9138
    5184:	1fff9188 	.word	0x1fff9188
    5188:	1fff91f4 	.word	0x1fff91f4
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    518c:	2301      	movs	r3, #1
    518e:	f889 3000 	strb.w	r3, [r9]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    5192:	3401      	adds	r4, #1
    5194:	2c0a      	cmp	r4, #10
    5196:	f109 0901 	add.w	r9, r9, #1
    519a:	d193      	bne.n	50c4 <usb_isr+0x224>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    519c:	4ba6      	ldr	r3, [pc, #664]	; (5438 <usb_isr+0x598>)
    519e:	2200      	movs	r2, #0
    51a0:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    51a2:	2401      	movs	r4, #1
    51a4:	4699      	mov	r9, r3
    51a6:	4aa5      	ldr	r2, [pc, #660]	; (543c <usb_isr+0x59c>)
    51a8:	4ba5      	ldr	r3, [pc, #660]	; (5440 <usb_isr+0x5a0>)
    51aa:	4422      	add	r2, r4
    51ac:	4423      	add	r3, r4
		{
			epconf = *cfg++;
    51ae:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    51b2:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    51b4:	f012 0f08 	tst.w	r2, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    51b8:	701a      	strb	r2, [r3, #0]
    51ba:	ea4f 0a84 	mov.w	sl, r4, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    51be:	d025      	beq.n	520c <usb_isr+0x36c>
			{
				usb_packet_t *p;
				p = usb_malloc();
    51c0:	f000 fc8c 	bl	5adc <usb_malloc>
				if ( p )
    51c4:	b138      	cbz	r0, 51d6 <usb_isr+0x336>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    51c6:	eb07 1344 	add.w	r3, r7, r4, lsl #5
    51ca:	3008      	adds	r0, #8
    51cc:	6058      	str	r0, [r3, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    51ce:	4b9d      	ldr	r3, [pc, #628]	; (5444 <usb_isr+0x5a4>)
    51d0:	f847 303a 	str.w	r3, [r7, sl, lsl #3]
    51d4:	e006      	b.n	51e4 <usb_isr+0x344>
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    51d6:	f899 3000 	ldrb.w	r3, [r9]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    51da:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
					usb_rx_memory_needed++;
    51de:	3301      	adds	r3, #1
    51e0:	f889 3000 	strb.w	r3, [r9]
				}
				p = usb_malloc();
    51e4:	f000 fc7a 	bl	5adc <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    51e8:	f04a 0301 	orr.w	r3, sl, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    51ec:	b138      	cbz	r0, 51fe <usb_isr+0x35e>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    51ee:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    51f2:	3008      	adds	r0, #8
    51f4:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    51f6:	4a94      	ldr	r2, [pc, #592]	; (5448 <usb_isr+0x5a8>)
    51f8:	f847 2033 	str.w	r2, [r7, r3, lsl #3]
    51fc:	e006      	b.n	520c <usb_isr+0x36c>
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    51fe:	f847 0033 	str.w	r0, [r7, r3, lsl #3]
					usb_rx_memory_needed++;
    5202:	f899 3000 	ldrb.w	r3, [r9]
    5206:	3301      	adds	r3, #1
    5208:	f889 3000 	strb.w	r3, [r9]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    520c:	f04a 0202 	orr.w	r2, sl, #2
    5210:	2300      	movs	r3, #0
    5212:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    5216:	3401      	adds	r4, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    5218:	f04a 0203 	orr.w	r2, sl, #3
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    521c:	2c0b      	cmp	r4, #11
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    521e:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    5222:	d1c0      	bne.n	51a6 <usb_isr+0x306>
    5224:	e0a9      	b.n	537a <usb_isr+0x4da>
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    5226:	4b89      	ldr	r3, [pc, #548]	; (544c <usb_isr+0x5ac>)
    5228:	e0a1      	b.n	536e <usb_isr+0x4ce>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    522a:	88a3      	ldrh	r3, [r4, #4]
    522c:	2b0a      	cmp	r3, #10
    522e:	d81a      	bhi.n	5266 <usb_isr+0x3c6>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    5230:	4c87      	ldr	r4, [pc, #540]	; (5450 <usb_isr+0x5b0>)
    5232:	2200      	movs	r2, #0
    5234:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5236:	7062      	strb	r2, [r4, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    5238:	009b      	lsls	r3, r3, #2
    523a:	4a86      	ldr	r2, [pc, #536]	; (5454 <usb_isr+0x5b4>)
    523c:	5cd3      	ldrb	r3, [r2, r3]
    523e:	079a      	lsls	r2, r3, #30
			reply_buffer[0] = 1;
    5240:	bf44      	itt	mi
    5242:	2301      	movmi	r3, #1
    5244:	7023      	strbmi	r3, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    5246:	2302      	movs	r3, #2
    5248:	e098      	b.n	537c <usb_isr+0x4dc>
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		goto send;

	case 0x0300: // SET_FEATURE (device)
		switch ( setup.wValue )
    524a:	8863      	ldrh	r3, [r4, #2]
    524c:	2b01      	cmp	r3, #1
    524e:	f000 8093 	beq.w	5378 <usb_isr+0x4d8>
		// See SET_FEATURE(DEVICE_REMOTE_WAKEUP) for details
		case 0x1:
			goto send;
		}

		warn_msg("SET_FEATURE - Device wValue(");
    5252:	4881      	ldr	r0, [pc, #516]	; (5458 <usb_isr+0x5b8>)
    5254:	f001 f966 	bl	6524 <_print>
		printHex( setup.wValue );
    5258:	8860      	ldrh	r0, [r4, #2]
    525a:	2101      	movs	r1, #1
    525c:	f001 fa04 	bl	6668 <printHex_op>
		print( ")" NL );
    5260:	487e      	ldr	r0, [pc, #504]	; (545c <usb_isr+0x5bc>)
    5262:	f001 f95f 	bl	6524 <_print>
	print("STALL : ");
	printInt32( systick_millis_count - USBInit_TimeStart );
	print(" ms");
	print(NL);
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5266:	4b7b      	ldr	r3, [pc, #492]	; (5454 <usb_isr+0x5b4>)
    5268:	220f      	movs	r2, #15
    526a:	701a      	strb	r2, [r3, #0]
    526c:	e0b0      	b.n	53d0 <usb_isr+0x530>
		endpoint0_stall();
		return;

	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("CLEAR_FEATURE - Interface wValue(");
    526e:	487c      	ldr	r0, [pc, #496]	; (5460 <usb_isr+0x5c0>)
    5270:	e010      	b.n	5294 <usb_isr+0x3f4>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    5272:	88a2      	ldrh	r2, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    5274:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    5278:	2b0a      	cmp	r3, #10
    527a:	d8f4      	bhi.n	5266 <usb_isr+0x3c6>
    527c:	8863      	ldrh	r3, [r4, #2]
    527e:	2b00      	cmp	r3, #0
    5280:	d1f1      	bne.n	5266 <usb_isr+0x3c6>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    5282:	0091      	lsls	r1, r2, #2
    5284:	4a73      	ldr	r2, [pc, #460]	; (5454 <usb_isr+0x5b4>)
    5286:	440a      	add	r2, r1
    5288:	7811      	ldrb	r1, [r2, #0]
    528a:	f021 0102 	bic.w	r1, r1, #2
    528e:	7011      	strb	r1, [r2, #0]
    5290:	e073      	b.n	537a <usb_isr+0x4da>
		endpoint0_stall();
		return;

	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("SET_FEATURE - Interface wValue(");
    5292:	4874      	ldr	r0, [pc, #464]	; (5464 <usb_isr+0x5c4>)
    5294:	f001 f946 	bl	6524 <_print>
		printHex( setup.wValue );
    5298:	8860      	ldrh	r0, [r4, #2]
    529a:	2101      	movs	r1, #1
    529c:	f001 f9e4 	bl	6668 <printHex_op>
		print(") wIndex(");
    52a0:	4871      	ldr	r0, [pc, #452]	; (5468 <usb_isr+0x5c8>)
    52a2:	f001 f93f 	bl	6524 <_print>
		printHex( setup.wIndex );
    52a6:	88a0      	ldrh	r0, [r4, #4]
    52a8:	e7d7      	b.n	525a <usb_isr+0x3ba>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    52aa:	88a3      	ldrh	r3, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    52ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    52b0:	2a0a      	cmp	r2, #10
    52b2:	d8d8      	bhi.n	5266 <usb_isr+0x3c6>
    52b4:	8862      	ldrh	r2, [r4, #2]
    52b6:	2a00      	cmp	r2, #0
    52b8:	d1d5      	bne.n	5266 <usb_isr+0x3c6>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    52ba:	009a      	lsls	r2, r3, #2
    52bc:	4b65      	ldr	r3, [pc, #404]	; (5454 <usb_isr+0x5b4>)
    52be:	4413      	add	r3, r2
    52c0:	781a      	ldrb	r2, [r3, #0]
    52c2:	f042 0202 	orr.w	r2, r2, #2
    52c6:	e04f      	b.n	5368 <usb_isr+0x4c8>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    52c8:	8862      	ldrh	r2, [r4, #2]
    52ca:	88a7      	ldrh	r7, [r4, #4]
    52cc:	4b67      	ldr	r3, [pc, #412]	; (546c <usb_isr+0x5cc>)
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    52ce:	685c      	ldr	r4, [r3, #4]
    52d0:	2c00      	cmp	r4, #0
    52d2:	d0c8      	beq.n	5266 <usb_isr+0x3c6>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    52d4:	f8b3 e000 	ldrh.w	lr, [r3]
    52d8:	4596      	cmp	lr, r2
    52da:	d116      	bne.n	530a <usb_isr+0x46a>
    52dc:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    52e0:	4577      	cmp	r7, lr
    52e2:	d112      	bne.n	530a <usb_isr+0x46a>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    52e4:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    52e8:	f1be 0f03 	cmp.w	lr, #3
    52ec:	d101      	bne.n	52f2 <usb_isr+0x452>
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    52ee:	7823      	ldrb	r3, [r4, #0]
    52f0:	e044      	b.n	537c <usb_isr+0x4dc>
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    52f2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
					// length.
					datalen = *(list->addr);
				}
				else
				{
					datalen = list->length;
    52f6:	891b      	ldrh	r3, [r3, #8]
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    52f8:	d140      	bne.n	537c <usb_isr+0x4dc>
    52fa:	2f00      	cmp	r7, #0
    52fc:	d13e      	bne.n	537c <usb_isr+0x4dc>
				{
					power_neg_delay = 1;
    52fe:	2201      	movs	r2, #1
    5300:	7002      	strb	r2, [r0, #0]
					power_neg_time = systick_millis_count;
    5302:	4a5b      	ldr	r2, [pc, #364]	; (5470 <usb_isr+0x5d0>)
    5304:	6809      	ldr	r1, [r1, #0]
    5306:	6011      	str	r1, [r2, #0]
    5308:	e038      	b.n	537c <usb_isr+0x4dc>
		#ifdef UART_DEBUG
		print("desc:");
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
    530a:	330c      	adds	r3, #12
    530c:	e7df      	b.n	52ce <usb_isr+0x42e>
		endpoint0_stall();
		return;

#if enableVirtualSerialPort_define == 1
	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    530e:	78a2      	ldrb	r2, [r4, #2]
    5310:	4b58      	ldr	r3, [pc, #352]	; (5474 <usb_isr+0x5d4>)
    5312:	e029      	b.n	5368 <usb_isr+0x4c8>
		print(")");
		print( NL );
		#endif

		// Interface
		switch ( setup.wIndex & 0xFF )
    5314:	7923      	ldrb	r3, [r4, #4]
    5316:	2b01      	cmp	r3, #1
    5318:	d92e      	bls.n	5378 <usb_isr+0x4d8>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    531a:	4857      	ldr	r0, [pc, #348]	; (5478 <usb_isr+0x5d8>)
    531c:	f001 f902 	bl	6524 <_print>
			printHex( setup.wIndex );
    5320:	88a0      	ldrh	r0, [r4, #4]
    5322:	2101      	movs	r1, #1
    5324:	f001 f9a0 	bl	6668 <printHex_op>
			print( NL );
    5328:	4854      	ldr	r0, [pc, #336]	; (547c <usb_isr+0x5dc>)
    532a:	e79a      	b.n	5262 <usb_isr+0x3c2>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    532c:	88a2      	ldrh	r2, [r4, #4]
    532e:	4b4f      	ldr	r3, [pc, #316]	; (546c <usb_isr+0x5cc>)
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    5330:	685c      	ldr	r4, [r3, #4]
    5332:	2c00      	cmp	r4, #0
    5334:	d097      	beq.n	5266 <usb_isr+0x3c6>
				break;
			if ( list->wValue != 0x2200 )
    5336:	8819      	ldrh	r1, [r3, #0]
    5338:	f5b1 5f08 	cmp.w	r1, #8704	; 0x2200
    533c:	d104      	bne.n	5348 <usb_isr+0x4a8>
				continue;
			if ( setup.wIndex == list->wIndex )
    533e:	8859      	ldrh	r1, [r3, #2]
    5340:	4291      	cmp	r1, r2
    5342:	d101      	bne.n	5348 <usb_isr+0x4a8>
			{
				data = list->addr;
				datalen = list->length;
    5344:	891b      	ldrh	r3, [r3, #8]
    5346:	e019      	b.n	537c <usb_isr+0x4dc>
		print("GET_REPORT - ");
		printHex( setup.wIndex );
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
    5348:	330c      	adds	r3, #12
    534a:	e7f1      	b.n	5330 <usb_isr+0x490>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue >> 8 );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    534c:	8863      	ldrh	r3, [r4, #2]
    534e:	4a4c      	ldr	r2, [pc, #304]	; (5480 <usb_isr+0x5e0>)
    5350:	0a1b      	lsrs	r3, r3, #8
    5352:	7013      	strb	r3, [r2, #0]
		USBKeys_Idle_Expiry = 0;
    5354:	4a4b      	ldr	r2, [pc, #300]	; (5484 <usb_isr+0x5e4>)
    5356:	2300      	movs	r3, #0
    5358:	6013      	str	r3, [r2, #0]
    535a:	e00e      	b.n	537a <usb_isr+0x4da>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Idle_Config );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Idle_Config;
    535c:	4b48      	ldr	r3, [pc, #288]	; (5480 <usb_isr+0x5e0>)
    535e:	4c3c      	ldr	r4, [pc, #240]	; (5450 <usb_isr+0x5b0>)
    5360:	781b      	ldrb	r3, [r3, #0]
    5362:	e006      	b.n	5372 <usb_isr+0x4d2>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    5364:	78a2      	ldrb	r2, [r4, #2]
    5366:	4b48      	ldr	r3, [pc, #288]	; (5488 <usb_isr+0x5e8>)
    5368:	701a      	strb	r2, [r3, #0]
    536a:	e005      	b.n	5378 <usb_isr+0x4d8>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Protocol );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Protocol;
    536c:	4b46      	ldr	r3, [pc, #280]	; (5488 <usb_isr+0x5e8>)
    536e:	781b      	ldrb	r3, [r3, #0]
    5370:	4c37      	ldr	r4, [pc, #220]	; (5450 <usb_isr+0x5b0>)
    5372:	7023      	strb	r3, [r4, #0]
		data = reply_buffer;
		datalen = 1;
    5374:	2301      	movs	r3, #1
    5376:	e001      	b.n	537c <usb_isr+0x4dc>
}

static void usb_setup()
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    5378:	2300      	movs	r3, #0
	}
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    537a:	461c      	mov	r4, r3
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    537c:	f8b8 7006 	ldrh.w	r7, [r8, #6]
    5380:	429f      	cmp	r7, r3
    5382:	bf28      	it	cs
    5384:	461f      	movcs	r7, r3
    5386:	2f40      	cmp	r7, #64	; 0x40
    5388:	46b8      	mov	r8, r7
    538a:	bf28      	it	cs
    538c:	f04f 0840 	movcs.w	r8, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
    5390:	4620      	mov	r0, r4
    5392:	4641      	mov	r1, r8
    5394:	f7ff fc54 	bl	4c40 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    5398:	ebb7 0708 	subs.w	r7, r7, r8
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
	data += size;
    539c:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    539e:	d104      	bne.n	53aa <usb_isr+0x50a>
    53a0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    53a4:	d114      	bne.n	53d0 <usb_isr+0x530>
    53a6:	46b8      	mov	r8, r7
    53a8:	e004      	b.n	53b4 <usb_isr+0x514>
    53aa:	2f40      	cmp	r7, #64	; 0x40
    53ac:	46b8      	mov	r8, r7
    53ae:	bf28      	it	cs
    53b0:	f04f 0840 	movcs.w	r8, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
    53b4:	4620      	mov	r0, r4
    53b6:	4641      	mov	r1, r8
    53b8:	f7ff fc42 	bl	4c40 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    53bc:	ebb7 0708 	subs.w	r7, r7, r8

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
	data += size;
    53c0:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    53c2:	d102      	bne.n	53ca <usb_isr+0x52a>
    53c4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    53c8:	d102      	bne.n	53d0 <usb_isr+0x530>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    53ca:	4b30      	ldr	r3, [pc, #192]	; (548c <usb_isr+0x5ec>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    53cc:	6034      	str	r4, [r6, #0]
	ep0_tx_len = datalen;
    53ce:	801f      	strh	r7, [r3, #0]
		#endif

		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    53d0:	2201      	movs	r2, #1
    53d2:	4b2f      	ldr	r3, [pc, #188]	; (5490 <usb_isr+0x5f0>)
    53d4:	e088      	b.n	54e8 <usb_isr+0x648>

		// CDC Interface
		#if enableVirtualSerialPort_define == 1
		// CDC_SET_LINE_CODING - PID=OUT
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x2021 )
    53d6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5498 <usb_isr+0x5f8>
    53da:	f8b8 2000 	ldrh.w	r2, [r8]
    53de:	f242 0321 	movw	r3, #8225	; 0x2021
    53e2:	429a      	cmp	r2, r3
    53e4:	d104      	bne.n	53f0 <usb_isr+0x550>
		{
			// Copy over new line coding
			memcpy( (void*)&usb_cdc_line_coding, buf, 7 );
    53e6:	482b      	ldr	r0, [pc, #172]	; (5494 <usb_isr+0x5f4>)
    53e8:	4649      	mov	r1, r9
    53ea:	2207      	movs	r2, #7
    53ec:	f7fd f8c4 	bl	2578 <memcpy>
		#endif

		// Keyboard HID SET_REPORT - PID=OUT
		#if enableKeyboard_define == 1
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x0921 && setup.wValue & 0x200 )
    53f0:	f8b8 2000 	ldrh.w	r2, [r8]
    53f4:	4e28      	ldr	r6, [pc, #160]	; (5498 <usb_isr+0x5f8>)
    53f6:	f640 1321 	movw	r3, #2337	; 0x921
    53fa:	429a      	cmp	r2, r3
    53fc:	d118      	bne.n	5430 <usb_isr+0x590>
    53fe:	8873      	ldrh	r3, [r6, #2]
    5400:	059b      	lsls	r3, r3, #22
    5402:	d515      	bpl.n	5430 <usb_isr+0x590>
			print("]");
			print( NL );
			#endif

			// Interface
			switch ( setup.wIndex & 0xFF )
    5404:	7933      	ldrb	r3, [r6, #4]
    5406:	b123      	cbz	r3, 5412 <usb_isr+0x572>
    5408:	2b01      	cmp	r3, #1
    540a:	d107      	bne.n	541c <usb_isr+0x57c>
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    540c:	f899 2001 	ldrb.w	r2, [r9, #1]
    5410:	e001      	b.n	5416 <usb_isr+0x576>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    5412:	f899 2000 	ldrb.w	r2, [r9]
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    5416:	4b21      	ldr	r3, [pc, #132]	; (549c <usb_isr+0x5fc>)
    5418:	701a      	strb	r2, [r3, #0]
    541a:	e009      	b.n	5430 <usb_isr+0x590>
				break;
			default:
				warn_msg("Unknown interface - ");
    541c:	4816      	ldr	r0, [pc, #88]	; (5478 <usb_isr+0x5d8>)
    541e:	f001 f881 	bl	6524 <_print>
				printHex( setup.wIndex );
    5422:	88b0      	ldrh	r0, [r6, #4]
    5424:	2101      	movs	r1, #1
    5426:	f001 f91f 	bl	6668 <printHex_op>
				print( NL );
    542a:	4814      	ldr	r0, [pc, #80]	; (547c <usb_isr+0x5dc>)
    542c:	f001 f87a 	bl	6524 <_print>
			//endpoint0_transmit( NULL, 0 );
		}
		#endif

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    5430:	4b05      	ldr	r3, [pc, #20]	; (5448 <usb_isr+0x5a8>)
    5432:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
    5436:	e058      	b.n	54ea <usb_isr+0x64a>
    5438:	1fff9251 	.word	0x1fff9251
    543c:	00009033 	.word	0x00009033
    5440:	1001c830 	.word	0x1001c830
    5444:	00400088 	.word	0x00400088
    5448:	004000c8 	.word	0x004000c8
    544c:	1fff925a 	.word	0x1fff925a
    5450:	1fff9252 	.word	0x1fff9252
    5454:	400720c0 	.word	0x400720c0
    5458:	000091a0 	.word	0x000091a0
    545c:	000096ea 	.word	0x000096ea
    5460:	000091d2 	.word	0x000091d2
    5464:	00009213 	.word	0x00009213
    5468:	00009209 	.word	0x00009209
    546c:	00009040 	.word	0x00009040
    5470:	1fff924c 	.word	0x1fff924c
    5474:	1fff926c 	.word	0x1fff926c
    5478:	00009248 	.word	0x00009248
    547c:	000092ee 	.word	0x000092ee
    5480:	1fff90fc 	.word	0x1fff90fc
    5484:	1fff9100 	.word	0x1fff9100
    5488:	1fff8c44 	.word	0x1fff8c44
    548c:	1fff9144 	.word	0x1fff9144
    5490:	40072094 	.word	0x40072094
    5494:	1fff8fe4 	.word	0x1fff8fe4
    5498:	1fff9244 	.word	0x1fff9244
    549c:	1fff90fd 	.word	0x1fff90fd
		break;

	case 0x09: // IN transaction completed to host
		data = ep0_tx_ptr;
    54a0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 56e0 <usb_isr+0x840>
    54a4:	f8d8 7000 	ldr.w	r7, [r8]
		if ( data ) print(" DATA ");
		print(NL);
		#endif

		// send remaining data, if any...
		if ( data )
    54a8:	b1af      	cbz	r7, 54d6 <usb_isr+0x636>
		{
			size = ep0_tx_len;
    54aa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 56e4 <usb_isr+0x844>
    54ae:	f8b9 4000 	ldrh.w	r4, [r9]
    54b2:	2c40      	cmp	r4, #64	; 0x40
    54b4:	4626      	mov	r6, r4
    54b6:	bf28      	it	cs
    54b8:	2640      	movcs	r6, #64	; 0x40
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
    54ba:	4638      	mov	r0, r7
    54bc:	4631      	mov	r1, r6
    54be:	f7ff fbbf 	bl	4c40 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    54c2:	1ba0      	subs	r0, r4, r6
    54c4:	b280      	uxth	r0, r0
    54c6:	f8a9 0000 	strh.w	r0, [r9]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    54ca:	b908      	cbnz	r0, 54d0 <usb_isr+0x630>
    54cc:	2e40      	cmp	r6, #64	; 0x40
    54ce:	d100      	bne.n	54d2 <usb_isr+0x632>
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
			data += size;
    54d0:	19b8      	adds	r0, r7, r6
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    54d2:	f8c8 0000 	str.w	r0, [r8]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    54d6:	4b6e      	ldr	r3, [pc, #440]	; (5690 <usb_isr+0x7f0>)
    54d8:	881a      	ldrh	r2, [r3, #0]
    54da:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    54de:	d104      	bne.n	54ea <usb_isr+0x64a>
		{
			setup.bRequest = 0;
    54e0:	2200      	movs	r2, #0
    54e2:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    54e4:	789a      	ldrb	r2, [r3, #2]
    54e6:	4b6b      	ldr	r3, [pc, #428]	; (5694 <usb_isr+0x7f4>)
    54e8:	701a      	strb	r2, [r3, #0]
		print(" ms");
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    54ea:	4b6b      	ldr	r3, [pc, #428]	; (5698 <usb_isr+0x7f8>)
    54ec:	2201      	movs	r2, #1
    54ee:	701a      	strb	r2, [r3, #0]
    54f0:	e07b      	b.n	55ea <usb_isr+0x74a>
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    54f2:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    54f6:	3901      	subs	r1, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    54f8:	6872      	ldr	r2, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    54fa:	f003 0308 	and.w	r3, r3, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    54fe:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    5502:	fa5f f881 	uxtb.w	r8, r1

			if ( stat & 0x08 )
    5506:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    550a:	2b00      	cmp	r3, #0
    550c:	d03a      	beq.n	5584 <usb_isr+0x6e4>
			{ // transmit
				usb_free( packet );
    550e:	f000 fb03 	bl	5b18 <usb_free>
				packet = tx_first[ endpoint ];
    5512:	4862      	ldr	r0, [pc, #392]	; (569c <usb_isr+0x7fc>)
    5514:	4b62      	ldr	r3, [pc, #392]	; (56a0 <usb_isr+0x800>)
    5516:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
				if ( packet )
    551a:	b1fa      	cbz	r2, 555c <usb_isr+0x6bc>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    551c:	6851      	ldr	r1, [r2, #4]
    551e:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
					b->addr = packet->buf;
    5522:	f102 0108 	add.w	r1, r2, #8
    5526:	6071      	str	r1, [r6, #4]
					switch ( tx_state[ endpoint ] )
    5528:	f813 1008 	ldrb.w	r1, [r3, r8]
    552c:	2903      	cmp	r1, #3
    552e:	d80c      	bhi.n	554a <usb_isr+0x6aa>
    5530:	e8df f001 	tbb	[pc, r1]
    5534:	08060402 	.word	0x08060402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    5538:	2103      	movs	r1, #3
    553a:	e004      	b.n	5546 <usb_isr+0x6a6>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    553c:	2102      	movs	r1, #2
    553e:	e002      	b.n	5546 <usb_isr+0x6a6>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    5540:	2105      	movs	r1, #5
    5542:	e000      	b.n	5546 <usb_isr+0x6a6>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    5544:	2104      	movs	r1, #4
    5546:	f803 1008 	strb.w	r1, [r3, r8]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    554a:	f016 0f08 	tst.w	r6, #8
    554e:	8812      	ldrh	r2, [r2, #0]
    5550:	bf14      	ite	ne
    5552:	23c8      	movne	r3, #200	; 0xc8
    5554:	2388      	moveq	r3, #136	; 0x88
    5556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    555a:	e044      	b.n	55e6 <usb_isr+0x746>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    555c:	f813 2008 	ldrb.w	r2, [r3, r8]
    5560:	2a03      	cmp	r2, #3
    5562:	d807      	bhi.n	5574 <usb_isr+0x6d4>
    5564:	e8df f002 	tbb	[pc, r2]
    5568:	04024141 	.word	0x04024141
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    556c:	2200      	movs	r2, #0
    556e:	e006      	b.n	557e <usb_isr+0x6de>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5570:	2201      	movs	r2, #1
    5572:	e004      	b.n	557e <usb_isr+0x6de>
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    5574:	f016 0f08 	tst.w	r6, #8
    5578:	bf14      	ite	ne
    557a:	2203      	movne	r2, #3
    557c:	2202      	moveq	r2, #2
    557e:	f803 2008 	strb.w	r2, [r3, r8]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    5582:	e032      	b.n	55ea <usb_isr+0x74a>
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    5584:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    5588:	0c19      	lsrs	r1, r3, #16
    558a:	f822 1c08 	strh.w	r1, [r2, #-8]
				if ( packet->len > 0 )
    558e:	b321      	cbz	r1, 55da <usb_isr+0x73a>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    5590:	4b44      	ldr	r3, [pc, #272]	; (56a4 <usb_isr+0x804>)
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    5592:	f822 ec06 	strh.w	lr, [r2, #-6]
					packet->next = NULL;
    5596:	f842 ec04 	str.w	lr, [r2, #-4]
					if ( rx_first[ endpoint ] == NULL )
    559a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    559e:	f8df e148 	ldr.w	lr, [pc, #328]	; 56e8 <usb_isr+0x848>
    55a2:	b912      	cbnz	r2, 55aa <usb_isr+0x70a>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    55a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    55a8:	e002      	b.n	55b0 <usb_isr+0x710>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    55aa:	f85e 3028 	ldr.w	r3, [lr, r8, lsl #2]
    55ae:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    55b0:	4a3d      	ldr	r2, [pc, #244]	; (56a8 <usb_isr+0x808>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    55b2:	f84e 0028 	str.w	r0, [lr, r8, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    55b6:	f832 3018 	ldrh.w	r3, [r2, r8, lsl #1]
    55ba:	440b      	add	r3, r1
    55bc:	f822 3018 	strh.w	r3, [r2, r8, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    55c0:	f000 fa8c 	bl	5adc <usb_malloc>
					if ( packet )
    55c4:	b110      	cbz	r0, 55cc <usb_isr+0x72c>
					{
						b->addr = packet->buf;
    55c6:	3008      	adds	r0, #8
    55c8:	6070      	str	r0, [r6, #4]
    55ca:	e006      	b.n	55da <usb_isr+0x73a>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    55cc:	4a37      	ldr	r2, [pc, #220]	; (56ac <usb_isr+0x80c>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    55ce:	f847 0034 	str.w	r0, [r7, r4, lsl #3]
						usb_rx_memory_needed++;
    55d2:	7813      	ldrb	r3, [r2, #0]
    55d4:	3301      	adds	r3, #1
    55d6:	7013      	strb	r3, [r2, #0]
    55d8:	e007      	b.n	55ea <usb_isr+0x74a>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    55da:	4a35      	ldr	r2, [pc, #212]	; (56b0 <usb_isr+0x810>)
    55dc:	4b35      	ldr	r3, [pc, #212]	; (56b4 <usb_isr+0x814>)
    55de:	f016 0f08 	tst.w	r6, #8
    55e2:	bf08      	it	eq
    55e4:	4613      	moveq	r3, r2
    55e6:	f847 3034 	str.w	r3, [r7, r4, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    55ea:	2308      	movs	r3, #8
    55ec:	702b      	strb	r3, [r5, #0]
		goto restart;
    55ee:	e459      	b.n	4ea4 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    55f0:	07f5      	lsls	r5, r6, #31
    55f2:	d51e      	bpl.n	5632 <usb_isr+0x792>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    55f4:	4928      	ldr	r1, [pc, #160]	; (5698 <usb_isr+0x7f8>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    55f6:	482e      	ldr	r0, [pc, #184]	; (56b0 <usb_isr+0x810>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    55f8:	4d2f      	ldr	r5, [pc, #188]	; (56b8 <usb_isr+0x818>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    55fa:	2302      	movs	r3, #2
    55fc:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    55fe:	4b2f      	ldr	r3, [pc, #188]	; (56bc <usb_isr+0x81c>)
    5600:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    5602:	4b2f      	ldr	r3, [pc, #188]	; (56c0 <usb_isr+0x820>)
    5604:	6018      	str	r0, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    5606:	6098      	str	r0, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    5608:	482e      	ldr	r0, [pc, #184]	; (56c4 <usb_isr+0x824>)
    560a:	60d8      	str	r0, [r3, #12]
		table[index( 0, TX, EVEN ) ].desc = 0;
    560c:	611a      	str	r2, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    560e:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    5610:	605d      	str	r5, [r3, #4]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
		table[index( 0, TX, ODD ) ].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5612:	4b2d      	ldr	r3, [pc, #180]	; (56c8 <usb_isr+0x828>)
    5614:	200d      	movs	r0, #13
    5616:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5618:	482c      	ldr	r0, [pc, #176]	; (56cc <usb_isr+0x82c>)
    561a:	23ff      	movs	r3, #255	; 0xff
    561c:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    561e:	7023      	strb	r3, [r4, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5620:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5622:	4a2b      	ldr	r2, [pc, #172]	; (56d0 <usb_isr+0x830>)
    5624:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5626:	4b2b      	ldr	r3, [pc, #172]	; (56d4 <usb_isr+0x834>)
    5628:	22bf      	movs	r2, #191	; 0xbf
    562a:	701a      	strb	r2, [r3, #0]
			USB_INTEN_USBRSTEN |
			USB_INTEN_RESUMEEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    562c:	2301      	movs	r3, #1
    562e:	700b      	strb	r3, [r1, #0]
		return;
    5630:	e02b      	b.n	568a <usb_isr+0x7ea>
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    5632:	0630      	lsls	r0, r6, #24
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5634:	bf41      	itttt	mi
    5636:	4b24      	ldrmi	r3, [pc, #144]	; (56c8 <usb_isr+0x828>)
    5638:	220d      	movmi	r2, #13
    563a:	701a      	strbmi	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    563c:	2380      	movmi	r3, #128	; 0x80
    563e:	bf48      	it	mi
    5640:	7023      	strbmi	r3, [r4, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    5642:	07b1      	lsls	r1, r6, #30
	{
		uint8_t err = USB0_ERRSTAT;
    5644:	bf41      	itttt	mi
    5646:	4a21      	ldrmi	r2, [pc, #132]	; (56cc <usb_isr+0x82c>)
    5648:	7813      	ldrbmi	r3, [r2, #0]
    564a:	b2db      	uxtbmi	r3, r3
		USB0_ERRSTAT = err;
    564c:	7013      	strbmi	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    564e:	bf44      	itt	mi
    5650:	2302      	movmi	r3, #2
    5652:	7023      	strbmi	r3, [r4, #0]
	}

	// USB Host signalling device to enter 'sleep' state
	// The USB Module triggers this interrupt when it detects the bus has been idle for 3 ms
	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    5654:	06f2      	lsls	r2, r6, #27
    5656:	d509      	bpl.n	566c <usb_isr+0x7cc>
#if enableUSBSuspend_define == 1
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has requested USB sleep/suspend state");
		#endif
		Output_update_usb_current( 100 ); // Set to 100 mA
    5658:	2064      	movs	r0, #100	; 0x64
    565a:	f7ff fad9 	bl	4c10 <Output_update_usb_current>
		usb_dev_sleep = 1;
    565e:	4b1e      	ldr	r3, [pc, #120]	; (56d8 <usb_isr+0x838>)
    5660:	2201      	movs	r2, #1
    5662:	701a      	strb	r2, [r3, #0]
#else
		info_print("USB Suspend Detected - Firmware USB Suspend Disabled");
#endif
		USB0_ISTAT |= USB_ISTAT_SLEEP;
    5664:	7823      	ldrb	r3, [r4, #0]
    5666:	f043 0310 	orr.w	r3, r3, #16
    566a:	7023      	strb	r3, [r4, #0]
	}

	// On USB Resume, unset the usb_dev_sleep so we don't keep sending resume signals
	if ( (status & USB_ISTAT_RESUME /* 20 */ ) )
    566c:	06b3      	lsls	r3, r6, #26
    566e:	d50c      	bpl.n	568a <usb_isr+0x7ea>
	{
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has woken-up/resumed from sleep/suspend state");
		#endif
		Output_update_usb_current( *usb_bMaxPower * 2 );
    5670:	4b1a      	ldr	r3, [pc, #104]	; (56dc <usb_isr+0x83c>)
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	7818      	ldrb	r0, [r3, #0]
    5676:	0040      	lsls	r0, r0, #1
    5678:	f7ff faca 	bl	4c10 <Output_update_usb_current>
		usb_dev_sleep = 0;
    567c:	4b16      	ldr	r3, [pc, #88]	; (56d8 <usb_isr+0x838>)
    567e:	2200      	movs	r2, #0
    5680:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT |= USB_ISTAT_RESUME;
    5682:	7823      	ldrb	r3, [r4, #0]
    5684:	f043 0320 	orr.w	r3, r3, #32
    5688:	7023      	strb	r3, [r4, #0]
	}
}
    568a:	b003      	add	sp, #12
    568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5690:	1fff9244 	.word	0x1fff9244
    5694:	40072098 	.word	0x40072098
    5698:	40072094 	.word	0x40072094
    569c:	1fff91f4 	.word	0x1fff91f4
    56a0:	1fff9138 	.word	0x1fff9138
    56a4:	1fff9188 	.word	0x1fff9188
    56a8:	1fffa282 	.word	0x1fffa282
    56ac:	1fff9251 	.word	0x1fff9251
    56b0:	00400088 	.word	0x00400088
    56b4:	004000c8 	.word	0x004000c8
    56b8:	1fff9148 	.word	0x1fff9148
    56bc:	1fff91b0 	.word	0x1fff91b0
    56c0:	1fff8000 	.word	0x1fff8000
    56c4:	1fff91b4 	.word	0x1fff91b4
    56c8:	400720c0 	.word	0x400720c0
    56cc:	40072088 	.word	0x40072088
    56d0:	4007208c 	.word	0x4007208c
    56d4:	40072084 	.word	0x40072084
    56d8:	1fff9250 	.word	0x1fff9250
    56dc:	1fff8d20 	.word	0x1fff8d20
    56e0:	1fff910c 	.word	0x1fff910c
    56e4:	1fff9144 	.word	0x1fff9144
    56e8:	1fff9110 	.word	0x1fff9110

000056ec <usb_init>:
{
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    56ec:	4b33      	ldr	r3, [pc, #204]	; (57bc <usb_init+0xd0>)
    56ee:	681a      	ldr	r2, [r3, #0]
    56f0:	4b33      	ldr	r3, [pc, #204]	; (57c0 <usb_init+0xd4>)
}



uint8_t usb_init()
{
    56f2:	b510      	push	{r4, lr}
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    56f4:	601a      	str	r2, [r3, #0]
	USBInit_Ticks = 0;
    56f6:	4b33      	ldr	r3, [pc, #204]	; (57c4 <usb_init+0xd8>)
    56f8:	2400      	movs	r4, #0
    56fa:	801c      	strh	r4, [r3, #0]

	// XXX Set wTotalLength here instead of using defines
	//     Simplifies defines considerably
	usb_set_config_descriptor_size();
    56fc:	f7ff fa98 	bl	4c30 <usb_set_config_descriptor_size>
	// It's split up into 4 32 bit registers
	// 1) Read out register
	// 2) Convert to UTF-16-LE
	// 3) Write to USB Descriptor Memory (space is pre-allocated)
	extern struct usb_string_descriptor_struct usb_string_serial_number_default;
	hex32ToStr16( SIM_UIDH,  &(usb_string_serial_number_default.wString[0]), 8 );
    5700:	4b31      	ldr	r3, [pc, #196]	; (57c8 <usb_init+0xdc>)
    5702:	4932      	ldr	r1, [pc, #200]	; (57cc <usb_init+0xe0>)
    5704:	6818      	ldr	r0, [r3, #0]
    5706:	2208      	movs	r2, #8
    5708:	f000 fff5 	bl	66f6 <hex32ToStr16>
	hex32ToStr16( SIM_UIDMH, &(usb_string_serial_number_default.wString[8]), 8 );
    570c:	4b30      	ldr	r3, [pc, #192]	; (57d0 <usb_init+0xe4>)
    570e:	4931      	ldr	r1, [pc, #196]	; (57d4 <usb_init+0xe8>)
    5710:	6818      	ldr	r0, [r3, #0]
    5712:	2208      	movs	r2, #8
    5714:	f000 ffef 	bl	66f6 <hex32ToStr16>
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
    5718:	4b2f      	ldr	r3, [pc, #188]	; (57d8 <usb_init+0xec>)
    571a:	4930      	ldr	r1, [pc, #192]	; (57dc <usb_init+0xf0>)
    571c:	6818      	ldr	r0, [r3, #0]
    571e:	2208      	movs	r2, #8
    5720:	f000 ffe9 	bl	66f6 <hex32ToStr16>
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
    5724:	4b2e      	ldr	r3, [pc, #184]	; (57e0 <usb_init+0xf4>)
    5726:	492f      	ldr	r1, [pc, #188]	; (57e4 <usb_init+0xf8>)
    5728:	6818      	ldr	r0, [r3, #0]
    572a:	2208      	movs	r2, #8
    572c:	f000 ffe3 	bl	66f6 <hex32ToStr16>
    5730:	4622      	mov	r2, r4
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    5732:	4b2d      	ldr	r3, [pc, #180]	; (57e8 <usb_init+0xfc>)
    5734:	2100      	movs	r1, #0
    5736:	50d1      	str	r1, [r2, r3]
    5738:	1898      	adds	r0, r3, r2
    573a:	3208      	adds	r2, #8
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    573c:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	{
		table[i].desc = 0;
		table[i].addr = 0;
    5740:	6041      	str	r1, [r0, #4]
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    5742:	d1f6      	bne.n	5732 <usb_init+0x46>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5744:	4929      	ldr	r1, [pc, #164]	; (57ec <usb_init+0x100>)
    5746:	680a      	ldr	r2, [r1, #0]
    5748:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    574c:	600a      	str	r2, [r1, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    574e:	4a28      	ldr	r2, [pc, #160]	; (57f0 <usb_init+0x104>)
    5750:	2180      	movs	r1, #128	; 0x80
    5752:	7011      	strb	r1, [r2, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    5754:	7810      	ldrb	r0, [r2, #0]
    5756:	4926      	ldr	r1, [pc, #152]	; (57f0 <usb_init+0x104>)
    5758:	0600      	lsls	r0, r0, #24
    575a:	d4fb      	bmi.n	5754 <usb_init+0x68>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    575c:	4a25      	ldr	r2, [pc, #148]	; (57f4 <usb_init+0x108>)
    575e:	f3c3 2007 	ubfx	r0, r3, #8, #8
    5762:	7010      	strb	r0, [r2, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5764:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5768:	0e1b      	lsrs	r3, r3, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    576a:	7510      	strb	r0, [r2, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    576c:	7613      	strb	r3, [r2, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    576e:	23ff      	movs	r3, #255	; 0xff
    5770:	f802 3c1c 	strb.w	r3, [r2, #-28]
	USB0_ERRSTAT = 0xFF;
    5774:	f802 3c14 	strb.w	r3, [r2, #-20]
	USB0_OTGISTAT = 0xFF;
    5778:	f802 3c8c 	strb.w	r3, [r2, #-140]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    577c:	780b      	ldrb	r3, [r1, #0]
    577e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5782:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5784:	4b1c      	ldr	r3, [pc, #112]	; (57f8 <usb_init+0x10c>)
    5786:	2001      	movs	r0, #1
    5788:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    578a:	2300      	movs	r3, #0
    578c:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5790:	f802 0c18 	strb.w	r0, [r2, #-24]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    5794:	4a19      	ldr	r2, [pc, #100]	; (57fc <usb_init+0x110>)
    5796:	2170      	movs	r1, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    5798:	f46f 7450 	mvn.w	r4, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    579c:	7011      	strb	r1, [r2, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    579e:	4422      	add	r2, r4
    57a0:	f44f 7100 	mov.w	r1, #512	; 0x200
    57a4:	6011      	str	r1, [r2, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    57a6:	f102 42c0 	add.w	r2, r2, #1610612736	; 0x60000000
    57aa:	f502 22c8 	add.w	r2, r2, #409600	; 0x64000
    57ae:	2110      	movs	r1, #16
    57b0:	7011      	strb	r1, [r2, #0]

	// Do not check for power negotiation delay until Get Configuration Descriptor
	power_neg_delay = 0;
    57b2:	4a13      	ldr	r2, [pc, #76]	; (5800 <usb_init+0x114>)
    57b4:	7013      	strb	r3, [r2, #0]

	// During initialization host isn't sleeping
	usb_dev_sleep = 0;
    57b6:	4a13      	ldr	r2, [pc, #76]	; (5804 <usb_init+0x118>)
    57b8:	7013      	strb	r3, [r2, #0]

	return 1;
}
    57ba:	bd10      	pop	{r4, pc}
    57bc:	1fff8fec 	.word	0x1fff8fec
    57c0:	1fffa27c 	.word	0x1fffa27c
    57c4:	1fffa242 	.word	0x1fffa242
    57c8:	40048054 	.word	0x40048054
    57cc:	1fff8f7e 	.word	0x1fff8f7e
    57d0:	40048058 	.word	0x40048058
    57d4:	1fff8f8e 	.word	0x1fff8f8e
    57d8:	4004805c 	.word	0x4004805c
    57dc:	1fff8f9e 	.word	0x1fff8f9e
    57e0:	40048060 	.word	0x40048060
    57e4:	1fff8fae 	.word	0x1fff8fae
    57e8:	1fff8000 	.word	0x1fff8000
    57ec:	40048034 	.word	0x40048034
    57f0:	4007210c 	.word	0x4007210c
    57f4:	4007209c 	.word	0x4007209c
    57f8:	40072094 	.word	0x40072094
    57fc:	e000e449 	.word	0xe000e449
    5800:	1fff9142 	.word	0x1fff9142
    5804:	1fff9250 	.word	0x1fff9250

00005808 <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    5808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    580c:	f246 4601 	movw	r6, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    5810:	4b9d      	ldr	r3, [pc, #628]	; (5a88 <usb_keyboard_send+0x280>)
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	b90b      	cbnz	r3, 581a <usb_keyboard_send+0x12>
		{
			erro_print("USB not configured...");
    5816:	489d      	ldr	r0, [pc, #628]	; (5a8c <usb_keyboard_send+0x284>)
    5818:	e02e      	b.n	5878 <usb_keyboard_send+0x70>
			return;
		}

		// Try to wake up the host if it's asleep
		if ( usb_resume() )
    581a:	f7ff fab3 	bl	4d84 <usb_resume>
    581e:	b120      	cbz	r0, 582a <usb_keyboard_send+0x22>
		{
			// Drop packet
			USBKeys_Changed = USBKeyChangeState_None;
    5820:	4b9b      	ldr	r3, [pc, #620]	; (5a90 <usb_keyboard_send+0x288>)
    5822:	2200      	movs	r2, #0
    5824:	701a      	strb	r2, [r3, #0]
			return;
    5826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    582a:	4b9a      	ldr	r3, [pc, #616]	; (5a94 <usb_keyboard_send+0x28c>)
    582c:	4d9a      	ldr	r5, [pc, #616]	; (5a98 <usb_keyboard_send+0x290>)
    582e:	781a      	ldrb	r2, [r3, #0]
    5830:	461f      	mov	r7, r3
    5832:	b93a      	cbnz	r2, 5844 <usb_keyboard_send+0x3c>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    5834:	2001      	movs	r0, #1
    5836:	f7ff fa57 	bl	4ce8 <usb_tx_packet_count>
    583a:	2803      	cmp	r0, #3
    583c:	d90e      	bls.n	585c <usb_keyboard_send+0x54>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    583e:	3e01      	subs	r6, #1
    5840:	d112      	bne.n	5868 <usb_keyboard_send+0x60>
    5842:	e013      	b.n	586c <usb_keyboard_send+0x64>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	2b01      	cmp	r3, #1
    5848:	d101      	bne.n	584e <usb_keyboard_send+0x46>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    584a:	2002      	movs	r0, #2
    584c:	e7f3      	b.n	5836 <usb_keyboard_send+0x2e>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    584e:	4b90      	ldr	r3, [pc, #576]	; (5a90 <usb_keyboard_send+0x288>)
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	f013 0f60 	tst.w	r3, #96	; 0x60
    5856:	d0f2      	beq.n	583e <usb_keyboard_send+0x36>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    5858:	2003      	movs	r0, #3
    585a:	e7ec      	b.n	5836 <usb_keyboard_send+0x2e>
			{
				tx_packet = usb_malloc();
    585c:	f000 f93e 	bl	5adc <usb_malloc>
				if ( tx_packet )
    5860:	4604      	mov	r4, r0
    5862:	2800      	cmp	r0, #0
    5864:	d0eb      	beq.n	583e <usb_keyboard_send+0x36>
    5866:	e00e      	b.n	5886 <usb_keyboard_send+0x7e>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5868:	782b      	ldrb	r3, [r5, #0]
    586a:	b14b      	cbz	r3, 5880 <usb_keyboard_send+0x78>
		{
			transmit_previous_timeout = 1;
    586c:	2301      	movs	r3, #1
    586e:	702b      	strb	r3, [r5, #0]
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    5870:	4b87      	ldr	r3, [pc, #540]	; (5a90 <usb_keyboard_send+0x288>)
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    5872:	488a      	ldr	r0, [pc, #552]	; (5a9c <usb_keyboard_send+0x294>)

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    5874:	2200      	movs	r2, #0
    5876:	701a      	strb	r2, [r3, #0]

		break;
	}

	return;
}
    5878:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    587c:	f000 be52 	b.w	6524 <_print>
			#endif
			// Try to wakeup
			return;
		}

		yield();
    5880:	f7fc fe86 	bl	2590 <yield>
	}
    5884:	e7c4      	b.n	5810 <usb_keyboard_send+0x8>

	transmit_previous_timeout = 0;
    5886:	2300      	movs	r3, #0
    5888:	702b      	strb	r3, [r5, #0]

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    588a:	4d81      	ldr	r5, [pc, #516]	; (5a90 <usb_keyboard_send+0x288>)
    588c:	782b      	ldrb	r3, [r5, #0]
    588e:	069a      	lsls	r2, r3, #26
    5890:	d51a      	bpl.n	58c8 <usb_keyboard_send+0xc0>
	{
		if ( Output_DebugMode )
    5892:	4b83      	ldr	r3, [pc, #524]	; (5aa0 <usb_keyboard_send+0x298>)
    5894:	4e83      	ldr	r6, [pc, #524]	; (5aa4 <usb_keyboard_send+0x29c>)
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	b14b      	cbz	r3, 58ae <usb_keyboard_send+0xa6>
		{
			print("SysCtrl[");
    589a:	4883      	ldr	r0, [pc, #524]	; (5aa8 <usb_keyboard_send+0x2a0>)
    589c:	f000 fe42 	bl	6524 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    58a0:	7830      	ldrb	r0, [r6, #0]
    58a2:	2102      	movs	r1, #2
    58a4:	f000 fee0 	bl	6668 <printHex_op>
			print( "] " NL );
    58a8:	4880      	ldr	r0, [pc, #512]	; (5aac <usb_keyboard_send+0x2a4>)
    58aa:	f000 fe3b 	bl	6524 <_print>
		}

		*tx_buf++ = 0x02; // ID
    58ae:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    58b0:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    58b2:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    58b4:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    58b6:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    58b8:	2003      	movs	r0, #3
    58ba:	4621      	mov	r1, r4
    58bc:	f7ff fa84 	bl	4dc8 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    58c0:	782b      	ldrb	r3, [r5, #0]
    58c2:	f023 0320 	bic.w	r3, r3, #32
    58c6:	e0db      	b.n	5a80 <usb_keyboard_send+0x278>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    58c8:	065b      	lsls	r3, r3, #25
    58ca:	d51b      	bpl.n	5904 <usb_keyboard_send+0xfc>
	{
		if ( Output_DebugMode )
    58cc:	4b74      	ldr	r3, [pc, #464]	; (5aa0 <usb_keyboard_send+0x298>)
    58ce:	4e78      	ldr	r6, [pc, #480]	; (5ab0 <usb_keyboard_send+0x2a8>)
    58d0:	781b      	ldrb	r3, [r3, #0]
    58d2:	b14b      	cbz	r3, 58e8 <usb_keyboard_send+0xe0>
		{
			print("ConsCtrl[");
    58d4:	4877      	ldr	r0, [pc, #476]	; (5ab4 <usb_keyboard_send+0x2ac>)
    58d6:	f000 fe25 	bl	6524 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    58da:	8830      	ldrh	r0, [r6, #0]
    58dc:	2102      	movs	r1, #2
    58de:	f000 fec3 	bl	6668 <printHex_op>
			print( "] " NL );
    58e2:	4872      	ldr	r0, [pc, #456]	; (5aac <usb_keyboard_send+0x2a4>)
    58e4:	f000 fe1e 	bl	6524 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    58e8:	8833      	ldrh	r3, [r6, #0]
    58ea:	7263      	strb	r3, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    58ec:	2003      	movs	r0, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    58ee:	0a1b      	lsrs	r3, r3, #8
    58f0:	72a3      	strb	r3, [r4, #10]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    58f2:	7220      	strb	r0, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    58f4:	8020      	strh	r0, [r4, #0]

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    58f6:	4621      	mov	r1, r4
    58f8:	f7ff fa66 	bl	4dc8 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    58fc:	782b      	ldrb	r3, [r5, #0]
    58fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5902:	e0bd      	b.n	5a80 <usb_keyboard_send+0x278>
		return;
	}

	switch ( USBKeys_Protocol )
    5904:	783b      	ldrb	r3, [r7, #0]
    5906:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    590a:	b11b      	cbz	r3, 5914 <usb_keyboard_send+0x10c>
    590c:	2e01      	cmp	r6, #1
    590e:	d045      	beq.n	599c <usb_keyboard_send+0x194>
    5910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    5914:	4b62      	ldr	r3, [pc, #392]	; (5aa0 <usb_keyboard_send+0x298>)
    5916:	4f68      	ldr	r7, [pc, #416]	; (5ab8 <usb_keyboard_send+0x2b0>)
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	b363      	cbz	r3, 5976 <usb_keyboard_send+0x16e>
		{
			dbug_msg("Boot USB: ");
    591c:	4867      	ldr	r0, [pc, #412]	; (5abc <usb_keyboard_send+0x2b4>)
    591e:	f000 fe01 	bl	6524 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    5922:	2102      	movs	r1, #2
    5924:	7838      	ldrb	r0, [r7, #0]
    5926:	f000 fe9f 	bl	6668 <printHex_op>
			print(" ");
    592a:	4865      	ldr	r0, [pc, #404]	; (5ac0 <usb_keyboard_send+0x2b8>)
    592c:	f000 fdfa 	bl	6524 <_print>
			printHex( 0 );
    5930:	4630      	mov	r0, r6
    5932:	2101      	movs	r1, #1
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    5934:	4e63      	ldr	r6, [pc, #396]	; (5ac4 <usb_keyboard_send+0x2bc>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    5936:	f000 fe97 	bl	6668 <printHex_op>
			print(" ");
    593a:	4861      	ldr	r0, [pc, #388]	; (5ac0 <usb_keyboard_send+0x2b8>)
    593c:	f000 fdf2 	bl	6524 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    5940:	7830      	ldrb	r0, [r6, #0]
    5942:	2102      	movs	r1, #2
    5944:	f000 fe90 	bl	6668 <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    5948:	7870      	ldrb	r0, [r6, #1]
    594a:	2102      	movs	r1, #2
    594c:	f000 fe8c 	bl	6668 <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    5950:	78b0      	ldrb	r0, [r6, #2]
    5952:	2102      	movs	r1, #2
    5954:	f000 fe88 	bl	6668 <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    5958:	78f0      	ldrb	r0, [r6, #3]
    595a:	2102      	movs	r1, #2
    595c:	f000 fe84 	bl	6668 <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    5960:	7930      	ldrb	r0, [r6, #4]
    5962:	2102      	movs	r1, #2
    5964:	f000 fe80 	bl	6668 <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    5968:	7970      	ldrb	r0, [r6, #5]
    596a:	2102      	movs	r1, #2
    596c:	f000 fe7c 	bl	6668 <printHex_op>
			print( NL );
    5970:	4855      	ldr	r0, [pc, #340]	; (5ac8 <usb_keyboard_send+0x2c0>)
    5972:	f000 fdd7 	bl	6524 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    5976:	783b      	ldrb	r3, [r7, #0]
    5978:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    597a:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    597c:	4951      	ldr	r1, [pc, #324]	; (5ac4 <usb_keyboard_send+0x2bc>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    597e:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    5980:	2206      	movs	r2, #6
    5982:	f104 000a 	add.w	r0, r4, #10
    5986:	f7fc fdf7 	bl	2578 <memcpy>
		tx_packet->len = 8;
    598a:	2308      	movs	r3, #8
    598c:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    598e:	2001      	movs	r0, #1
    5990:	4621      	mov	r1, r4
    5992:	f7ff fa19 	bl	4dc8 <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    5996:	702e      	strb	r6, [r5, #0]
		break;
    5998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    599c:	4b40      	ldr	r3, [pc, #256]	; (5aa0 <usb_keyboard_send+0x298>)
    599e:	781a      	ldrb	r2, [r3, #0]
    59a0:	461e      	mov	r6, r3
    59a2:	b112      	cbz	r2, 59aa <usb_keyboard_send+0x1a2>
		{
			dbug_msg("NKRO USB: ");
    59a4:	4849      	ldr	r0, [pc, #292]	; (5acc <usb_keyboard_send+0x2c4>)
    59a6:	f000 fdbd 	bl	6524 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    59aa:	782b      	ldrb	r3, [r5, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d068      	beq.n	5a82 <usb_keyboard_send+0x27a>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    59b0:	7833      	ldrb	r3, [r6, #0]
    59b2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5ab8 <usb_keyboard_send+0x2b0>
    59b6:	b39b      	cbz	r3, 5a20 <usb_keyboard_send+0x218>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    59b8:	f898 0000 	ldrb.w	r0, [r8]
    59bc:	2102      	movs	r1, #2
    59be:	f000 fe53 	bl	6668 <printHex_op>
				print(" ");
    59c2:	483f      	ldr	r0, [pc, #252]	; (5ac0 <usb_keyboard_send+0x2b8>)
    59c4:	f000 fdae 	bl	6524 <_print>
    59c8:	2700      	movs	r7, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    59ca:	4e3e      	ldr	r6, [pc, #248]	; (5ac4 <usb_keyboard_send+0x2bc>)
    59cc:	2102      	movs	r1, #2
    59ce:	5df0      	ldrb	r0, [r6, r7]
    59d0:	3701      	adds	r7, #1
    59d2:	f000 fe49 	bl	6668 <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    59d6:	2f06      	cmp	r7, #6
    59d8:	d1f7      	bne.n	59ca <usb_keyboard_send+0x1c2>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    59da:	4839      	ldr	r0, [pc, #228]	; (5ac0 <usb_keyboard_send+0x2b8>)
    59dc:	f000 fda2 	bl	6524 <_print>
    59e0:	1d77      	adds	r7, r6, #5
    59e2:	f106 0913 	add.w	r9, r6, #19
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    59e6:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    59ea:	2102      	movs	r1, #2
    59ec:	f000 fe3c 	bl	6668 <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    59f0:	454f      	cmp	r7, r9
    59f2:	d1f8      	bne.n	59e6 <usb_keyboard_send+0x1de>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    59f4:	4832      	ldr	r0, [pc, #200]	; (5ac0 <usb_keyboard_send+0x2b8>)
    59f6:	f000 fd95 	bl	6524 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    59fa:	7d30      	ldrb	r0, [r6, #20]
    59fc:	4e34      	ldr	r6, [pc, #208]	; (5ad0 <usb_keyboard_send+0x2c8>)
    59fe:	2102      	movs	r1, #2
    5a00:	f000 fe32 	bl	6668 <printHex_op>
				print(" ");
    5a04:	482e      	ldr	r0, [pc, #184]	; (5ac0 <usb_keyboard_send+0x2b8>)
    5a06:	f000 fd8d 	bl	6524 <_print>
    5a0a:	1db7      	adds	r7, r6, #6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    5a0c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    5a10:	2102      	movs	r1, #2
    5a12:	f000 fe29 	bl	6668 <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    5a16:	42be      	cmp	r6, r7
    5a18:	d1f8      	bne.n	5a0c <usb_keyboard_send+0x204>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    5a1a:	482b      	ldr	r0, [pc, #172]	; (5ac8 <usb_keyboard_send+0x2c0>)
    5a1c:	f000 fd82 	bl	6524 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    5a20:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    5a22:	f898 3000 	ldrb.w	r3, [r8]
    5a26:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    5a28:	2701      	movs	r7, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    5a2a:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    5a2c:	7227      	strb	r7, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    5a2e:	4925      	ldr	r1, [pc, #148]	; (5ac4 <usb_keyboard_send+0x2bc>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    5a30:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    5a34:	2206      	movs	r2, #6
    5a36:	f7fc fd9f 	bl	2578 <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    5a3a:	8823      	ldrh	r3, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    5a3c:	4925      	ldr	r1, [pc, #148]	; (5ad4 <usb_keyboard_send+0x2cc>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    5a3e:	4620      	mov	r0, r4
    5a40:	3306      	adds	r3, #6
    5a42:	f820 3b10 	strh.w	r3, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    5a46:	220e      	movs	r2, #14
    5a48:	f7fc fd96 	bl	2578 <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    5a4c:	8823      	ldrh	r3, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    5a4e:	4920      	ldr	r1, [pc, #128]	; (5ad0 <usb_keyboard_send+0x2c8>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    5a50:	4620      	mov	r0, r4
    5a52:	330e      	adds	r3, #14
    5a54:	f820 3b1e 	strh.w	r3, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    5a58:	463a      	mov	r2, r7
    5a5a:	f7fc fd8d 	bl	2578 <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    5a5e:	8823      	ldrh	r3, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    5a60:	491d      	ldr	r1, [pc, #116]	; (5ad8 <usb_keyboard_send+0x2d0>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    5a62:	4620      	mov	r0, r4
    5a64:	443b      	add	r3, r7
    5a66:	f820 3b1f 	strh.w	r3, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    5a6a:	2206      	movs	r2, #6
    5a6c:	f7fc fd84 	bl	2578 <memcpy>
			tx_packet->len += 6;
    5a70:	8823      	ldrh	r3, [r4, #0]
    5a72:	3306      	adds	r3, #6
    5a74:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    5a76:	4630      	mov	r0, r6
    5a78:	4621      	mov	r1, r4
    5a7a:	f7ff f9a5 	bl	4dc8 <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    5a7e:	2300      	movs	r3, #0
    5a80:	702b      	strb	r3, [r5, #0]
    5a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a86:	bf00      	nop
    5a88:	1fff925a 	.word	0x1fff925a
    5a8c:	00009272 	.word	0x00009272
    5a90:	1fff90f1 	.word	0x1fff90f1
    5a94:	1fff8c44 	.word	0x1fff8c44
    5a98:	1fff925c 	.word	0x1fff925c
    5a9c:	0000929f 	.word	0x0000929f
    5aa0:	1fff9105 	.word	0x1fff9105
    5aa4:	1fffa240 	.word	0x1fffa240
    5aa8:	000092e3 	.word	0x000092e3
    5aac:	000092ec 	.word	0x000092ec
    5ab0:	1fffa280 	.word	0x1fffa280
    5ab4:	000092f1 	.word	0x000092f1
    5ab8:	1fff90f0 	.word	0x1fff90f0
    5abc:	000092fb 	.word	0x000092fb
    5ac0:	00006ee2 	.word	0x00006ee2
    5ac4:	1fffa244 	.word	0x1fffa244
    5ac8:	000092ee 	.word	0x000092ee
    5acc:	00009319 	.word	0x00009319
    5ad0:	1fffa258 	.word	0x1fffa258
    5ad4:	1fffa24a 	.word	0x1fffa24a
    5ad8:	1fffa259 	.word	0x1fffa259

00005adc <usb_malloc>:
// http://www.archivum.info/gnu.gcc.help/2006-08/00148/Re-GCC-Inline-Assembly.html
// http://gcc.gnu.org/ml/gcc/2012-06/msg00015.html
// __builtin_clz()

usb_packet_t *usb_malloc()
{
    5adc:	b510      	push	{r4, lr}
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5ade:	b672      	cpsid	i
	avail = usb_buffer_available;
    5ae0:	480b      	ldr	r0, [pc, #44]	; (5b10 <usb_malloc+0x34>)
    5ae2:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    5ae4:	fab2 f182 	clz	r1, r2
	if ( n >= NUM_USB_BUFFERS )
    5ae8:	291d      	cmp	r1, #29
    5aea:	dd02      	ble.n	5af2 <usb_malloc+0x16>
	{
		__enable_irq();
    5aec:	b662      	cpsie	i
		return NULL;
    5aee:	2000      	movs	r0, #0
    5af0:	bd10      	pop	{r4, pc}
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    5af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    5af6:	40cb      	lsrs	r3, r1
    5af8:	ea22 0203 	bic.w	r2, r2, r3
    5afc:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5afe:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    5b00:	4c04      	ldr	r4, [pc, #16]	; (5b14 <usb_malloc+0x38>)
    5b02:	2348      	movs	r3, #72	; 0x48
    5b04:	434b      	muls	r3, r1
    5b06:	18e0      	adds	r0, r4, r3
	*(uint32_t *)p = 0;
    5b08:	2200      	movs	r2, #0
    5b0a:	50e2      	str	r2, [r4, r3]
	*(uint32_t *)(p + 4) = 0;
    5b0c:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    5b0e:	bd10      	pop	{r4, pc}
    5b10:	1fff8fe0 	.word	0x1fff8fe0
    5b14:	1fff8160 	.word	0x1fff8160

00005b18 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    5b18:	4b0c      	ldr	r3, [pc, #48]	; (5b4c <usb_free+0x34>)
    5b1a:	2248      	movs	r2, #72	; 0x48
    5b1c:	1ac3      	subs	r3, r0, r3
    5b1e:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    5b22:	2b1d      	cmp	r3, #29
    5b24:	d810      	bhi.n	5b48 <usb_free+0x30>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    5b26:	4a0a      	ldr	r2, [pc, #40]	; (5b50 <usb_free+0x38>)
    5b28:	7812      	ldrb	r2, [r2, #0]
    5b2a:	b122      	cbz	r2, 5b36 <usb_free+0x1e>
    5b2c:	4a09      	ldr	r2, [pc, #36]	; (5b54 <usb_free+0x3c>)
    5b2e:	7812      	ldrb	r2, [r2, #0]
    5b30:	b10a      	cbz	r2, 5b36 <usb_free+0x1e>
	{
		usb_rx_memory( p );
    5b32:	f7ff b8eb 	b.w	4d0c <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5b36:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5b38:	4907      	ldr	r1, [pc, #28]	; (5b58 <usb_free+0x40>)
	{
		usb_rx_memory( p );
		return;
	}

	mask = (0x80000000 >> n);
    5b3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b3e:	40da      	lsrs	r2, r3
	__disable_irq();
	usb_buffer_available |= mask;
    5b40:	680b      	ldr	r3, [r1, #0]
    5b42:	4313      	orrs	r3, r2
    5b44:	600b      	str	r3, [r1, #0]
	__enable_irq();
    5b46:	b662      	cpsie	i
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop
    5b4c:	1fff8160 	.word	0x1fff8160
    5b50:	1fff9251 	.word	0x1fff9251
    5b54:	1fff925a 	.word	0x1fff925a
    5b58:	1fff8fe0 	.word	0x1fff8fe0

00005b5c <usb_mouse_send>:
// Process pending mouse commands
// XXX Missing mouse movement and wheels
//     Proper support will require KLL generation of the USB descriptors
//     Similar support will be required for joystick control
void usb_mouse_send()
{
    5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b5e:	f643 4401 	movw	r4, #15361	; 0x3c01
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    5b62:	4b20      	ldr	r3, [pc, #128]	; (5be4 <usb_mouse_send+0x88>)
    5b64:	781b      	ldrb	r3, [r3, #0]
    5b66:	b923      	cbnz	r3, 5b72 <usb_mouse_send+0x16>
		{
			erro_print("USB not configured...");
    5b68:	481f      	ldr	r0, [pc, #124]	; (5be8 <usb_mouse_send+0x8c>)
        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
}
    5b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
		{
			erro_print("USB not configured...");
    5b6e:	f000 bcd9 	b.w	6524 <_print>
			return;
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
    5b72:	2009      	movs	r0, #9
    5b74:	f7ff f8b8 	bl	4ce8 <usb_tx_packet_count>
    5b78:	2802      	cmp	r0, #2
    5b7a:	4d1c      	ldr	r5, [pc, #112]	; (5bec <usb_mouse_send+0x90>)
    5b7c:	d902      	bls.n	5b84 <usb_mouse_send+0x28>
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5b7e:	3c01      	subs	r4, #1
    5b80:	d11b      	bne.n	5bba <usb_mouse_send+0x5e>
    5b82:	e01c      	b.n	5bbe <usb_mouse_send+0x62>
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
                {
                        tx_packet = usb_malloc();
    5b84:	f7ff ffaa 	bl	5adc <usb_malloc>
                        if ( tx_packet )
    5b88:	4601      	mov	r1, r0
    5b8a:	2800      	cmp	r0, #0
    5b8c:	d0f7      	beq.n	5b7e <usb_mouse_send+0x22>
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    5b8e:	4f18      	ldr	r7, [pc, #96]	; (5bf0 <usb_mouse_send+0x94>)
        packet_data[1] = USBMouse_Relative_x;
    5b90:	4e18      	ldr	r6, [pc, #96]	; (5bf4 <usb_mouse_send+0x98>)
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    5b92:	883b      	ldrh	r3, [r7, #0]
    5b94:	8103      	strh	r3, [r0, #8]
			return;
		}
		yield();
        }

        transmit_previous_timeout = 0;
    5b96:	2400      	movs	r4, #0
    5b98:	702c      	strb	r4, [r5, #0]
        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
        packet_data[2] = USBMouse_Relative_y;
    5b9a:	4d17      	ldr	r5, [pc, #92]	; (5bf8 <usb_mouse_send+0x9c>)

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
    5b9c:	8833      	ldrh	r3, [r6, #0]
    5b9e:	8143      	strh	r3, [r0, #10]
        packet_data[2] = USBMouse_Relative_y;
    5ba0:	882b      	ldrh	r3, [r5, #0]
    5ba2:	8183      	strh	r3, [r0, #12]
        tx_packet->len = 6;
    5ba4:	2306      	movs	r3, #6
    5ba6:	8003      	strh	r3, [r0, #0]
        usb_tx( MOUSE_ENDPOINT, tx_packet );
    5ba8:	2009      	movs	r0, #9
    5baa:	f7ff f90d 	bl	4dc8 <usb_tx>

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    5bae:	4b13      	ldr	r3, [pc, #76]	; (5bfc <usb_mouse_send+0xa0>)
        packet_data[2] = USBMouse_Relative_y;
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
    5bb0:	803c      	strh	r4, [r7, #0]
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    5bb2:	701c      	strb	r4, [r3, #0]
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
    5bb4:	8034      	strh	r4, [r6, #0]
        USBMouse_Relative_y = 0;
    5bb6:	802c      	strh	r4, [r5, #0]
    5bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5bba:	782b      	ldrb	r3, [r5, #0]
    5bbc:	b173      	cbz	r3, 5bdc <usb_mouse_send+0x80>
		{
			transmit_previous_timeout = 1;
    5bbe:	2301      	movs	r3, #1
			warn_print("USB Transmit Timeout...");
    5bc0:	480f      	ldr	r0, [pc, #60]	; (5c00 <usb_mouse_send+0xa4>)
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    5bc2:	702b      	strb	r3, [r5, #0]
			warn_print("USB Transmit Timeout...");
    5bc4:	f000 fcae 	bl	6524 <_print>

                        // Clear status and state
                        USBMouse_Buttons = 0;
    5bc8:	4a09      	ldr	r2, [pc, #36]	; (5bf0 <usb_mouse_send+0x94>)
    5bca:	2300      	movs	r3, #0
    5bcc:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_x = 0;
    5bce:	4a09      	ldr	r2, [pc, #36]	; (5bf4 <usb_mouse_send+0x98>)
    5bd0:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_y = 0;
    5bd2:	4a09      	ldr	r2, [pc, #36]	; (5bf8 <usb_mouse_send+0x9c>)
    5bd4:	8013      	strh	r3, [r2, #0]
                        USBMouse_Changed = 0;
    5bd6:	4a09      	ldr	r2, [pc, #36]	; (5bfc <usb_mouse_send+0xa0>)
    5bd8:	7013      	strb	r3, [r2, #0]
			return;
    5bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		yield();
    5bdc:	f7fc fcd8 	bl	2590 <yield>
        }
    5be0:	e7bf      	b.n	5b62 <usb_mouse_send+0x6>
    5be2:	bf00      	nop
    5be4:	1fff925a 	.word	0x1fff925a
    5be8:	00009272 	.word	0x00009272
    5bec:	1fff925d 	.word	0x1fff925d
    5bf0:	1fff90ee 	.word	0x1fff90ee
    5bf4:	1fff90f8 	.word	0x1fff90f8
    5bf8:	1fff90fa 	.word	0x1fff90fa
    5bfc:	1fff90f4 	.word	0x1fff90f4
    5c00:	00009337 	.word	0x00009337

00005c04 <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    5c04:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    5c06:	4c10      	ldr	r4, [pc, #64]	; (5c48 <usb_serial_getchar+0x44>)
    5c08:	6823      	ldr	r3, [r4, #0]
    5c0a:	b16b      	cbz	r3, 5c28 <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    5c0c:	6820      	ldr	r0, [r4, #0]
    5c0e:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    5c10:	1c5a      	adds	r2, r3, #1
    5c12:	4403      	add	r3, r0
    5c14:	7a1c      	ldrb	r4, [r3, #8]
	if ( i >= rx_packet->len )
    5c16:	8803      	ldrh	r3, [r0, #0]
    5c18:	429a      	cmp	r2, r3
    5c1a:	d312      	bcc.n	5c42 <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    5c1c:	f7ff ff7c 	bl	5b18 <usb_free>
		rx_packet = NULL;
    5c20:	4b09      	ldr	r3, [pc, #36]	; (5c48 <usb_serial_getchar+0x44>)
    5c22:	2200      	movs	r2, #0
    5c24:	601a      	str	r2, [r3, #0]
    5c26:	e00d      	b.n	5c44 <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    5c28:	4b08      	ldr	r3, [pc, #32]	; (5c4c <usb_serial_getchar+0x48>)
    5c2a:	781b      	ldrb	r3, [r3, #0]
    5c2c:	b913      	cbnz	r3, 5c34 <usb_serial_getchar+0x30>
			return -1;
    5c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5c32:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    5c34:	2005      	movs	r0, #5
    5c36:	f7ff f83b 	bl	4cb0 <usb_rx>
    5c3a:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    5c3c:	2800      	cmp	r0, #0
    5c3e:	d1e5      	bne.n	5c0c <usb_serial_getchar+0x8>
    5c40:	e7f5      	b.n	5c2e <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    5c42:	8042      	strh	r2, [r0, #2]
	}
	return c;
    5c44:	4620      	mov	r0, r4
}
    5c46:	bd10      	pop	{r4, pc}
    5c48:	1fff9268 	.word	0x1fff9268
    5c4c:	1fff925a 	.word	0x1fff925a

00005c50 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    5c50:	4b04      	ldr	r3, [pc, #16]	; (5c64 <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    5c52:	8918      	ldrh	r0, [r3, #8]
	if ( rx_packet )
    5c54:	4b04      	ldr	r3, [pc, #16]	; (5c68 <usb_serial_available+0x18>)
    5c56:	681a      	ldr	r2, [r3, #0]
    5c58:	b11a      	cbz	r2, 5c62 <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    5c5a:	8813      	ldrh	r3, [r2, #0]
    5c5c:	8852      	ldrh	r2, [r2, #2]
    5c5e:	1a9b      	subs	r3, r3, r2
    5c60:	4418      	add	r0, r3
	return count;
}
    5c62:	4770      	bx	lr
    5c64:	1fffa282 	.word	0x1fffa282
    5c68:	1fff9268 	.word	0x1fff9268

00005c6c <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    5c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5c70:	4d2d      	ldr	r5, [pc, #180]	; (5d28 <usb_serial_write+0xbc>)
    5c72:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    5c74:	4680      	mov	r8, r0
    5c76:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5c78:	702b      	strb	r3, [r5, #0]
	while ( size > 0 )
    5c7a:	2c00      	cmp	r4, #0
    5c7c:	d04f      	beq.n	5d1e <usb_serial_write+0xb2>
	{
		if ( !tx_packet )
    5c7e:	4e2b      	ldr	r6, [pc, #172]	; (5d2c <usb_serial_write+0xc0>)
    5c80:	6833      	ldr	r3, [r6, #0]
    5c82:	46b1      	mov	r9, r6
    5c84:	bb23      	cbnz	r3, 5cd0 <usb_serial_write+0x64>
    5c86:	f648 4701 	movw	r7, #35841	; 0x8c01
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    5c8a:	4b29      	ldr	r3, [pc, #164]	; (5d30 <usb_serial_write+0xc4>)
    5c8c:	781b      	ldrb	r3, [r3, #0]
    5c8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5c92:	b90b      	cbnz	r3, 5c98 <usb_serial_write+0x2c>
				{
					tx_noautoflush = 0;
    5c94:	702a      	strb	r2, [r5, #0]
    5c96:	e014      	b.n	5cc2 <usb_serial_write+0x56>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    5c98:	2006      	movs	r0, #6
    5c9a:	f7ff f825 	bl	4ce8 <usb_tx_packet_count>
    5c9e:	2807      	cmp	r0, #7
    5ca0:	d808      	bhi.n	5cb4 <usb_serial_write+0x48>
				{
					tx_noautoflush = 1;
    5ca2:	2301      	movs	r3, #1
    5ca4:	702b      	strb	r3, [r5, #0]
					tx_packet = usb_malloc();
    5ca6:	f7ff ff19 	bl	5adc <usb_malloc>
    5caa:	f8c9 0000 	str.w	r0, [r9]
					if ( tx_packet )
    5cae:	b978      	cbnz	r0, 5cd0 <usb_serial_write+0x64>
						break;
					tx_noautoflush = 0;
    5cb0:	4b1d      	ldr	r3, [pc, #116]	; (5d28 <usb_serial_write+0xbc>)
    5cb2:	7018      	strb	r0, [r3, #0]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5cb4:	3f01      	subs	r7, #1
    5cb6:	4b1f      	ldr	r3, [pc, #124]	; (5d34 <usb_serial_write+0xc8>)
    5cb8:	d001      	beq.n	5cbe <usb_serial_write+0x52>
    5cba:	781a      	ldrb	r2, [r3, #0]
    5cbc:	b12a      	cbz	r2, 5cca <usb_serial_write+0x5e>
				{
					transmit_previous_timeout = 1;
    5cbe:	2201      	movs	r2, #1
    5cc0:	701a      	strb	r2, [r3, #0]
					return -1;
    5cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    5cca:	f7fc fc61 	bl	2590 <yield>
			}
    5cce:	e7dc      	b.n	5c8a <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5cd0:	6831      	ldr	r1, [r6, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5cd2:	4b18      	ldr	r3, [pc, #96]	; (5d34 <usb_serial_write+0xc8>)
    5cd4:	2200      	movs	r2, #0
    5cd6:	701a      	strb	r2, [r3, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    5cd8:	884b      	ldrh	r3, [r1, #2]
    5cda:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
    5cde:	42a2      	cmp	r2, r4
    5ce0:	bf28      	it	cs
    5ce2:	4622      	movcs	r2, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5ce4:	1898      	adds	r0, r3, r2
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    5ce6:	440b      	add	r3, r1
		tx_packet->index += len;
    5ce8:	8048      	strh	r0, [r1, #2]
		size -= len;
    5cea:	1aa4      	subs	r4, r4, r2
    5cec:	3307      	adds	r3, #7
    5cee:	eb08 0702 	add.w	r7, r8, r2
		while ( len-- > 0 )
    5cf2:	45b8      	cmp	r8, r7
    5cf4:	d004      	beq.n	5d00 <usb_serial_write+0x94>
			*dest++ = *src++;
    5cf6:	f818 2b01 	ldrb.w	r2, [r8], #1
    5cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
    5cfe:	e7f8      	b.n	5cf2 <usb_serial_write+0x86>
		if ( tx_packet->index >= CDC_TX_SIZE )
    5d00:	884b      	ldrh	r3, [r1, #2]
    5d02:	2b3f      	cmp	r3, #63	; 0x3f
    5d04:	d906      	bls.n	5d14 <usb_serial_write+0xa8>
		{
			tx_packet->len = CDC_TX_SIZE;
    5d06:	2340      	movs	r3, #64	; 0x40
    5d08:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    5d0a:	2006      	movs	r0, #6
    5d0c:	f7ff f85c 	bl	4dc8 <usb_tx>
			tx_packet = NULL;
    5d10:	2300      	movs	r3, #0
    5d12:	6033      	str	r3, [r6, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5d14:	4b08      	ldr	r3, [pc, #32]	; (5d38 <usb_serial_write+0xcc>)
    5d16:	2205      	movs	r2, #5
    5d18:	701a      	strb	r2, [r3, #0]
    5d1a:	46b8      	mov	r8, r7
    5d1c:	e7ad      	b.n	5c7a <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    5d1e:	702c      	strb	r4, [r5, #0]
	return 0;
    5d20:	4620      	mov	r0, r4
}
    5d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d26:	bf00      	nop
    5d28:	1fff925f 	.word	0x1fff925f
    5d2c:	1fff9260 	.word	0x1fff9260
    5d30:	1fff925a 	.word	0x1fff925a
    5d34:	1fff9264 	.word	0x1fff9264
    5d38:	1fff925e 	.word	0x1fff925e

00005d3c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    5d3c:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    5d3e:	4b0e      	ldr	r3, [pc, #56]	; (5d78 <usb_serial_flush_callback+0x3c>)
    5d40:	781b      	ldrb	r3, [r3, #0]
    5d42:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    5d46:	b9ab      	cbnz	r3, 5d74 <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    5d48:	4c0c      	ldr	r4, [pc, #48]	; (5d7c <usb_serial_flush_callback+0x40>)
    5d4a:	6821      	ldr	r1, [r4, #0]
    5d4c:	b131      	cbz	r1, 5d5c <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    5d4e:	884b      	ldrh	r3, [r1, #2]
    5d50:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    5d52:	2006      	movs	r0, #6
    5d54:	f7ff f838 	bl	4dc8 <usb_tx>
		tx_packet = NULL;
    5d58:	6025      	str	r5, [r4, #0]
    5d5a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    5d5c:	f7ff febe 	bl	5adc <usb_malloc>
		if ( tx )
    5d60:	4601      	mov	r1, r0
    5d62:	b120      	cbz	r0, 5d6e <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    5d64:	2006      	movs	r0, #6
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    5d6a:	f7ff b82d 	b.w	4dc8 <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    5d6e:	4b04      	ldr	r3, [pc, #16]	; (5d80 <usb_serial_flush_callback+0x44>)
    5d70:	2201      	movs	r2, #1
    5d72:	701a      	strb	r2, [r3, #0]
    5d74:	bd38      	pop	{r3, r4, r5, pc}
    5d76:	bf00      	nop
    5d78:	1fff925f 	.word	0x1fff925f
    5d7c:	1fff9260 	.word	0x1fff9260
    5d80:	1fff925e 	.word	0x1fff925e

00005d84 <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    5d84:	4801      	ldr	r0, [pc, #4]	; (5d8c <cliFunc_clear+0x8>)
    5d86:	f000 bbcd 	b.w	6524 <_print>
    5d8a:	bf00      	nop
    5d8c:	0000942f 	.word	0x0000942f

00005d90 <cliFunc_reload>:
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
	errorLED( CLILEDState ); // Enable/Disable error LED
}

void cliFunc_reload( char* args )
{
    5d90:	b508      	push	{r3, lr}
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
    5d92:	4805      	ldr	r0, [pc, #20]	; (5da8 <cliFunc_reload+0x18>)
    5d94:	f000 fbc6 	bl	6524 <_print>
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
    5d98:	4804      	ldr	r0, [pc, #16]	; (5dac <cliFunc_reload+0x1c>)
    5d9a:	f000 fbc3 	bl	6524 <_print>
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    5d9e:	4804      	ldr	r0, [pc, #16]	; (5db0 <cliFunc_reload+0x20>)
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
}
    5da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    5da4:	f000 bbbe 	b.w	6524 <_print>
    5da8:	000092ee 	.word	0x000092ee
    5dac:	00007272 	.word	0x00007272
    5db0:	000072c1 	.word	0x000072c1

00005db4 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    5db4:	4801      	ldr	r0, [pc, #4]	; (5dbc <cliFunc_reset+0x8>)
    5db6:	f000 bbb5 	b.w	6524 <_print>
    5dba:	bf00      	nop
    5dbc:	00009438 	.word	0x00009438

00005dc0 <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    5dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    5dc4:	2700      	movs	r7, #0
    5dc6:	4b20      	ldr	r3, [pc, #128]	; (5e48 <cliFunc_help+0x88>)
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	b2fd      	uxtb	r5, r7
    5dcc:	42ab      	cmp	r3, r5
    5dce:	d938      	bls.n	5e42 <cliFunc_help+0x82>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    5dd0:	481e      	ldr	r0, [pc, #120]	; (5e4c <cliFunc_help+0x8c>)
    5dd2:	f000 fba7 	bl	6524 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    5dd6:	4b1e      	ldr	r3, [pc, #120]	; (5e50 <cliFunc_help+0x90>)
    5dd8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    5ddc:	f000 fba2 	bl	6524 <_print>
		print( "\033[0m" NL );
    5de0:	481c      	ldr	r0, [pc, #112]	; (5e54 <cliFunc_help+0x94>)
    5de2:	f000 fb9f 	bl	6524 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    5de6:	f04f 0900 	mov.w	r9, #0
    5dea:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5e6c <cliFunc_help+0xac>
    5dee:	fa5f f389 	uxtb.w	r3, r9
    5df2:	260c      	movs	r6, #12
    5df4:	435e      	muls	r6, r3
    5df6:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5dfa:	5999      	ldr	r1, [r3, r6]
    5dfc:	b1f9      	cbz	r1, 5e3e <cliFunc_help+0x7e>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    5dfe:	4816      	ldr	r0, [pc, #88]	; (5e58 <cliFunc_help+0x98>)
    5e00:	4a16      	ldr	r2, [pc, #88]	; (5e5c <cliFunc_help+0x9c>)
    5e02:	4b17      	ldr	r3, [pc, #92]	; (5e60 <cliFunc_help+0xa0>)
    5e04:	f000 fb74 	bl	64f0 <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    5e08:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5e0c:	5998      	ldr	r0, [r3, r6]
    5e0e:	f000 fb8b 	bl	6528 <lenStr>
    5e12:	f1c0 000d 	rsb	r0, r0, #13
    5e16:	b2c4      	uxtb	r4, r0
			while ( padLength-- > 0 )
    5e18:	b12c      	cbz	r4, 5e26 <cliFunc_help+0x66>
				print(" ");
    5e1a:	4812      	ldr	r0, [pc, #72]	; (5e64 <cliFunc_help+0xa4>)
    5e1c:	3c01      	subs	r4, #1
    5e1e:	f000 fb81 	bl	6524 <_print>
    5e22:	b2e4      	uxtb	r4, r4
    5e24:	e7f8      	b.n	5e18 <cliFunc_help+0x58>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    5e26:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5e2a:	441e      	add	r6, r3
    5e2c:	f109 0901 	add.w	r9, r9, #1
    5e30:	6870      	ldr	r0, [r6, #4]
    5e32:	f000 fb77 	bl	6524 <_print>
			print( NL );
    5e36:	480c      	ldr	r0, [pc, #48]	; (5e68 <cliFunc_help+0xa8>)
    5e38:	f000 fb74 	bl	6524 <_print>
    5e3c:	e7d5      	b.n	5dea <cliFunc_help+0x2a>
    5e3e:	3701      	adds	r7, #1
    5e40:	e7c1      	b.n	5dc6 <cliFunc_help+0x6>
		}
	}
}
    5e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e46:	bf00      	nop
    5e48:	1fff9273 	.word	0x1fff9273
    5e4c:	0000943b 	.word	0x0000943b
    5e50:	1fff96f0 	.word	0x1fff96f0
    5e54:	00009445 	.word	0x00009445
    5e58:	0000944c 	.word	0x0000944c
    5e5c:	000073e9 	.word	0x000073e9
    5e60:	00009366 	.word	0x00009366
    5e64:	00006ee2 	.word	0x00006ee2
    5e68:	000092ee 	.word	0x000092ee
    5e6c:	1fff96c4 	.word	0x1fff96c4

00005e70 <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    5e70:	4b03      	ldr	r3, [pc, #12]	; (5e80 <cliFunc_led+0x10>)
    5e72:	7818      	ldrb	r0, [r3, #0]
    5e74:	f080 0002 	eor.w	r0, r0, #2
    5e78:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    5e7a:	f000 bb2b 	b.w	64d4 <errorLED>
    5e7e:	bf00      	nop
    5e80:	1fff9272 	.word	0x1fff9272

00005e84 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    5e84:	f7fe beb0 	b.w	4be8 <Output_softReset>

00005e88 <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    5e88:	b508      	push	{r3, lr}
	print( NL );
    5e8a:	4821      	ldr	r0, [pc, #132]	; (5f10 <cliFunc_version+0x88>)
    5e8c:	f000 fb4a 	bl	6524 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    5e90:	4820      	ldr	r0, [pc, #128]	; (5f14 <cliFunc_version+0x8c>)
    5e92:	f000 fb47 	bl	6524 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    5e96:	4820      	ldr	r0, [pc, #128]	; (5f18 <cliFunc_version+0x90>)
    5e98:	f000 fb44 	bl	6524 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    5e9c:	481f      	ldr	r0, [pc, #124]	; (5f1c <cliFunc_version+0x94>)
    5e9e:	f000 fb41 	bl	6524 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    5ea2:	481f      	ldr	r0, [pc, #124]	; (5f20 <cliFunc_version+0x98>)
    5ea4:	f000 fb3e 	bl	6524 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    5ea8:	481e      	ldr	r0, [pc, #120]	; (5f24 <cliFunc_version+0x9c>)
    5eaa:	f000 fb3b 	bl	6524 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    5eae:	481e      	ldr	r0, [pc, #120]	; (5f28 <cliFunc_version+0xa0>)
    5eb0:	f000 fb38 	bl	6524 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    5eb4:	481d      	ldr	r0, [pc, #116]	; (5f2c <cliFunc_version+0xa4>)
    5eb6:	f000 fb35 	bl	6524 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    5eba:	481d      	ldr	r0, [pc, #116]	; (5f30 <cliFunc_version+0xa8>)
    5ebc:	f000 fb32 	bl	6524 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    5ec0:	481c      	ldr	r0, [pc, #112]	; (5f34 <cliFunc_version+0xac>)
    5ec2:	f000 fb2f 	bl	6524 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    5ec6:	481c      	ldr	r0, [pc, #112]	; (5f38 <cliFunc_version+0xb0>)
    5ec8:	f000 fb2c 	bl	6524 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    5ecc:	481b      	ldr	r0, [pc, #108]	; (5f3c <cliFunc_version+0xb4>)
    5ece:	f000 fb29 	bl	6524 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    5ed2:	481b      	ldr	r0, [pc, #108]	; (5f40 <cliFunc_version+0xb8>)
    5ed4:	f000 fb26 	bl	6524 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    5ed8:	481a      	ldr	r0, [pc, #104]	; (5f44 <cliFunc_version+0xbc>)
    5eda:	f000 fb23 	bl	6524 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    5ede:	481a      	ldr	r0, [pc, #104]	; (5f48 <cliFunc_version+0xc0>)
    5ee0:	f000 fb20 	bl	6524 <_print>
	printHex32_op( SIM_UIDH, 8 );
    5ee4:	4b19      	ldr	r3, [pc, #100]	; (5f4c <cliFunc_version+0xc4>)
    5ee6:	2108      	movs	r1, #8
    5ee8:	6818      	ldr	r0, [r3, #0]
    5eea:	f000 fbf9 	bl	66e0 <printHex32_op>
	printHex32_op( SIM_UIDMH, 8 );
    5eee:	4b18      	ldr	r3, [pc, #96]	; (5f50 <cliFunc_version+0xc8>)
    5ef0:	2108      	movs	r1, #8
    5ef2:	6818      	ldr	r0, [r3, #0]
    5ef4:	f000 fbf4 	bl	66e0 <printHex32_op>
	printHex32_op( SIM_UIDML, 8 );
    5ef8:	4b16      	ldr	r3, [pc, #88]	; (5f54 <cliFunc_version+0xcc>)
    5efa:	2108      	movs	r1, #8
    5efc:	6818      	ldr	r0, [r3, #0]
    5efe:	f000 fbef 	bl	66e0 <printHex32_op>
	printHex32_op( SIM_UIDL, 8 );
    5f02:	4b15      	ldr	r3, [pc, #84]	; (5f58 <cliFunc_version+0xd0>)
    5f04:	2108      	movs	r1, #8
    5f06:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    5f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 8 );
	printHex32_op( SIM_UIDMH, 8 );
	printHex32_op( SIM_UIDML, 8 );
	printHex32_op( SIM_UIDL, 8 );
    5f0c:	f000 bbe8 	b.w	66e0 <printHex32_op>
    5f10:	000092ee 	.word	0x000092ee
    5f14:	00009453 	.word	0x00009453
    5f18:	00009496 	.word	0x00009496
    5f1c:	000094b7 	.word	0x000094b7
    5f20:	000094f1 	.word	0x000094f1
    5f24:	00009531 	.word	0x00009531
    5f28:	00009565 	.word	0x00009565
    5f2c:	000095a3 	.word	0x000095a3
    5f30:	000095d7 	.word	0x000095d7
    5f34:	0000960a 	.word	0x0000960a
    5f38:	00009628 	.word	0x00009628
    5f3c:	00009650 	.word	0x00009650
    5f40:	00009674 	.word	0x00009674
    5f44:	00009697 	.word	0x00009697
    5f48:	000096ee 	.word	0x000096ee
    5f4c:	40048054 	.word	0x40048054
    5f50:	40048058 	.word	0x40048058
    5f54:	4004805c 	.word	0x4004805c
    5f58:	40048060 	.word	0x40048060

00005f5c <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    5f5c:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    5f5e:	4c09      	ldr	r4, [pc, #36]	; (5f84 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    5f60:	4809      	ldr	r0, [pc, #36]	; (5f88 <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    5f62:	7823      	ldrb	r3, [r4, #0]
    5f64:	b133      	cbz	r3, 5f74 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    5f66:	f000 fadd 	bl	6524 <_print>
		info_print("Hex debug mode disabled...");
    5f6a:	4808      	ldr	r0, [pc, #32]	; (5f8c <cliFunc_cliDebug+0x30>)
    5f6c:	f000 fada 	bl	6524 <_print>
		CLIHexDebugMode = 0;
    5f70:	2300      	movs	r3, #0
    5f72:	e005      	b.n	5f80 <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    5f74:	f000 fad6 	bl	6524 <_print>
		info_print("Hex debug mode enabled...");
    5f78:	4805      	ldr	r0, [pc, #20]	; (5f90 <cliFunc_cliDebug+0x34>)
    5f7a:	f000 fad3 	bl	6524 <_print>
		CLIHexDebugMode = 1;
    5f7e:	2301      	movs	r3, #1
    5f80:	7023      	strb	r3, [r4, #0]
    5f82:	bd10      	pop	{r4, pc}
    5f84:	1fff9270 	.word	0x1fff9270
    5f88:	000092ee 	.word	0x000092ee
    5f8c:	00009707 	.word	0x00009707
    5f90:	00009736 	.word	0x00009736

00005f94 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    5f94:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
    5f96:	3801      	subs	r0, #1
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    5f98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5f9c:	2b20      	cmp	r3, #32
    5f9e:	d0fb      	beq.n	5f98 <CLI_argumentIsolation+0x4>

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
    5fa0:	1c45      	adds	r5, r0, #1
    5fa2:	462b      	mov	r3, r5
    5fa4:	3501      	adds	r5, #1
	while ( *argPtr != ' ' && *argPtr != '\0' )
    5fa6:	781c      	ldrb	r4, [r3, #0]
    5fa8:	f014 04df 	ands.w	r4, r4, #223	; 0xdf
    5fac:	d1f9      	bne.n	5fa2 <CLI_argumentIsolation+0xe>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    5fae:	f803 4b01 	strb.w	r4, [r3], #1

	// Set return variables
	*first = cmdPtr;
    5fb2:	6008      	str	r0, [r1, #0]
	*second = argPtr;
    5fb4:	6013      	str	r3, [r2, #0]
    5fb6:	bd30      	pop	{r4, r5, pc}

00005fb8 <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    5fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5fbc:	4b22      	ldr	r3, [pc, #136]	; (6048 <CLI_commandLookup+0x90>)
    5fbe:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    5fc0:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d03c      	beq.n	6040 <CLI_commandLookup+0x88>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5fc6:	4d21      	ldr	r5, [pc, #132]	; (604c <CLI_commandLookup+0x94>)
    5fc8:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5fca:	4628      	mov	r0, r5
    5fcc:	a906      	add	r1, sp, #24
    5fce:	aa07      	add	r2, sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5fd0:	54ec      	strb	r4, [r5, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5fd2:	f7ff ffdf 	bl	5f94 <CLI_argumentIsolation>
    5fd6:	46a8      	mov	r8, r5

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    5fd8:	4b1d      	ldr	r3, [pc, #116]	; (6050 <CLI_commandLookup+0x98>)
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	b2e6      	uxtb	r6, r4
    5fde:	42b3      	cmp	r3, r6
    5fe0:	d919      	bls.n	6016 <CLI_commandLookup+0x5e>
    5fe2:	2700      	movs	r7, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    5fe4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6078 <CLI_commandLookup+0xc0>
    5fe8:	230c      	movs	r3, #12
    5fea:	b2fd      	uxtb	r5, r7
    5fec:	435d      	muls	r5, r3
    5fee:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    5ff2:	5959      	ldr	r1, [r3, r5]
    5ff4:	b169      	cbz	r1, 6012 <CLI_commandLookup+0x5a>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    5ff6:	9806      	ldr	r0, [sp, #24]
    5ff8:	f000 fb91 	bl	671e <eqStr>
    5ffc:	3001      	adds	r0, #1
    5ffe:	f107 0701 	add.w	r7, r7, #1
    6002:	d1ef      	bne.n	5fe4 <CLI_commandLookup+0x2c>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    6004:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    6008:	9807      	ldr	r0, [sp, #28]
    600a:	441d      	add	r5, r3
    600c:	68ab      	ldr	r3, [r5, #8]
    600e:	4798      	blx	r3

				return;
    6010:	e016      	b.n	6040 <CLI_commandLookup+0x88>
    6012:	3401      	adds	r4, #1
    6014:	e7e0      	b.n	5fd8 <CLI_commandLookup+0x20>
			}
		}
	}

	// No match for the command...
	print( NL );
    6016:	4c0f      	ldr	r4, [pc, #60]	; (6054 <CLI_commandLookup+0x9c>)
    6018:	4620      	mov	r0, r4
    601a:	f000 fa83 	bl	6524 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    601e:	4b0e      	ldr	r3, [pc, #56]	; (6058 <CLI_commandLookup+0xa0>)
    6020:	9300      	str	r3, [sp, #0]
    6022:	4b0e      	ldr	r3, [pc, #56]	; (605c <CLI_commandLookup+0xa4>)
    6024:	9301      	str	r3, [sp, #4]
    6026:	4b0e      	ldr	r3, [pc, #56]	; (6060 <CLI_commandLookup+0xa8>)
    6028:	9303      	str	r3, [sp, #12]
    602a:	4b0e      	ldr	r3, [pc, #56]	; (6064 <CLI_commandLookup+0xac>)
    602c:	9305      	str	r3, [sp, #20]
    602e:	f8cd 8008 	str.w	r8, [sp, #8]
    6032:	9404      	str	r4, [sp, #16]
    6034:	480c      	ldr	r0, [pc, #48]	; (6068 <CLI_commandLookup+0xb0>)
    6036:	490d      	ldr	r1, [pc, #52]	; (606c <CLI_commandLookup+0xb4>)
    6038:	4a0d      	ldr	r2, [pc, #52]	; (6070 <CLI_commandLookup+0xb8>)
    603a:	4b0e      	ldr	r3, [pc, #56]	; (6074 <CLI_commandLookup+0xbc>)
    603c:	f000 fa58 	bl	64f0 <printstrs>
}
    6040:	b009      	add	sp, #36	; 0x24
    6042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6046:	bf00      	nop
    6048:	1fff9718 	.word	0x1fff9718
    604c:	1fff965c 	.word	0x1fff965c
    6050:	1fff9273 	.word	0x1fff9273
    6054:	000092ee 	.word	0x000092ee
    6058:	00009774 	.word	0x00009774
    605c:	0000977c 	.word	0x0000977c
    6060:	0000977e 	.word	0x0000977e
    6064:	00009366 	.word	0x00009366
    6068:	00009764 	.word	0x00009764
    606c:	00009767 	.word	0x00009767
    6070:	000073ec 	.word	0x000073ec
    6074:	0000976e 	.word	0x0000976e
    6078:	1fff96c4 	.word	0x1fff96c4

0000607c <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    607c:	b510      	push	{r4, lr}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    607e:	4a09      	ldr	r2, [pc, #36]	; (60a4 <CLI_registerDictionary+0x28>)
    6080:	7813      	ldrb	r3, [r2, #0]
    6082:	2b09      	cmp	r3, #9
    6084:	d904      	bls.n	6090 <CLI_registerDictionary+0x14>
	{
		erro_print("Max number of dictionaries defined already...");
    6086:	4808      	ldr	r0, [pc, #32]	; (60a8 <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    6088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    608c:	f000 ba4a 	b.w	6524 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    6090:	4c06      	ldr	r4, [pc, #24]	; (60ac <CLI_registerDictionary+0x30>)
    6092:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    6096:	1c59      	adds	r1, r3, #1
    6098:	7011      	strb	r1, [r2, #0]
    609a:	4a05      	ldr	r2, [pc, #20]	; (60b0 <CLI_registerDictionary+0x34>)
    609c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    60a0:	bd10      	pop	{r4, pc}
    60a2:	bf00      	nop
    60a4:	1fff9273 	.word	0x1fff9273
    60a8:	000097ac 	.word	0x000097ac
    60ac:	1fff96f0 	.word	0x1fff96f0
    60b0:	1fff96c4 	.word	0x1fff96c4

000060b4 <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    60b4:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    60b6:	480f      	ldr	r0, [pc, #60]	; (60f4 <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    60b8:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    60ba:	2400      	movs	r4, #0
    60bc:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    60be:	4b0e      	ldr	r3, [pc, #56]	; (60f8 <CLI_init+0x44>)
    60c0:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    60c2:	4b0e      	ldr	r3, [pc, #56]	; (60fc <CLI_init+0x48>)
    60c4:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    60c6:	4b0e      	ldr	r3, [pc, #56]	; (6100 <CLI_init+0x4c>)
    60c8:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    60ca:	f000 fa2b 	bl	6524 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    60ce:	480d      	ldr	r0, [pc, #52]	; (6104 <CLI_init+0x50>)
    60d0:	f000 fa28 	bl	6524 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    60d4:	4b0c      	ldr	r3, [pc, #48]	; (6108 <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    60d6:	480d      	ldr	r0, [pc, #52]	; (610c <CLI_init+0x58>)
    60d8:	490d      	ldr	r1, [pc, #52]	; (6110 <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    60da:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    60dc:	f7ff ffce 	bl	607c <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    60e0:	f000 f9ea 	bl	64b8 <init_errorLED>
	CLILEDState = 0;
    60e4:	4b0b      	ldr	r3, [pc, #44]	; (6114 <CLI_init+0x60>)
    60e6:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    60e8:	4b0b      	ldr	r3, [pc, #44]	; (6118 <CLI_init+0x64>)
    60ea:	701c      	strb	r4, [r3, #0]
    60ec:	bd10      	pop	{r4, pc}
    60ee:	bf00      	nop
    60f0:	1fff9718 	.word	0x1fff9718
    60f4:	000097f1 	.word	0x000097f1
    60f8:	1fff96c1 	.word	0x1fff96c1
    60fc:	1fff9271 	.word	0x1fff9271
    6100:	1fff96ec 	.word	0x1fff96ec
    6104:	000097f7 	.word	0x000097f7
    6108:	1fff9273 	.word	0x1fff9273
    610c:	000098d4 	.word	0x000098d4
    6110:	000099d6 	.word	0x000099d6
    6114:	1fff9272 	.word	0x1fff9272
    6118:	1fff9270 	.word	0x1fff9270

0000611c <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    6120:	4d28      	ldr	r5, [pc, #160]	; (61c4 <CLI_tabCompletion+0xa8>)
    6122:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    6124:	b085      	sub	sp, #20
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    6126:	2b00      	cmp	r3, #0
    6128:	d048      	beq.n	61bc <CLI_tabCompletion+0xa0>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    612a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 61d8 <CLI_tabCompletion+0xbc>
    612e:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    6130:	4640      	mov	r0, r8
    6132:	a902      	add	r1, sp, #8
    6134:	aa03      	add	r2, sp, #12
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    6136:	f808 4003 	strb.w	r4, [r8, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    613a:	f7ff ff2b 	bl	5f94 <CLI_argumentIsolation>

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    613e:	4627      	mov	r7, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    6140:	4626      	mov	r6, r4
    6142:	46c3      	mov	fp, r8
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    6144:	4b20      	ldr	r3, [pc, #128]	; (61c8 <CLI_tabCompletion+0xac>)
    6146:	781b      	ldrb	r3, [r3, #0]
    6148:	fa5f fa84 	uxtb.w	sl, r4
    614c:	4553      	cmp	r3, sl
    614e:	d91e      	bls.n	618e <CLI_tabCompletion+0x72>
    6150:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    6154:	fa5f f389 	uxtb.w	r3, r9
    6158:	f04f 080c 	mov.w	r8, #12
    615c:	fb08 f803 	mul.w	r8, r8, r3
    6160:	4b1a      	ldr	r3, [pc, #104]	; (61cc <CLI_tabCompletion+0xb0>)
    6162:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    6166:	f852 1008 	ldr.w	r1, [r2, r8]
    616a:	b171      	cbz	r1, 618a <CLI_tabCompletion+0x6e>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    616c:	9802      	ldr	r0, [sp, #8]
    616e:	9301      	str	r3, [sp, #4]
    6170:	f000 fad5 	bl	671e <eqStr>
    6174:	9b01      	ldr	r3, [sp, #4]
    6176:	b928      	cbnz	r0, 6184 <CLI_tabCompletion+0x68>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    6178:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    617c:	3701      	adds	r7, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    617e:	f853 6008 	ldr.w	r6, [r3, r8]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    6182:	b2ff      	uxtb	r7, r7
    6184:	f109 0901 	add.w	r9, r9, #1
    6188:	e7e4      	b.n	6154 <CLI_tabCompletion+0x38>
    618a:	3401      	adds	r4, #1
    618c:	e7da      	b.n	6144 <CLI_tabCompletion+0x28>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    618e:	2f01      	cmp	r7, #1
    6190:	d114      	bne.n	61bc <CLI_tabCompletion+0xa0>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    6192:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6194:	480e      	ldr	r0, [pc, #56]	; (61d0 <CLI_tabCompletion+0xb4>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    6196:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6198:	f000 f9c4 	bl	6524 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    619c:	480d      	ldr	r0, [pc, #52]	; (61d4 <CLI_tabCompletion+0xb8>)
    619e:	f000 f9c1 	bl	6524 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    61a2:	4630      	mov	r0, r6
    61a4:	f7fe fd18 	bl	4bd8 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    61a8:	7833      	ldrb	r3, [r6, #0]
    61aa:	b13b      	cbz	r3, 61bc <CLI_tabCompletion+0xa0>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    61ac:	782b      	ldrb	r3, [r5, #0]
    61ae:	1c5a      	adds	r2, r3, #1
    61b0:	702a      	strb	r2, [r5, #0]
    61b2:	f816 2b01 	ldrb.w	r2, [r6], #1
    61b6:	f80b 2003 	strb.w	r2, [fp, r3]
    61ba:	e7f5      	b.n	61a8 <CLI_tabCompletion+0x8c>
		}
	}
}
    61bc:	b005      	add	sp, #20
    61be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61c2:	bf00      	nop
    61c4:	1fff9718 	.word	0x1fff9718
    61c8:	1fff9273 	.word	0x1fff9273
    61cc:	1fff96c4 	.word	0x1fff96c4
    61d0:	000097f1 	.word	0x000097f1
    61d4:	000097f7 	.word	0x000097f7
    61d8:	1fff965c 	.word	0x1fff965c

000061dc <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;

	if ( kX < kLowerBound )
    61dc:	4288      	cmp	r0, r1
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    61de:	eba2 0201 	sub.w	r2, r2, r1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    61e2:	bfb8      	it	lt
    61e4:	1a0b      	sublt	r3, r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    61e6:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    61ea:	bfbe      	ittt	lt
    61ec:	fb93 f3f2 	sdivlt	r3, r3, r2
    61f0:	fb03 2302 	mlalt	r3, r3, r2, r2
    61f4:	18c0      	addlt	r0, r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    61f6:	1a43      	subs	r3, r0, r1
    61f8:	fb93 f0f2 	sdiv	r0, r3, r2
    61fc:	fb02 3010 	mls	r0, r2, r0, r3
}
    6200:	4408      	add	r0, r1
    6202:	4770      	bx	lr

00006204 <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
    6204:	b108      	cbz	r0, 620a <CLI_saveHistory+0x6>
    6206:	3801      	subs	r0, #1
    6208:	e006      	b.n	6218 <CLI_saveHistory+0x14>
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    620a:	4b0e      	ldr	r3, [pc, #56]	; (6244 <CLI_saveHistory+0x40>)
    620c:	781a      	ldrb	r2, [r3, #0]
    620e:	2364      	movs	r3, #100	; 0x64
    6210:	4353      	muls	r3, r2
    6212:	4a0d      	ldr	r2, [pc, #52]	; (6248 <CLI_saveHistory+0x44>)
    6214:	54d0      	strb	r0, [r2, r3]
		return;
    6216:	4770      	bx	lr
	}

        // Don't write empty lines to the history
        const char *cursor = buff;
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
    6218:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    621c:	2b20      	cmp	r3, #32
    621e:	d0fb      	beq.n	6218 <CLI_saveHistory+0x14>
        if (*cursor == '\0') { return ; }
    6220:	b17b      	cbz	r3, 6242 <CLI_saveHistory+0x3e>

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    6222:	4b0a      	ldr	r3, [pc, #40]	; (624c <CLI_saveHistory+0x48>)
    6224:	4a08      	ldr	r2, [pc, #32]	; (6248 <CLI_saveHistory+0x44>)
    6226:	7819      	ldrb	r1, [r3, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    6228:	4b06      	ldr	r3, [pc, #24]	; (6244 <CLI_saveHistory+0x40>)
    622a:	7818      	ldrb	r0, [r3, #0]
    622c:	2364      	movs	r3, #100	; 0x64
    622e:	fb00 2203 	mla	r2, r0, r3, r2
    6232:	2300      	movs	r3, #0
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    6234:	428b      	cmp	r3, r1
    6236:	da04      	bge.n	6242 <CLI_saveHistory+0x3e>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    6238:	4805      	ldr	r0, [pc, #20]	; (6250 <CLI_saveHistory+0x4c>)
    623a:	5c18      	ldrb	r0, [r3, r0]
    623c:	54d0      	strb	r0, [r2, r3]
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    623e:	3301      	adds	r3, #1
    6240:	e7f8      	b.n	6234 <CLI_saveHistory+0x30>
    6242:	4770      	bx	lr
    6244:	1fff96ec 	.word	0x1fff96ec
    6248:	1fff9274 	.word	0x1fff9274
    624c:	1fff9718 	.word	0x1fff9718
    6250:	1fff965c 	.word	0x1fff965c

00006254 <CLI_retreiveHistory>:
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    6254:	b538      	push	{r3, r4, r5, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    6256:	4c0e      	ldr	r4, [pc, #56]	; (6290 <CLI_retreiveHistory+0x3c>)

	// Reset the buffer
	CLILineBufferCurrent = 0;
    6258:	4d0e      	ldr	r5, [pc, #56]	; (6294 <CLI_retreiveHistory+0x40>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    625a:	2364      	movs	r3, #100	; 0x64
    625c:	fb03 4400 	mla	r4, r3, r0, r4

	// Reset the buffer
	CLILineBufferCurrent = 0;
    6260:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6262:	480d      	ldr	r0, [pc, #52]	; (6298 <CLI_retreiveHistory+0x44>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    6264:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6266:	f000 f95d 	bl	6524 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    626a:	480c      	ldr	r0, [pc, #48]	; (629c <CLI_retreiveHistory+0x48>)
    626c:	f000 f95a 	bl	6524 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    6270:	4620      	mov	r0, r4
    6272:	f7fe fcb1 	bl	4bd8 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    6276:	4622      	mov	r2, r4
    6278:	1b13      	subs	r3, r2, r4
    627a:	f812 1b01 	ldrb.w	r1, [r2], #1
    627e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6282:	b111      	cbz	r1, 628a <CLI_retreiveHistory+0x36>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    6284:	4806      	ldr	r0, [pc, #24]	; (62a0 <CLI_retreiveHistory+0x4c>)
    6286:	54c1      	strb	r1, [r0, r3]
    6288:	e7f6      	b.n	6278 <CLI_retreiveHistory+0x24>
    628a:	702b      	strb	r3, [r5, #0]
    628c:	bd38      	pop	{r3, r4, r5, pc}
    628e:	bf00      	nop
    6290:	1fff9274 	.word	0x1fff9274
    6294:	1fff9718 	.word	0x1fff9718
    6298:	000097f1 	.word	0x000097f1
    629c:	000097f7 	.word	0x000097f7
    62a0:	1fff965c 	.word	0x1fff965c

000062a4 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    62a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    62a6:	4d74      	ldr	r5, [pc, #464]	; (6478 <CLI_process+0x1d4>)
    62a8:	782c      	ldrb	r4, [r5, #0]

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    62aa:	f7fe fc91 	bl	4bd0 <Output_availablechar>
    62ae:	b1a0      	cbz	r0, 62da <CLI_process+0x36>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    62b0:	f7fe fc90 	bl	4bd4 <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    62b4:	782b      	ldrb	r3, [r5, #0]
    62b6:	4e70      	ldr	r6, [pc, #448]	; (6478 <CLI_process+0x1d4>)
    62b8:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    62ba:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    62bc:	d908      	bls.n	62d0 <CLI_process+0x2c>
		{
			print( NL );
    62be:	486f      	ldr	r0, [pc, #444]	; (647c <CLI_process+0x1d8>)
    62c0:	f000 f930 	bl	6524 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    62c4:	486e      	ldr	r0, [pc, #440]	; (6480 <CLI_process+0x1dc>)
    62c6:	f000 f92d 	bl	6524 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	7033      	strb	r3, [r6, #0]
    62ce:	e064      	b.n	639a <CLI_process+0xf6>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    62d0:	1c5a      	adds	r2, r3, #1
    62d2:	7032      	strb	r2, [r6, #0]
    62d4:	4a6b      	ldr	r2, [pc, #428]	; (6484 <CLI_process+0x1e0>)
    62d6:	54d0      	strb	r0, [r2, r3]
	}
    62d8:	e7e7      	b.n	62aa <CLI_process+0x6>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    62da:	4b6b      	ldr	r3, [pc, #428]	; (6488 <CLI_process+0x1e4>)
    62dc:	781b      	ldrb	r3, [r3, #0]
    62de:	b30b      	cbz	r3, 6324 <CLI_process+0x80>
    62e0:	782b      	ldrb	r3, [r5, #0]
    62e2:	42a3      	cmp	r3, r4
    62e4:	d91e      	bls.n	6324 <CLI_process+0x80>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    62e6:	4869      	ldr	r0, [pc, #420]	; (648c <CLI_process+0x1e8>)
    62e8:	f000 f91c 	bl	6524 <_print>
		print("\033[2K");    // Erases the current line
    62ec:	4868      	ldr	r0, [pc, #416]	; (6490 <CLI_process+0x1ec>)
    62ee:	f000 f919 	bl	6524 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    62f2:	4623      	mov	r3, r4
    62f4:	782a      	ldrb	r2, [r5, #0]
    62f6:	429a      	cmp	r2, r3
    62f8:	d90b      	bls.n	6312 <CLI_process+0x6e>
		{
			printHex( CLILineBuffer[pos++] );
    62fa:	4a62      	ldr	r2, [pc, #392]	; (6484 <CLI_process+0x1e0>)
    62fc:	1c5e      	adds	r6, r3, #1
    62fe:	5cd0      	ldrb	r0, [r2, r3]
    6300:	2101      	movs	r1, #1
    6302:	f000 f9b1 	bl	6668 <printHex_op>
    6306:	b2f6      	uxtb	r6, r6
			print(" ");
    6308:	4862      	ldr	r0, [pc, #392]	; (6494 <CLI_process+0x1f0>)
    630a:	f000 f90b 	bl	6524 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    630e:	4633      	mov	r3, r6
    6310:	e7f0      	b.n	62f4 <CLI_process+0x50>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    6312:	4861      	ldr	r0, [pc, #388]	; (6498 <CLI_process+0x1f4>)
    6314:	e04c      	b.n	63b0 <CLI_process+0x10c>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    6316:	d856      	bhi.n	63c6 <CLI_process+0x122>
    6318:	2a08      	cmp	r2, #8
    631a:	d14c      	bne.n	63b6 <CLI_process+0x112>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    631c:	2b01      	cmp	r3, #1
    631e:	d144      	bne.n	63aa <CLI_process+0x106>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    6320:	2300      	movs	r3, #0
    6322:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    6324:	782b      	ldrb	r3, [r5, #0]
    6326:	4f54      	ldr	r7, [pc, #336]	; (6478 <CLI_process+0x1d4>)
    6328:	42a3      	cmp	r3, r4
    632a:	f240 80a4 	bls.w	6476 <CLI_process+0x1d2>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    632e:	4955      	ldr	r1, [pc, #340]	; (6484 <CLI_process+0x1e0>)
    6330:	5d0a      	ldrb	r2, [r1, r4]
    6332:	2a0a      	cmp	r2, #10
    6334:	460e      	mov	r6, r1
    6336:	d1ee      	bne.n	6316 <CLI_process+0x72>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    6338:	441e      	add	r6, r3
    633a:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    633c:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    633e:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    6342:	d025      	beq.n	6390 <CLI_process+0xec>
				CLILineBufferCurrent--;
			}
			else
			{
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    6344:	484f      	ldr	r0, [pc, #316]	; (6484 <CLI_process+0x1e0>)
    6346:	f7ff ff5d 	bl	6204 <CLI_saveHistory>

				// Process the current line buffer
				CLI_commandLookup();
    634a:	f7ff fe35 	bl	5fb8 <CLI_commandLookup>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    634e:	4a53      	ldr	r2, [pc, #332]	; (649c <CLI_process+0x1f8>)
    6350:	4953      	ldr	r1, [pc, #332]	; (64a0 <CLI_process+0x1fc>)
    6352:	7813      	ldrb	r3, [r2, #0]
    6354:	7808      	ldrb	r0, [r1, #0]
    6356:	4283      	cmp	r3, r0
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    6358:	bf3c      	itt	cc
    635a:	3001      	addcc	r0, #1
    635c:	260a      	movcc	r6, #10
				CLIHistoryTail++;
    635e:	f103 0301 	add.w	r3, r3, #1
    6362:	b2db      	uxtb	r3, r3
				// Process the current line buffer
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    6364:	bf3e      	ittt	cc
    6366:	fb90 f4f6 	sdivcc	r4, r0, r6
    636a:	fb06 0014 	mlscc	r0, r6, r4, r0
    636e:	7008      	strbcc	r0, [r1, #0]
				CLIHistoryTail++;
				if ( CLIHistoryTail == CLIMaxHistorySize )
    6370:	2b0a      	cmp	r3, #10
				{
					CLIHistoryTail = 0;
    6372:	bf03      	ittte	eq
    6374:	2300      	moveq	r3, #0
    6376:	7013      	strbeq	r3, [r2, #0]
					CLIHistoryHead = 1;
    6378:	2301      	moveq	r3, #1
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    637a:	7013      	strbne	r3, [r2, #0]
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
					CLIHistoryHead = 1;
    637c:	bf08      	it	eq
    637e:	700b      	strbeq	r3, [r1, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    6380:	4b48      	ldr	r3, [pc, #288]	; (64a4 <CLI_process+0x200>)
    6382:	7812      	ldrb	r2, [r2, #0]
    6384:	701a      	strb	r2, [r3, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    6386:	2364      	movs	r3, #100	; 0x64
    6388:	4353      	muls	r3, r2
    638a:	4a47      	ldr	r2, [pc, #284]	; (64a8 <CLI_process+0x204>)
    638c:	2100      	movs	r1, #0
    638e:	54d1      	strb	r1, [r2, r3]
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    6390:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    6392:	483a      	ldr	r0, [pc, #232]	; (647c <CLI_process+0x1d8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    6394:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    6396:	f000 f8c5 	bl	6524 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    639a:	4844      	ldr	r0, [pc, #272]	; (64ac <CLI_process+0x208>)
    639c:	f000 f8c2 	bl	6524 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    63a0:	4843      	ldr	r0, [pc, #268]	; (64b0 <CLI_process+0x20c>)
			prev_buf_pos++;

			break;
		}
	}
}
    63a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    63a6:	f000 b8bd 	b.w	6524 <_print>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    63aa:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    63ac:	4841      	ldr	r0, [pc, #260]	; (64b4 <CLI_process+0x210>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    63ae:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    63b0:	f000 f8b8 	bl	6524 <_print>
    63b4:	e7b6      	b.n	6324 <CLI_process+0x80>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    63b6:	2a09      	cmp	r2, #9
    63b8:	d155      	bne.n	6466 <CLI_process+0x1c2>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    63ba:	f7ff feaf 	bl	611c <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    63be:	783b      	ldrb	r3, [r7, #0]
    63c0:	3b01      	subs	r3, #1
    63c2:	703b      	strb	r3, [r7, #0]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    63c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    63c6:	2a1b      	cmp	r2, #27
    63c8:	d004      	beq.n	63d4 <CLI_process+0x130>
    63ca:	2a7f      	cmp	r2, #127	; 0x7f
    63cc:	d0a6      	beq.n	631c <CLI_process+0x78>
    63ce:	2a0d      	cmp	r2, #13
    63d0:	d149      	bne.n	6466 <CLI_process+0x1c2>
    63d2:	e7b1      	b.n	6338 <CLI_process+0x94>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    63d4:	1ca7      	adds	r7, r4, #2
    63d6:	429f      	cmp	r7, r3
    63d8:	da4d      	bge.n	6476 <CLI_process+0x1d2>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    63da:	190b      	adds	r3, r1, r4
    63dc:	785b      	ldrb	r3, [r3, #1]
    63de:	2b5b      	cmp	r3, #91	; 0x5b
    63e0:	d149      	bne.n	6476 <CLI_process+0x1d2>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    63e2:	5dcb      	ldrb	r3, [r1, r7]
    63e4:	2b41      	cmp	r3, #65	; 0x41
    63e6:	d122      	bne.n	642e <CLI_process+0x18a>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    63e8:	4d2e      	ldr	r5, [pc, #184]	; (64a4 <CLI_process+0x200>)
    63ea:	4b2c      	ldr	r3, [pc, #176]	; (649c <CLI_process+0x1f8>)
    63ec:	f995 2000 	ldrsb.w	r2, [r5]
    63f0:	781b      	ldrb	r3, [r3, #0]
    63f2:	429a      	cmp	r2, r3
    63f4:	d104      	bne.n	6400 <CLI_process+0x15c>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    63f6:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    63f8:	4608      	mov	r0, r1
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    63fa:	550b      	strb	r3, [r1, r4]
						CLI_saveHistory( CLILineBuffer );
    63fc:	f7ff ff02 	bl	6204 <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    6400:	f995 0000 	ldrsb.w	r0, [r5]
    6404:	2100      	movs	r1, #0
    6406:	2209      	movs	r2, #9
    6408:	3801      	subs	r0, #1
    640a:	f7ff fee7 	bl	61dc <CLI_wrap>
    640e:	4b24      	ldr	r3, [pc, #144]	; (64a0 <CLI_process+0x1fc>)
    6410:	4604      	mov	r4, r0
    6412:	7818      	ldrb	r0, [r3, #0]
    6414:	2100      	movs	r1, #0
    6416:	3801      	subs	r0, #1
    6418:	2209      	movs	r2, #9
    641a:	f7ff fedf 	bl	61dc <CLI_wrap>
    641e:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    6420:	bf1c      	itt	ne
    6422:	4b20      	ldrne	r3, [pc, #128]	; (64a4 <CLI_process+0x200>)
    6424:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    6426:	f995 0000 	ldrsb.w	r0, [r5]
    642a:	f7ff ff13 	bl	6254 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    642e:	5df3      	ldrb	r3, [r6, r7]
    6430:	2b42      	cmp	r3, #66	; 0x42
    6432:	d120      	bne.n	6476 <CLI_process+0x1d2>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    6434:	4c1b      	ldr	r4, [pc, #108]	; (64a4 <CLI_process+0x200>)
    6436:	f994 0000 	ldrsb.w	r0, [r4]
    643a:	2100      	movs	r1, #0
    643c:	2209      	movs	r2, #9
    643e:	3001      	adds	r0, #1
    6440:	f7ff fecc 	bl	61dc <CLI_wrap>
    6444:	4b15      	ldr	r3, [pc, #84]	; (649c <CLI_process+0x1f8>)
    6446:	4605      	mov	r5, r0
    6448:	7818      	ldrb	r0, [r3, #0]
    644a:	2100      	movs	r1, #0
    644c:	3001      	adds	r0, #1
    644e:	2209      	movs	r2, #9
    6450:	f7ff fec4 	bl	61dc <CLI_wrap>
    6454:	4285      	cmp	r5, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    6456:	bf18      	it	ne
    6458:	7025      	strbne	r5, [r4, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    645a:	f994 0000 	ldrsb.w	r0, [r4]
			prev_buf_pos++;

			break;
		}
	}
}
    645e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    6462:	f7ff bef7 	b.w	6254 <CLI_retreiveHistory>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    6466:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    6468:	1930      	adds	r0, r6, r4

			// Buffer reset
			prev_buf_pos++;
    646a:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    646c:	54ca      	strb	r2, [r1, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    646e:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    6470:	f7fe fbb2 	bl	4bd8 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    6474:	e756      	b.n	6324 <CLI_process+0x80>
    6476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6478:	1fff9718 	.word	0x1fff9718
    647c:	000092ee 	.word	0x000092ee
    6480:	00009805 	.word	0x00009805
    6484:	1fff965c 	.word	0x1fff965c
    6488:	1fff9270 	.word	0x1fff9270
    648c:	0000985c 	.word	0x0000985c
    6490:	00009862 	.word	0x00009862
    6494:	00006ee2 	.word	0x00006ee2
    6498:	00009867 	.word	0x00009867
    649c:	1fff96ec 	.word	0x1fff96ec
    64a0:	1fff96c1 	.word	0x1fff96c1
    64a4:	1fff9271 	.word	0x1fff9271
    64a8:	1fff9274 	.word	0x1fff9274
    64ac:	000097f1 	.word	0x000097f1
    64b0:	000097f7 	.word	0x000097f7
    64b4:	0000986b 	.word	0x0000986b

000064b8 <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    64b8:	4a04      	ldr	r2, [pc, #16]	; (64cc <init_errorLED+0x14>)
    64ba:	6813      	ldr	r3, [r2, #0]
    64bc:	f043 0320 	orr.w	r3, r3, #32
    64c0:	6013      	str	r3, [r2, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    64c2:	4b03      	ldr	r3, [pc, #12]	; (64d0 <init_errorLED+0x18>)
    64c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
    64c8:	601a      	str	r2, [r3, #0]
    64ca:	4770      	bx	lr
    64cc:	400ff014 	.word	0x400ff014
    64d0:	40049014 	.word	0x40049014

000064d4 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    64d4:	b108      	cbz	r0, 64da <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    64d6:	4a04      	ldr	r2, [pc, #16]	; (64e8 <errorLED+0x14>)
    64d8:	e000      	b.n	64dc <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    64da:	4a04      	ldr	r2, [pc, #16]	; (64ec <errorLED+0x18>)
    64dc:	6813      	ldr	r3, [r2, #0]
    64de:	f043 0320 	orr.w	r3, r3, #32
    64e2:	6013      	str	r3, [r2, #0]
    64e4:	4770      	bx	lr
    64e6:	bf00      	nop
    64e8:	400ff004 	.word	0x400ff004
    64ec:	400ff008 	.word	0x400ff008

000064f0 <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    64f0:	b40f      	push	{r0, r1, r2, r3}
    64f2:	b507      	push	{r0, r1, r2, lr}
    64f4:	ab04      	add	r3, sp, #16
    64f6:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    64fa:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    64fc:	7803      	ldrb	r3, [r0, #0]
    64fe:	b133      	cbz	r3, 650e <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    6500:	f7fe fb6a 	bl	4bd8 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	1d1a      	adds	r2, r3, #4
    6508:	9201      	str	r2, [sp, #4]
    650a:	6818      	ldr	r0, [r3, #0]
    650c:	e7f6      	b.n	64fc <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    650e:	7843      	ldrb	r3, [r0, #1]
    6510:	2b00      	cmp	r3, #0
    6512:	d1f5      	bne.n	6500 <printstrs+0x10>
    6514:	7883      	ldrb	r3, [r0, #2]
    6516:	2b00      	cmp	r3, #0
    6518:	d1f2      	bne.n	6500 <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    651a:	b003      	add	sp, #12
    651c:	f85d eb04 	ldr.w	lr, [sp], #4
    6520:	b004      	add	sp, #16
    6522:	4770      	bx	lr

00006524 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    6524:	f7fe bb58 	b.w	4bd8 <Output_putstr>

00006528 <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    6528:	4602      	mov	r2, r0
    652a:	4613      	mov	r3, r2
    652c:	3201      	adds	r2, #1
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    652e:	7819      	ldrb	r1, [r3, #0]
    6530:	2900      	cmp	r1, #0
    6532:	d1fa      	bne.n	652a <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    6534:	1a18      	subs	r0, r3, r0
}
    6536:	b280      	uxth	r0, r0
    6538:	4770      	bx	lr

0000653a <revsStr>:
	}
}


void revsStr( char* in )
{
    653a:	b510      	push	{r4, lr}
    653c:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    653e:	f7ff fff3 	bl	6528 <lenStr>
    6542:	2300      	movs	r3, #0
    6544:	3801      	subs	r0, #1
    6546:	4283      	cmp	r3, r0
    6548:	da06      	bge.n	6558 <revsStr+0x1e>
	{
		c = in[i];
    654a:	5ce2      	ldrb	r2, [r4, r3]
		in[i] = in[j];
    654c:	5c21      	ldrb	r1, [r4, r0]
    654e:	54e1      	strb	r1, [r4, r3]
		in[j] = c;
    6550:	5422      	strb	r2, [r4, r0]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    6552:	3301      	adds	r3, #1
    6554:	3801      	subs	r0, #1
    6556:	e7f6      	b.n	6546 <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    6558:	bd10      	pop	{r4, pc}

0000655a <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    655a:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    655c:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    655e:	230a      	movs	r3, #10
    6560:	fbb0 f4f3 	udiv	r4, r0, r3
    6564:	fb03 0314 	mls	r3, r3, r4, r0
    6568:	1c55      	adds	r5, r2, #1
    656a:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    656c:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    6570:	548b      	strb	r3, [r1, r2]
    6572:	b2ea      	uxtb	r2, r5
	}
	while ( (in /= 10) > 0 );
    6574:	d1f3      	bne.n	655e <int8ToStr+0x4>

	// Append null
	out[pos] = '\0';
    6576:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    6578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    657c:	4608      	mov	r0, r1
    657e:	f7ff bfdc 	b.w	653a <revsStr>

00006582 <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    6582:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    6584:	a901      	add	r1, sp, #4
    6586:	f7ff ffe8 	bl	655a <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    658a:	a801      	add	r0, sp, #4
    658c:	f7fe fb24 	bl	4bd8 <Output_putstr>
}
    6590:	b003      	add	sp, #12
    6592:	f85d fb04 	ldr.w	pc, [sp], #4

00006596 <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    6596:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    6598:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    659a:	230a      	movs	r3, #10
    659c:	fbb0 f4f3 	udiv	r4, r0, r3
    65a0:	fb03 0314 	mls	r3, r3, r4, r0
    65a4:	1c55      	adds	r5, r2, #1
    65a6:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    65a8:	b2a0      	uxth	r0, r4
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    65aa:	548b      	strb	r3, [r1, r2]
    65ac:	b2aa      	uxth	r2, r5
	}
	while ( (in /= 10) > 0 );
    65ae:	2800      	cmp	r0, #0
    65b0:	d1f3      	bne.n	659a <int16ToStr+0x4>

	// Append null
	out[pos] = '\0';
    65b2:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    65b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    65b8:	4608      	mov	r0, r1
    65ba:	f7ff bfbe 	b.w	653a <revsStr>

000065be <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    65be:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    65c0:	4669      	mov	r1, sp
    65c2:	f7ff ffe8 	bl	6596 <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    65c6:	4668      	mov	r0, sp
    65c8:	f7fe fb06 	bl	4bd8 <Output_putstr>
}
    65cc:	b003      	add	sp, #12
    65ce:	f85d fb04 	ldr.w	pc, [sp], #4

000065d2 <int32ToStr>:
	revsStr(out);
}


void int32ToStr( uint32_t in, char* out )
{
    65d2:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint32_t pos;
	pos = 0;
    65d4:	2200      	movs	r2, #0
    65d6:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    65d8:	230a      	movs	r3, #10
    65da:	fbb0 f4f3 	udiv	r4, r0, r3
    65de:	fb03 0314 	mls	r3, r3, r4, r0
    65e2:	3330      	adds	r3, #48	; 0x30
    65e4:	3201      	adds	r2, #1
    65e6:	f805 3f01 	strb.w	r3, [r5, #1]!
	}
	while ( (in /= 10) > 0 );
    65ea:	4620      	mov	r0, r4
    65ec:	2c00      	cmp	r4, #0
    65ee:	d1f3      	bne.n	65d8 <int32ToStr+0x6>

	// Append null
	out[pos] = '\0';
    65f0:	548c      	strb	r4, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
    65f2:	4608      	mov	r0, r1
}
    65f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    65f8:	f7ff bf9f 	b.w	653a <revsStr>

000065fc <printInt32>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt32( uint32_t in )
{
    65fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Max number of characters is 10 + 1 for null
	char tmpStr[11];

	// Convert number
	int32ToStr( in, tmpStr );
    65fe:	a901      	add	r1, sp, #4
    6600:	f7ff ffe7 	bl	65d2 <int32ToStr>

	// Print number
	dPrintStr( tmpStr );
    6604:	a801      	add	r0, sp, #4
    6606:	f7fe fae7 	bl	4bd8 <Output_putstr>
}
    660a:	b005      	add	sp, #20
    660c:	f85d fb04 	ldr.w	pc, [sp], #4

00006610 <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    6610:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint16_t pos = 0;
    6612:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    6614:	f000 030f 	and.w	r3, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6618:	2b0a      	cmp	r3, #10
    661a:	bf34      	ite	cc
    661c:	2630      	movcc	r6, #48	; 0x30
    661e:	2637      	movcs	r6, #55	; 0x37
    6620:	1c65      	adds	r5, r4, #1
    6622:	4433      	add	r3, r6
	}
	while ( (in /= 16) > 0 );
    6624:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6626:	550b      	strb	r3, [r1, r4]
    6628:	b2ac      	uxth	r4, r5
	}
	while ( (in /= 16) > 0 );
    662a:	d1f3      	bne.n	6614 <hexToStr_op+0x4>

	// Output formatting options
	switch ( op )
    662c:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    662e:	4623      	mov	r3, r4
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    6630:	d00c      	beq.n	664c <hexToStr_op+0x3c>
    6632:	2a04      	cmp	r2, #4
    6634:	d00a      	beq.n	664c <hexToStr_op+0x3c>
    6636:	2a01      	cmp	r2, #1
    6638:	d10f      	bne.n	665a <hexToStr_op+0x4a>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    663a:	2278      	movs	r2, #120	; 0x78
    663c:	550a      	strb	r2, [r1, r4]
    663e:	3401      	adds	r4, #1
		out[pos++] = '0';
    6640:	b2a4      	uxth	r4, r4
    6642:	3302      	adds	r3, #2
    6644:	2230      	movs	r2, #48	; 0x30
    6646:	b29b      	uxth	r3, r3
    6648:	550a      	strb	r2, [r1, r4]
		break;
    664a:	e006      	b.n	665a <hexToStr_op+0x4a>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    664c:	4293      	cmp	r3, r2
    664e:	d204      	bcs.n	665a <hexToStr_op+0x4a>
			out[pos++] = '0';
    6650:	1c58      	adds	r0, r3, #1
    6652:	2430      	movs	r4, #48	; 0x30
    6654:	54cc      	strb	r4, [r1, r3]
    6656:	b283      	uxth	r3, r0
    6658:	e7f8      	b.n	664c <hexToStr_op+0x3c>
		break;
	}

	// Append null
	out[pos] = '\0';
    665a:	2200      	movs	r2, #0
    665c:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    665e:	4608      	mov	r0, r1
}
    6660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    6664:	f7ff bf69 	b.w	653a <revsStr>

00006668 <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    6668:	b507      	push	{r0, r1, r2, lr}
    666a:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    666c:	4669      	mov	r1, sp
    666e:	f7ff ffcf 	bl	6610 <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    6672:	4668      	mov	r0, sp
    6674:	f7fe fab0 	bl	4bd8 <Output_putstr>
}
    6678:	b003      	add	sp, #12
    667a:	f85d fb04 	ldr.w	pc, [sp], #4

0000667e <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    667e:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint32_t pos = 0;
    6680:	2300      	movs	r3, #0
    6682:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    6684:	f000 040f 	and.w	r4, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6688:	2c0a      	cmp	r4, #10
    668a:	bf34      	ite	cc
    668c:	2630      	movcc	r6, #48	; 0x30
    668e:	2637      	movcs	r6, #55	; 0x37
    6690:	4434      	add	r4, r6
	}
	while ( (in /= 16) > 0 );
    6692:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6694:	f103 0301 	add.w	r3, r3, #1
    6698:	f805 4f01 	strb.w	r4, [r5, #1]!
	}
	while ( (in /= 16) > 0 );
    669c:	d1f2      	bne.n	6684 <hex32ToStr_op+0x6>

	// Output formatting options
	switch ( op )
    669e:	1e54      	subs	r4, r2, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    66a0:	4618      	mov	r0, r3
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    66a2:	2c07      	cmp	r4, #7
    66a4:	d815      	bhi.n	66d2 <hex32ToStr_op+0x54>
    66a6:	e8df f004 	tbb	[pc, r4]
    66aa:	0406      	.short	0x0406
    66ac:	14140414 	.word	0x14140414
    66b0:	0414      	.short	0x0414
    66b2:	440b      	add	r3, r1
    66b4:	e006      	b.n	66c4 <hex32ToStr_op+0x46>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    66b6:	2278      	movs	r2, #120	; 0x78
    66b8:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    66ba:	1c98      	adds	r0, r3, #2
    66bc:	440b      	add	r3, r1
    66be:	2230      	movs	r2, #48	; 0x30
    66c0:	705a      	strb	r2, [r3, #1]
		break;
    66c2:	e006      	b.n	66d2 <hex32ToStr_op+0x54>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
	case 8: // 32-bit padding
		while ( pos < op )
    66c4:	4290      	cmp	r0, r2
    66c6:	d204      	bcs.n	66d2 <hex32ToStr_op+0x54>
			out[pos++] = '0';
    66c8:	2430      	movs	r4, #48	; 0x30
    66ca:	3001      	adds	r0, #1
    66cc:	f803 4b01 	strb.w	r4, [r3], #1
    66d0:	e7f8      	b.n	66c4 <hex32ToStr_op+0x46>
		break;
	}

	// Append null
	out[pos] = '\0';
    66d2:	2300      	movs	r3, #0
    66d4:	540b      	strb	r3, [r1, r0]

	// Reverse the string to the correct order
	revsStr(out);
}
    66d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    66da:	4608      	mov	r0, r1
    66dc:	f7ff bf2d 	b.w	653a <revsStr>

000066e0 <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    66e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    66e2:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[11];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    66e4:	a901      	add	r1, sp, #4
    66e6:	f7ff ffca 	bl	667e <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    66ea:	a801      	add	r0, sp, #4
    66ec:	f7fe fa74 	bl	4bd8 <Output_putstr>
}
    66f0:	b005      	add	sp, #20
    66f2:	f85d fb04 	ldr.w	pc, [sp], #4

000066f6 <hex32ToStr16>:


// Converts a number to UTF-16LE
// Useful for fields in the USB Descriptor
void hex32ToStr16( uint32_t in, uint16_t* out, uint8_t op )
{
    66f6:	b530      	push	{r4, r5, lr}
    66f8:	b085      	sub	sp, #20
	// Convert number to ASCII
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );
    66fa:	ad01      	add	r5, sp, #4


// Converts a number to UTF-16LE
// Useful for fields in the USB Descriptor
void hex32ToStr16( uint32_t in, uint16_t* out, uint8_t op )
{
    66fc:	460c      	mov	r4, r1
	// Convert number to ASCII
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );
    66fe:	4629      	mov	r1, r5
    6700:	f7ff ffbd 	bl	667e <hex32ToStr_op>
    6704:	4621      	mov	r1, r4
    6706:	2300      	movs	r3, #0
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
	{
		// Don't copy the character if NULL and the current is not NULL
		// Just stop
		if ( tmpStr[byte] == '\0' && out[byte] != 0x0000 )
    6708:	5cea      	ldrb	r2, [r5, r3]
    670a:	b90a      	cbnz	r2, 6710 <hex32ToStr16+0x1a>
    670c:	8808      	ldrh	r0, [r1, #0]
    670e:	b920      	cbnz	r0, 671a <hex32ToStr16+0x24>
    6710:	3301      	adds	r3, #1
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );

	// Convert number to UTF-16LE
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
    6712:	2b0b      	cmp	r3, #11
		if ( tmpStr[byte] == '\0' && out[byte] != 0x0000 )
		{
			break;
		}

		out[byte] = tmpStr[byte] | 0x0000;
    6714:	f821 2b02 	strh.w	r2, [r1], #2
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );

	// Convert number to UTF-16LE
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
    6718:	d1f6      	bne.n	6708 <hex32ToStr16+0x12>
			break;
		}

		out[byte] = tmpStr[byte] | 0x0000;
	}
}
    671a:	b005      	add	sp, #20
    671c:	bd30      	pop	{r4, r5, pc}

0000671e <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    671e:	b510      	push	{r4, lr}
    6720:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    6722:	f810 2b01 	ldrb.w	r2, [r0], #1
    6726:	b122      	cbz	r2, 6732 <eqStr+0x14>
    6728:	f811 4b01 	ldrb.w	r4, [r1], #1
    672c:	4294      	cmp	r4, r2
    672e:	4603      	mov	r3, r0
    6730:	d0f6      	beq.n	6720 <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    6732:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    6736:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    673a:	4290      	cmp	r0, r2
    673c:	bf14      	ite	ne
    673e:	7818      	ldrbne	r0, [r3, #0]
    6740:	f64f 70ff 	movweq	r0, #65535	; 0xffff
}
    6744:	b200      	sxth	r0, r0
    6746:	bd10      	pop	{r4, pc}

00006748 <numToInt>:

int numToInt( char* in )
{
    6748:	b530      	push	{r4, r5, lr}
    674a:	4602      	mov	r2, r0
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    674c:	240a      	movs	r4, #10
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    674e:	2501      	movs	r5, #1
    6750:	4611      	mov	r1, r2
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    6752:	f812 3b01 	ldrb.w	r3, [r2], #1
    6756:	b193      	cbz	r3, 677e <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    6758:	2b2b      	cmp	r3, #43	; 0x2b
    675a:	4611      	mov	r1, r2
    675c:	d00d      	beq.n	677a <numToInt+0x32>
    675e:	d802      	bhi.n	6766 <numToInt+0x1e>
    6760:	2b20      	cmp	r3, #32
    6762:	d00a      	beq.n	677a <numToInt+0x32>
    6764:	e008      	b.n	6778 <numToInt+0x30>
    6766:	2b2d      	cmp	r3, #45	; 0x2d
    6768:	d003      	beq.n	6772 <numToInt+0x2a>
    676a:	2b78      	cmp	r3, #120	; 0x78
    676c:	d104      	bne.n	6778 <numToInt+0x30>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    676e:	2410      	movs	r4, #16
			msd = lsd;
			break;
    6770:	e003      	b.n	677a <numToInt+0x32>
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    6772:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6776:	e000      	b.n	677a <numToInt+0x32>

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
	{
		// Check for positive/negative
		switch ( *lsd++ )
    6778:	4601      	mov	r1, r0
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    677a:	4608      	mov	r0, r1
    677c:	e7e8      	b.n	6750 <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    677e:	2c0a      	cmp	r4, #10
    6780:	d003      	beq.n	678a <numToInt+0x42>
    6782:	2c10      	cmp	r4, #16
    6784:	d11f      	bne.n	67c6 <numToInt+0x7e>
    6786:	2401      	movs	r4, #1
    6788:	e012      	b.n	67b0 <numToInt+0x68>
    678a:	2201      	movs	r2, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    678c:	4281      	cmp	r1, r0
    678e:	d91a      	bls.n	67c6 <numToInt+0x7e>
			total += ( (*--lsd) - '0' ) * digit;
    6790:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6794:	3c30      	subs	r4, #48	; 0x30
    6796:	fb02 3304 	mla	r3, r2, r4, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    679a:	240a      	movs	r4, #10
    679c:	4362      	muls	r2, r4
    679e:	e7f5      	b.n	678c <numToInt+0x44>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    67a0:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    67a4:	2a39      	cmp	r2, #57	; 0x39
    67a6:	d806      	bhi.n	67b6 <numToInt+0x6e>
    67a8:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    67aa:	fb04 3302 	mla	r3, r4, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    67ae:	0124      	lsls	r4, r4, #4
    67b0:	4281      	cmp	r1, r0
    67b2:	d8f5      	bhi.n	67a0 <numToInt+0x58>
    67b4:	e007      	b.n	67c6 <numToInt+0x7e>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    67b6:	2a46      	cmp	r2, #70	; 0x46
    67b8:	d801      	bhi.n	67be <numToInt+0x76>
    67ba:	3a37      	subs	r2, #55	; 0x37
    67bc:	e7f5      	b.n	67aa <numToInt+0x62>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    67be:	2a66      	cmp	r2, #102	; 0x66
    67c0:	d8f5      	bhi.n	67ae <numToInt+0x66>
    67c2:	3a57      	subs	r2, #87	; 0x57
    67c4:	e7f1      	b.n	67aa <numToInt+0x62>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    67c6:	fb05 f003 	mul.w	r0, r5, r3
    67ca:	bd30      	pop	{r4, r5, pc}
    67cc:	6c756146 	.word	0x6c756146
    67d0:	0a0d2174 	.word	0x0a0d2174
    67d4:	494d4e00 	.word	0x494d4e00
    67d8:	000a0d21 	.word	0x000a0d21
    67dc:	64726148 	.word	0x64726148
    67e0:	75614620 	.word	0x75614620
    67e4:	2021746c 	.word	0x2021746c
    67e8:	5f424353 	.word	0x5f424353
    67ec:	52534648 	.word	0x52534648
    67f0:	4d00203a 	.word	0x4d00203a
    67f4:	726f6d65 	.word	0x726f6d65
    67f8:	614d2079 	.word	0x614d2079
    67fc:	6567616e 	.word	0x6567616e
    6800:	61462072 	.word	0x61462072
    6804:	21746c75 	.word	0x21746c75
    6808:	42435320 	.word	0x42435320
    680c:	5346435f 	.word	0x5346435f
    6810:	00203a52 	.word	0x00203a52
    6814:	42435320 	.word	0x42435320
    6818:	414d4d5f 	.word	0x414d4d5f
    681c:	00203a52 	.word	0x00203a52
    6820:	20737542 	.word	0x20737542
    6824:	6c756146 	.word	0x6c756146
    6828:	53202174 	.word	0x53202174
    682c:	435f4243 	.word	0x435f4243
    6830:	3a525346 	.word	0x3a525346
    6834:	53200020 	.word	0x53200020
    6838:	425f4243 	.word	0x425f4243
    683c:	3a524146 	.word	0x3a524146
    6840:	73550020 	.word	0x73550020
    6844:	20656761 	.word	0x20656761
    6848:	6c756146 	.word	0x6c756146
    684c:	53202174 	.word	0x53202174
    6850:	435f4243 	.word	0x435f4243
    6854:	3a525346 	.word	0x3a525346
    6858:	0020      	.short	0x0020

0000685a <sys_reset_to_loader_magic>:
    685a:	00ff 527f 5345 5445 5420 204f 4f4c 4441     ...RESET TO LOAD
    686a:	5245 007f 00ff fde8 5700                         ER.......

00006873 <ledWPageCLIDict_DescEntry>:
    6873:	7257 7469 2065 6f74 6720 7669 6e65 7220     Write to given r
    6883:	6765 7369 6574 2072 6170 6567 7320 6174     egister page sta
    6893:	7472 6e69 2067 7461 6120 6464 6572 7373     rting at address
    68a3:	202e 2e69 2e65 3020 3278 3020 3278 2034     . i.e. 0x2 0x24 
    68b3:	7830 3046 3020 3178 0032                    0xF0 0x12.

000068bd <ledTestCLIDict_DescEntry>:
    68bd:	6554 7473 6f20 7475 7420 6568 6c20 6465     Test out the led
    68cd:	7020 6761 7365 002e 0000 2900                     pages.....

000068d8 <ledCLIDict>:
    68d8:	6b29 0000 6c62 0000 2c95 0000 6b31 0000     )k..bl...,..1k..
    68e8:	6cdb 0000 2c0d 0000 6b39 0000 6b6c 0000     .l...,..9k..lk..
    68f8:	2e85 0000 6b41 0000 6944 0000 2be1 0000     ....Ak..Di...+..
    6908:	6b4a 0000 6962 0000 2b15 0000 6b53 0000     Jk..bi...+..Sk..
    6918:	68bd 0000 29e5 0000 6b5b 0000 6873 0000     .h...)..[k..sh..
    6928:	2d1d 0000 6b64 0000 6c31 0000 2985 0000     .-..dk..1l...)..
    6938:	0000 0000 0000 0000 0000 0000               ............

00006944 <ledRPageCLIDict_DescEntry>:
    6944:	6552 6461 7420 6568 6720 7669 6e65 7220     Read the given r
    6954:	6765 7369 6574 2072 6170 6567 002e          egister page..

00006962 <ledStartCLIDict_DescEntry>:
    6962:	6944 6173 6c62 2065 6f73 7466 6177 6572     Disable software
    6972:	7320 7568 6474 776f 2e6e 1b00 315b 333b      shutdown...[1;3
    6982:	6d35 4544 5542 1b47 305b 206d 202d 4144     5mDEBUG.[0m - DA
    6992:	4154 203a 1b00 315b 333b 6d33 4157 4e52     TA: ..[1;33mWARN
    69a2:	4e49 1b47 305b 206d 202d 3249 5f43 7542     ING.[0m - I2C_Bu
    69b2:	6666 7265 7550 6873 6620 6961 656c 2c64     fferPush failed,
    69c2:	6220 6675 6566 2072 7566 6c6c 203a 1b00      buffer full: ..
    69d2:	315b 353b 333b 6d31 5245 4f52 1b52 305b     [1;5;31mERROR.[0
    69e2:	206d 202d 6f4e 6220 6675 6566 2072 6f74     m - No buffer to
    69f2:	7020 706f 6120 206e 6e65 7274 2079 7266      pop an entry fr
    6a02:	6d6f 2e2e 202e 1b00 315b 353b 333b 6d31     om... ..[1;5;31m
    6a12:	5245 4f52 1b52 305b 206d 202d 3249 2043     ERROR.[0m - I2C 
    6a22:	414e 204b 6564 6574 7463 6465 2e2e 0d2e     NAK detected....
    6a32:	000a 5b1b 3b31 3b35 3133 456d 5252 524f     ...[1;5;31mERROR
    6a42:	5b1b 6d30 2d20 4120 6272 7469 6172 6974     .[0m - Arbitrati
    6a52:	6e6f 6c20 736f 2e74 2e2e 0a0d 1b00 315b     on lost.......[1
    6a62:	353b 333b 6d31 5245 4f52 1b52 305b 206d     ;5;31mERROR.[0m 
    6a72:	202d 6c53 7661 2065 6441 7264 7365 2073     - Slave Address 
    6a82:	3249 2043 414e 204b 6564 6574 7463 6465     I2C NAK detected
    6a92:	2e2e 0d2e 000a 5b1b 3b31 3533 446d 4245     .......[1;35mDEB
    6aa2:	4755 5b1b 6d30 2d20 4120 7474 6d65 7470     UG.[0m - Attempt
    6ab2:	6e69 2067 6f74 7220 6165 2064 7962 6574     ing to read byte
    6ac2:	2d20 0020 5b1b 3b31 3533 446d 4245 4755      - ..[1;35mDEBUG
    6ad2:	5b1b 6d30 2d20 4e20 5845 0d54 000a 5b1b     .[0m - NEXT....[
    6ae2:	3b31 3233 496d 464e 1b4f 305b 206d 202d     1;32mINFO.[0m - 
    6af2:	6553 646e 6e69 3a67 0020 207c 4c00 4445     Sending: .| .LED
    6b02:	635f 6e6f 7274 6c6f 635f 7061 6261 6c69     _control_capabil
    6b12:	7469 2879 6f6d 6564 612c 6f6d 6e75 2c74     ity(mode,amount,
    6b22:	6e69 6564 2978 6900 6332 6552 7663 6900     index).i2cRecv.i
    6b32:	6332 6553 646e 6c00 6465 7443 6c72 6c00     2cSend.ledCtrl.l
    6b42:	6465 5052 6761 0065 656c 5364 6174 7472     edRPage.ledStart
    6b52:	6c00 6465 6554 7473 6c00 6465 5057 6761     .ledTest.ledWPag
    6b62:	0065 656c 5a64 7265 006f                    e.ledZero.

00006b6c <ledCtrlCLIDict_DescEntry>:
    6b6c:	6142 6973 2063 454c 2044 6f63 746e 6f72     Basic LED contro
    6b7c:	2e6c 4120 6772 3a73 3c20 6f6d 6564 203e     l. Args: <mode> 
    6b8c:	613c 6f6d 6e75 3e74 5b20 693c 646e 7865     <amount> [<index
    6b9c:	5d3e e800                                        >].

00006b9f <LED_defaultBrightness1>:
    6b9f:	24e8 ffff ffff ffff ffff 0000 0000 0000     .$..............
    6baf:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6bbf:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6bcf:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6bdf:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6bef:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6bff:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6c0f:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6c1f:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6c2f:	0000                                        ..

00006c31 <ledZeroCLIDict_DescEntry>:
    6c31:	655a 6f72 6f20 7475 4c20 4445 7220 6765     Zero out LED reg
    6c41:	7369 6574 2072 6170 6567 2073 6e28 6e6f     ister pages (non
    6c51:	632d 6e6f 6966 7567 6172 6974 6e6f 2e29     -configuration).
    6c61:	5300                                             .

00006c62 <i2cRecvCLIDict_DescEntry>:
    6c62:	6553 646e 4920 4332 7320 7165 6575 636e     Send I2C sequenc
    6c72:	2065 666f 6220 7479 7365 6120 646e 6520     e of bytes and e
    6c82:	7078 6365 2074 2061 6572 6c70 2079 666f     xpect a reply of
    6c92:	3120 6220 7479 2065 6e6f 7420 6568 6c20      1 byte on the l
    6ca2:	7361 2074 6573 7571 6e65 6563 0d2e 090a     ast sequence....
    6cb2:	5509 6573 7c20 7327 7420 206f 7073 696c     .Use |'s to spli
    6cc2:	2074 6573 7571 6e65 6563 2073 6977 6874     t sequences with
    6cd2:	6120 7320 6f74 2e70 5300                          a stop..

00006cdb <i2cSendCLIDict_DescEntry>:
    6cdb:	6553 646e 4920 4332 7320 7165 6575 636e     Send I2C sequenc
    6ceb:	2065 666f 6220 7479 7365 202e 7355 2065     e of bytes. Use 
    6cfb:	277c 2073 6f74 7320 6c70 7469 7320 7165     |'s to split seq
    6d0b:	6575 636e 7365 7720 7469 2068 2061 7473     uences with a st
    6d1b:	706f 002e                                   op..

00006d1f <LED_ledEnableMask1>:
    6d1f:	00e8 00ff 00ff 00ff 00ff 00ff 00ff 00ff     ................
    6d2f:	00ff 00ff                                   ....

00006d33 <ledCLIDictName>:
    6d33:	5349 4953 4c20 4445 4d20 646f 6c75 2065     ISSI LED Module 
    6d43:	6f43 6d6d 6e61 7364 4500                         Commands.

00006d4c <matrixDebugCLIDict_DescEntry>:
    6d4c:	6e45 6261 656c 2073 616d 7274 7869 6420     Enables matrix d
    6d5c:	6265 6775 6d20 646f 2c65 7020 6972 746e     ebug mode, print
    6d6c:	2073 756f 2074 6165 6863 7320 6163 206e     s out each scan 
    6d7c:	6f63 6564 0d2e 090a 4909 2066 7261 7567     code.....If argu
    6d8c:	656d 746e 1b20 335b 6d35 1b54 305b 206d     ment .[35mT.[0m 
    6d9c:	7369 6720 7669 6e65 202c 7270 6e69 7374     is given, prints
    6dac:	6f20 7475 6520 6361 2068 6373 6e61 6320      out each scan c
    6dbc:	646f 2065 7473 7461 2065 7274 6e61 6973     ode state transi
    6dcc:	6974 6e6f 002e 5b1b 3b31 3233 496d 464e     tion...[1;32mINF
    6ddc:	1b4f 305b 206d 202d 6f43 756c 6e6d 3a73     O.[0m - Columns:
    6dec:	2020 1b00 315b 333b 6d32 4e49 4f46 5b1b       ..[1;32mINFO.[
    6dfc:	6d30 2d20 5220 776f 3a73 2020 2020 0020     0m - Rows:     .
    6e0c:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    6e1c:	202d 614d 2078 654b 7379 203a 1b00 315b     - Max Keys: ..[1
    6e2c:	333b 6d32 4e49 4f46 5b1b 6d30 2d20 4d20     ;32mINFO.[0m - M
    6e3c:	7461 6972 2078 6544 7562 2067 6f4d 6564     atrix Debug Mode
    6e4c:	203a 1b00 315b 4f6d 5b1b 6d30 1b00 315b     : ..[1mO.[0m..[1
    6e5c:	333b 6d33 1b50 305b 006d 5b1b 3b31 3233     ;33mP.[0m..[1;32
    6e6c:	486d 5b1b 6d30 1b00 315b 333b 6d35 1b52     mH.[0m..[1;35mR.
    6e7c:	305b 006d 5b1b 3b31 3133 496d 5b1b 6d30     [0m..[1;31mI.[0m
    6e8c:	1b00 315b 353b 333b 6d31 5245 4f52 1b52     ..[1;5;31mERROR.
    6e9c:	305b 206d 202d 614d 7274 7869 7320 6163     [0m - Matrix sca
    6eac:	206e 7562 2167 2021 6552 6f70 7472 6d20     n bug!! Report m
    6ebc:	2165 0a0d 1b00 315b 333b 6d32 4e49 4f46     e!....[1;32mINFO
    6ecc:	5b1b 6d30 2d20 4d20 7861 7320 6163 736e     .[0m - Max scans
    6edc:	203a 2020 2020 0020 5b1b 3b31 3233 496d     :      ..[1;32mI
    6eec:	464e 1b4f 305b 206d 202d 7250 7665 6f69     NFO.[0m - Previo
    6efc:	7375 7320 6163 736e 203a 1b00 315b 333b     us scans: ..[1;3
    6f0c:	6d32 4e49 4f46 5b1b 6d30 2d20 5320 6163     2mINFO.[0m - Sca
    6f1c:	206e 754e 626d 7265 203a 2020 0020 6b3c     n Number:    .<k
    6f2c:	7965 3a3e 703c 6572 6976 756f 2073 7473     ey>:<previous st
    6f3c:	7461 3e65 633c 7275 6572 746e 7320 6174     ate><current sta
    6f4c:	6574 203e 613c 7463 7669 2065 6f63 6e75     te> <active coun
    6f5c:	3e74 3c20 6e69 6361 6974 6576 6320 756f     t> <inactive cou
    6f6c:	746e 003e 5b1b 6d31 7830 3a00 2000 7830     nt>..[1m0x.:. 0x
    6f7c:	6d00 7461 6972 4478 6265 6775 6d00 7461     .matrixDebug.mat
    6f8c:	6972 4978 666e 006f 616d 7274 7869 7453     rixInfo.matrixSt
    6f9c:	7461 0065                                   ate.

00006fa0 <matrixStateCLIDict_DescEntry>:
    6fa0:	7250 6e69 7374 6f20 7475 7420 6568 6320     Prints out the c
    6fb0:	7275 6572 746e 7320 6163 206e 6174 6c62     urrent scan tabl
    6fc0:	2065 204e 6974 656d 2e73 0a0d 0909 1b20     e N times..... .
    6fd0:	315b 4f6d 5b1b 6d30 2d20 4f20 6666 202c     [1mO.[0m - Off, 
    6fe0:	5b1b 3b31 3333 506d 5b1b 6d30 2d20 5020     .[1;33mP.[0m - P
    6ff0:	6572 7373 202c 5b1b 3b31 3233 486d 5b1b     ress, .[1;32mH.[
    7000:	6d30 2d20 4820 6c6f 2c64 1b20 315b 333b     0m - Hold, .[1;3
    7010:	6d35 1b52 305b 206d 202d 6552 656c 7361     5mR.[0m - Releas
    7020:	2c65 1b20 315b 333b 6d31 1b49 305b 206d     e, .[1;31mI.[0m 
    7030:	202d 6e49 6176 696c 0064                    - Invalid.

0000703a <matrixInfoCLIDict_DescEntry>:
    703a:	7250 6e69 2074 6e69 6f66 6120 6f62 7475     Print info about
    704a:	7420 6568 6320 6e6f 6966 7567 6572 2064      the configured 
    705a:	616d 7274 7869 002e                         matrix..

00007062 <matrixCLIDictName>:
    7062:	614d 7274 7869 4d20 646f 6c75 2065 6f43     Matrix Module Co
    7072:	6d6d 6e61 7364 0000 0000                    mmands....

0000707c <matrixCLIDict>:
    707c:	6f7d 0000 6d4c 0000 2fa1 0000 6f89 0000     }o..Lm.../...o..
    708c:	703a 0000 2f29 0000 6f94 0000 6fa0 0000     :p..)/...o...o..
    709c:	2f7d 0000 0000 0000 0000 0000 0000 0000     }/..............

000070ac <rm20_guide>:
    70ac:	0d01 0064                                   ..d.

000070b0 <layer1_tl_0x0C>:
    70b0:	0001 0000 0059 0000                         ....Y...

000070b8 <layer1_tl_0x34>:
    70b8:	0000 0000                                   ....

000070bc <rm19_guide>:
    70bc:	0d01 004f                                   ..O.

000070c0 <layer1_tl_0x36>:
    70c0:	0000 0000                                   ....

000070c4 <rm34_guide>:
    70c4:	0d01 002d                                   ..-.

000070c8 <rm95_guide>:
    70c8:	0d01 003c                                   ..<.

000070cc <rm3_guide>:
    70cc:	0d01 0037                                   ..7.

000070d0 <tm34_guide>:
    70d0:	0001 3001 0000 0000                         ...0....

000070d8 <CapabilitiesList>:
    70d8:	2ee1 0000 0004 0000 3aad 0000 0002 0000     .........:......
    70e8:	3ad5 0000 0002 0000 3afd 0000 0001 0000     .:.......:......
    70f8:	3a71 0000 0002 0000 3a49 0000 0003 0000     q:......I:......
    7108:	4739 0000 0002 0000 47d5 0000 0000 0000     9G.......G......
    7118:	48ad 0000 0000 0000 48dd 0000 0000 0000     .H.......H......
    7128:	477d 0000 0000 0000 4791 0000 0001 0000     }G.......G......
    7138:	4911 0000 0000 0000 4945 0000 0001 0000     .I......EI......
    7148:	47ed 0000 0006 0000                         .G......

00007150 <rm38_guide>:
    7150:	0d01 0013                                   ....

00007154 <rm54_guide>:
    7154:	0d01 000c                                   ....

00007158 <rm8_guide>:
    7158:	0d01 0007                                   ....

0000715c <tm96_guide>:
    715c:	0001 2701 0100                                   ...'.

00007161 <rm36_guide>:
    7161:	0d01 004b                                   ..K.

00007165 <rm97_guide>:
    7165:	0d01 004a                                   ..J.

00007169 <tm35_guide>:
    7169:	0001 0b01 0100                                   .....

0000716e <tm36_guide>:
    716e:	0001 4401 0100                                   ...D.

00007173 <tm97_guide>:
    7173:	0001 0901 0000                                   .....

00007178 <layer1_tl_0x3A>:
    7178:	0000 0000                                   ....

0000717c <layer1_tl_0x09>:
    717c:	0001 0000 0061 0000                         ....a...

00007184 <layer1_tl_0x3B>:
    7184:	0001 0000 0066 0000                         ....f...

0000718c <rm89_guide>:
    718c:	0d01 003e                                   ..>.

00007190 <default_tl_0x13>:
    7190:	0001 0000 0004 0000                         ........

00007198 <rm5_guide>:
    7198:	0d01 0011                                   ....

0000719c <rm72_guide>:
    719c:	0d01 003a                                   ..:.

000071a0 <rm62_guide>:
    71a0:	0d01 001c                                   ....

000071a4 <tm38_guide>:
    71a4:	0001 3101 0100                                   ...1.

000071a9 <tm99_guide>:
    71a9:	0001 1801 0100                                   .....

000071ae <tm62_guide>:
    71ae:	0001 0201 0100                                   .....

000071b3 <tm57_guide>:
    71b3:	0001 3a01 0100                                   ...:.

000071b8 <rm25_guide>:
    71b8:	0d01 0005                                   ....

000071bc <tm56_guide>:
    71bc:	0001 1801 0100                                   .....

000071c1 <tm68_guide>:
    71c1:	0001 2501 0100                                   ...%.

000071c6 <rm64_guide>:
    71c6:	0d01 0020 0000                              .. ...

000071cc <layer1_tl_0x03>:
    71cc:	0001 0000 0069 0000                         ....i...

000071d4 <tm64_guide>:
    71d4:	0001 1601 0100                                   .....

000071d9 <tm31_guide>:
    71d9:	0001 4301 0100                                   ...C.

000071de <rm35_guide>:
    71de:	0d01 0050                                   ..P.

000071e2 <rm51_guide>:
    71e2:	0d01 0026 0000                              ..&...

000071e8 <default_tl_0x1A>:
    71e8:	0001 0000 0027 0000                         ....'...

000071f0 <tm32_guide>:
    71f0:	0001 1e01 0000 0000                         ........

000071f8 <default_tl_0x1B>:
    71f8:	0001 0000 002c 0000                         ....,...

00007200 <tm86_guide>:
    7200:	0001 4401 0100                                   ...D.

00007205 <tm101_guide>:
    7205:	0001 0201 0100                                   .....

0000720a <rm15_guide>:
    720a:	0d01 002b 0000                              ..+...

00007210 <default_tl_0x1D>:
    7210:	0001 0000 001b 0000                         ........

00007218 <rm46_guide>:
    7218:	0d01 0034                                   ..4.

0000721c <default_tl_0x1E>:
    721c:	0001 0000 0020 0000                         .... ...

00007224 <default_tl_0x1F>:
    7224:	0001 0000 000b 0000                         ........

0000722c <tm90_guide>:
    722c:	0001 1701 0100                                   .....

00007231 <rm60_guide>:
    7231:	0d01 001f 5b1b 3b31 3233 496d 464e 1b4f     .....[1;32mINFO.
    7241:	305b 206d 202d 6143 6170 6962 696c 6974     [0m - Capabiliti
    7251:	7365 4c20 7369 2074 0d00 090a 1b00 315b     es List ......[1
    7261:	333b 6d32 4e49 4f46 5b1b 6d30 2d20 4b20     ;32mINFO.[0m - K
    7271:	1b00 315b 333b 6d33 4157 4e52 4e49 1b47     ..[1;33mWARNING.
    7281:	305b 206d 202d 6c66 7361 4d68 646f 4565     [0m - flashModeE
    7291:	616e 6c62 6465 6e20 746f 7320 7465 202c     nabled not set, 
    72a1:	6163 636e 6c65 696c 676e 6620 7269 776d     cancelling firmw
    72b1:	7261 2065 6572 6f6c 6461 2e2e 0d2e 000a     are reload......
    72c1:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    72d1:	202d 6553 2074 6c66 7361 4d68 646f 4565     - Set flashModeE
    72e1:	616e 6c62 6465 7420 206f 2031 6e69 7920     nabled to 1 in y
    72f1:	756f 2072 6c6b 206c 6f63 666e 6769 7275     our kll configur
    7301:	7461 6f69 2e6e 1b00 315b 333b 6d32 4e49     ation...[1;32mIN
    7311:	4f46 5b1b 6d30 2d20 4c20 7961 7265 4420     FO.[0m - Layer D
    7321:	6265 6775 4d20 646f 3a65 0020 5b1b 3b31     ebug Mode: ..[1;
    7331:	3233 496d 464e 1b4f 305b 206d 202d 6553     32mINFO.[0m - Se
    7341:	7474 6e69 2067 614c 6579 2072 004c 7420     tting Layer L. t
    7351:	206f 202d 1b00 315b 333b 6d32 4e49 4f46     o - ..[1;32mINFO
    7361:	5b1b 6d30 2d20 4d20 6361 6f72 4420 6265     .[0m - Macro Deb
    7371:	6775 4d20 646f 3a65 0020 5b1b 3b31 3233     ug Mode: ..[1;32
    7381:	496d 464e 1b4f 305b 206d 202d 614d 7263     mINFO.[0m - Macr
    7391:	206f 7250 636f 7365 6973 676e 4d20 646f     o Processing Mod
    73a1:	3a65 0020 5b1b 3b31 3233 496d 464e 1b4f     e: ..[1;32mINFO.
    73b1:	305b 206d 202d 614c 6579 2072 694c 7473     [0m - Layer List
    73c1:	4400 203a 6857 7469 4665 786f 2b20 7320     .D: WhiteFox + s
    73d1:	6474 7546 636e 614d 0070 1b20 315b 286d     tdFuncMap. .[1m(
    73e1:	6564 6166 6c75 2974 5b1b 6d30 0d00 090a     default).[0m....
    73f1:	2009 614c 6579 2072 7453 7461 3a65 0020     . Layer State: .
    7401:	4620 7269 7473 2d20 203e 614c 7473 4920      First -> Last I
    7411:	646e 6369 7365 203a 2000 3e2d 0020 3a31     ndices: . -> .1:
    7421:	5720 6968 6574 6f46 2078 202b 7473 4664      WhiteFox + stdF
    7431:	6e75 4d63 7061 1b00 315b 333b 6d32 4e49     uncMap..[1;32mIN
    7441:	4f46 5b1b 6d30 2d20 5020 6e65 6964 676e     FO.[0m - Pending
    7451:	4b20 7965 4520 6576 746e 3a73 0020 3a20      Key Events: . :
    7461:	0020 5b1b 3b31 3233 496d 464e 1b4f 305b      ..[1;32mINFO.[0
    7471:	206d 202d 6550 646e 6e69 2067 7254 6769     m - Pending Trig
    7481:	6567 2072 614d 7263 736f 203a 1b00 315b     ger Macros: ..[1
    7491:	333b 6d32 4e49 4f46 5b1b 6d30 2d20 5020     ;32mINFO.[0m - P
    74a1:	6e65 6964 676e 5220 7365 6c75 2074 614d     ending Result Ma
    74b1:	7263 736f 203a 1b00 315b 333b 6d32 4e49     cros: ..[1;32mIN
    74c1:	4f46 5b1b 6d30 2d20 5420 6972 6767 7265     FO.[0m - Trigger
    74d1:	4d20 6361 6f72 2073 6152 676e 3a65 5420      Macros Range: T
    74e1:	2030 3e2d 5420 1b00 315b 333b 6d32 4e49     0 -> T..[1;32mIN
    74f1:	4f46 5b1b 6d30 2d20 5220 7365 6c75 2074     FO.[0m - Result 
    7501:	4d20 6361 6f72 2073 6152 676e 3a65 5220      Macros Range: R
    7511:	2030 3e2d 5220 1b00 315b 333b 6d32 4e49     0 -> R..[1;32mIN
    7521:	4f46 5b1b 6d30 2d20 5420 6972 6767 7265     FO.[0m - Trigger
    7531:	3a20 5220 7365 6c75 2074 614d 7263 206f      : Result Macro 
    7541:	6150 7269 0073 5409 2000 203a 0052 5b1b     Pairs..T. : R..[
    7551:	3b31 3533 446d 4245 4755 5b1b 6d30 2d20     1;35mDEBUG.[0m -
    7561:	4c20 7961 7265 0020 3020 4d00 6361 6f72      Layer . 0.Macro
    7571:	6c5f 7961 7265 7453 7461 2865 616c 6579     _layerState(laye
    7581:	4972 646e 7865 6c2c 7961 7265 7453 7461     rIndex,layerStat
    7591:	2965 4d00 6361 6f72 6c5f 7961 7265 6853     e).Macro_layerSh
    75a1:	6669 2874 616c 6579 4972 646e 7865 0029     ift(layerIndex).
    75b1:	614d 7263 5f6f 616c 6579 4c72 7461 6863     Macro_layerLatch
    75c1:	6c28 7961 7265 6e49 6564 2978 4d00 6361     (layerIndex).Mac
    75d1:	6f72 6c5f 7961 7265 6f4c 6b63 6c28 7961     ro_layerLock(lay
    75e1:	7265 6e49 6564 2978 4d00 6361 6f72 6c5f     erIndex).Macro_l
    75f1:	7961 7265 6f52 6174 6574 7028 6572 6976     ayerRotate(previ
    7601:	756f 2973 1b00 315b 353b 333b 6d31 5245     ous)..[1;5;31mER
    7611:	4f52 1b52 305b 206d 202d 6353 6e61 4320     ROR.[0m - Scan C
    7621:	646f 2065 6168 2073 6f6e 6420 6665 6e69     ode has no defin
    7631:	6465 5420 6972 6767 7265 4d20 6361 6f72     ed Trigger Macro
    7641:	203a 1b00 315b 333b 6d33 4157 4e52 4e49     : ..[1;33mWARNIN
    7651:	1b47 305b 206d 202d 6353 6e61 6f43 6564     G.[0m - ScanCode
    7661:	6920 2073 756f 2074 666f 7220 6e61 6567      is out of range
    7671:	6e2f 746f 6420 6665 6e69 6465 203a 1b00     /not defined: ..
    7681:	315b 333b 6d35 4544 5542 1b47 305b 206d     [1;35mDEBUG.[0m 
    7691:	202d 614d 7263 206f 7453 7065 0a0d 1b00     - Macro Step....
    76a1:	315b 333b 6d32 4e49 4f46 5b1b 6d30 2d20     [1;32mINFO.[0m -
    76b1:	5420 6972 6767 7265 4d20 6361 6f72 4920      Trigger Macro I
    76c1:	646e 7865 203a 7c00 2b00 3b00 0d00 500a     ndex: .|.+.;...P
    76d1:	736f 7469 6f69 3a6e 0020 0a0d 6552 7573     osition: ...Resu
    76e1:	746c 4d20 6361 6f72 4920 646e 7865 203a     lt Macro Index: 
    76f1:	0d00 540a 6972 6767 7265 4d20 6361 6f72     ...Trigger Macro
    7701:	5320 6174 6574 203a 5700 6961 6974 676e      State: .Waiting
    7711:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    7721:	2d20 5220 7365 6c75 2074 614d 7263 206f      - Result Macro 
    7731:	6e49 6564 3a78 0020 002c 0a0d 6946 616e     Index: .,...Fina
    7741:	206c 7254 6769 6567 2072 7453 7461 2065     l Trigger State 
    7751:	5328 6174 6574 542f 7079 2965 203a 2f00     (State/Type): ./
    7761:	6300 7061 694c 7473 6300 7061 6553 656c     .capList.capSele
    7771:	7463 6b00 7965 6f48 646c 6b00 7965 7250     ct.keyHold.keyPr
    7781:	7365 0073 656b 5279 6c65 6165 6573 6c00     ess.keyRelease.l
    7791:	7961 7265 6544 7562 0067 616c 6579 4c72     ayerDebug.layerL
    77a1:	7369 0074 616c 6579 5372 6174 6574 6d00     ist.layerState.m
    77b1:	6361 6f72 6544 7562 0067 616d 7263 4c6f     acroDebug.macroL
    77c1:	7369 0074 616d 7263 506f 6f72 0063 616d     ist.macroProc.ma
    77d1:	7263 536f 6f68 0077 616d 7263 536f 6574     croShow.macroSte
    77e1:	0070                                        p.

000077e3 <tm91_guide>:
    77e3:	0001 1b01 0100                                   .....

000077e8 <tm103_guide>:
    77e8:	0001 1601 0100                                   .....

000077ed <tm15_guide>:
    77ed:	0001 1001 0100                                   .....

000077f2 <rm78_guide>:
    77f2:	0d01 0043                                   ..C.

000077f6 <rm41_guide>:
    77f6:	0d01 0018                                   ....

000077fa <rm92_guide>:
    77fa:	0d01 003b                                   ..;.

000077fe <tm17_guide>:
    77fe:	0001 2401 0100                                   ...$.

00007803 <tm69_guide>:
    7803:	0001 2901 0100                                   ...).

00007808 <tm41_guide>:
    7808:	0001 2e01 0100                                   .....

0000780d <tm92_guide>:
    780d:	0001 3d01 5300                                   ...=.

00007812 <keyPressCLIDict_DescEntry>:
    7812:	6553 646e 6b20 7965 702d 6572 7373 6520     Send key-press e
    7822:	6576 746e 2073 6f74 7420 6568 6d20 6361     vents to the mac
    7832:	6f72 6d20 646f 6c75 2e65 4420 7075 696c     ro module. Dupli
    7842:	6163 6574 2073 6168 6576 7520 646e 6665     cates have undef
    7852:	6e69 6465 6220 6865 7661 6f69 7275 0d2e     ined behaviour..
    7862:	090a 1b09 335b 6d35 3153 1b30 305b 206d     ....[35mS10.[0m 
    7872:	6353 6e61 6f63 6564 3020 3078 0041          Scancode 0x0A.

00007880 <rm49_guide>:
    7880:	0d01 00e2                                   ....

00007884 <rm18_guide>:
    7884:	0d01 0031                                   ..1.

00007888 <rm0_guide>:
    7888:	0d01 0021                                   ..!.

0000788c <tm105_guide>:
    788c:	0001 0301 4d00                                   .....

00007891 <macroCLIDictName>:
    7891:	614d 7263 206f 6f4d 7564 656c 4320 6d6f     Macro Module Com
    78a1:	616d 646e 0073 0100                              mands..

000078a8 <layer1_tl_0x00>:
    78a8:	0001 0000 004b 0000                         ....K...

000078b0 <tm52_guide>:
    78b0:	0001 2701 0100                                   ...'.

000078b5 <tm37_guide>:
    78b5:	0001 2d01 0100                                   ...-.

000078ba <tm19_guide>:
    78ba:	0001 4601 0000                              ...F..

000078c0 <layer1_tl_0x02>:
    78c0:	0001 0000 0065 0000                         ....e...

000078c8 <tm43_guide>:
    78c8:	0001 4001 0100                                   ...@.

000078cd <tm94_guide>:
    78cd:	0001 1c01 0000 0100                              .......

000078d4 <layer1_tl_0x04>:
    78d4:	0001 0000 0047 0000                         ....G...

000078dc <layer1_tl_0x05>:
    78dc:	0001 0000 005f 0000                         ...._...

000078e4 <layerDebugCLIDict_DescEntry>:
    78e4:	614c 6579 2072 6564 7562 2067 6f6d 6564     Layer debug mode
    78f4:	202e 6853 776f 2073 616c 6579 2072 7473     . Shows layer st
    7904:	6361 206b 6e61 2064 6e61 2079 6863 6e61     ack and any chan
    7914:	6567 2e73 0100                                   ges..

00007919 <rm91_guide>:
    7919:	0d01 003f                                   ..?.

0000791d <tm107_guide>:
    791d:	0001 2501 0100                                   ...%.

00007922 <rm7_guide>:
    7922:	0d01 0038 0000                              ..8...

00007928 <layer1_tl_0x08>:
    7928:	0001 0000 005d 0000                         ....]...

00007930 <tm85_guide>:
    7930:	0001 0b01 0000 0000                         ........

00007938 <default_tl_0x2D>:
    7938:	0001 0000 0025 0000                         ....%...

00007940 <tm45_guide>:
    7940:	0001 3d01 0000 0000                         ...=....

00007948 <default_tl_0x2E>:
    7948:	0001 0000 0029 0000                         ....)...

00007950 <rm33_guide>:
    7950:	0d01 001d                                   ....

00007954 <default_tl_0x2F>:
    7954:	0001 0000 0014 0000                         ........

0000795c <rm74_guide>:
    795c:	0601 01b4 0100                                   .....

00007961 <tm23_guide>:
    7961:	0001 0e01 0000 0000                              .......

00007968 <layer1_tl_0x41>:
    7968:	0000 0000                                   ....

0000796c <rm10_guide>:
    796c:	0d01 0010                                   ....

00007970 <layer1_tl_0x42>:
    7970:	0000 0000                                   ....

00007974 <rm44_guide>:
    7974:	0d01 0025                                   ..%.

00007978 <tm47_guide>:
    7978:	0001 4101 0000 0000                         ...A....

00007980 <default_tl_0x00>:
    7980:	0001 0000 0006 0000                         ........

00007988 <default_tl_0x01>:
    7988:	0001 0000 000c 0000                         ........

00007990 <default_tl_0x02>:
    7990:	0001 0000 003e 0000                         ....>...

00007998 <default_tl_0x03>:
    7998:	0001 0000 0042 0000                         ....B...

000079a0 <default_tl_0x04>:
    79a0:	0001 0000 0000 0000                         ........

000079a8 <default_tl_0x05>:
    79a8:	0001 0000 0032 0000                         ....2...

000079b0 <default_tl_0x06>:
    79b0:	0001 0000 0037 0000                         ....7...

000079b8 <default_tl_0x07>:
    79b8:	0001 0000 0021 0000                         ....!...

000079c0 <default_tl_0x08>:
    79c0:	0001 0000 002e 0000                         ........

000079c8 <default_tl_0x09>:
    79c8:	0001 0000 0035 0000                         ....5...

000079d0 <tm10_guide>:
    79d0:	0001 3601 0100                                   ...6.

000079d5 <tm1_guide>:
    79d5:	0001 2601 0100                                   ...&.

000079da <rm73_guide>:
    79da:	0601 00cd 0100                                   .....

000079df <tm79_guide>:
    79df:	0001 0d01 0100                                   .....

000079e4 <tm12_guide>:
    79e4:	0001 0101 0100                                   .....

000079e9 <tm73_guide>:
    79e9:	0001 0f01 0000 0100                              .......

000079f0 <default_tl_0x0A>:
    79f0:	0001 0000 001e 0000                         ........

000079f8 <layer1_tl_0x01>:
    79f8:	0001 0000 004c 0000                         ....L...

00007a00 <default_tl_0x0C>:
    7a00:	0001 0000 0028 0000                         ....(...

00007a08 <default_tl_0x0D>:
    7a08:	0001 0000 0012 0000                         ........

00007a10 <default_tl_0x0E>:
    7a10:	0001 0000 0017 0000                         ........

00007a18 <default_tl_0x0F>:
    7a18:	0001 0000 0002 0000                         ........

00007a20 <layer1_tl_0x06>:
    7a20:	0001 0000 0062 0000                         ....b...

00007a28 <layer1_tl_0x07>:
    7a28:	0001 0000 0054 0000                         ....T...

00007a30 <tm100_guide>:
    7a30:	0001 1901 0100                                   .....

00007a35 <tm2_guide>:
    7a35:	0001 0f01 0100                                   .....

00007a3a <tm14_guide>:
    7a3a:	0001 4501 0100                                   ...E.

00007a3f <tm75_guide>:
    7a3f:	0001 0001 0100                                   .....

00007a44 <tm61_guide>:
    7a44:	0001 1901 0000 0000                         ........

00007a4c <layer1_tl_0x0A>:
    7a4c:	0001 0000 0053 0000                         ....S...

00007a54 <layer1_tl_0x0B>:
    7a54:	0001 0000 0055 0000                         ....U...

00007a5c <layer1_tl_0x39>:
    7a5c:	0000 0000                                   ....

00007a60 <layer1_tl_0x0D>:
    7a60:	0001 0000 004f 0000                         ....O...

00007a68 <layer1_tl_0x0E>:
    7a68:	0001 0000 0051 0000                         ....Q...

00007a70 <layer1_tl_0x0F>:
    7a70:	0001 0000 0049 0000                         ....I...

00007a78 <tm5_guide>:
    7a78:	0001 3501 0100                                   ...5.

00007a7d <rm87_guide>:
    7a7d:	0d01 0041                                   ..A.

00007a81 <tm39_guide>:
    7a81:	0001 1a01 0100                                   .....

00007a86 <tm26_guide>:
    7a86:	0001 3401 0100                                   ...4.

00007a8b <tm77_guide>:
    7a8b:	0001 4501 0100                                   ...E.

00007a90 <tm50_guide>:
    7a90:	0001 0501 0100                                   .....

00007a95 <rm22_guide>:
    7a95:	0d01 0019                                   ....

00007a99 <rm56_guide>:
    7a99:	0d01 0028                                   ..(.

00007a9d <rm9_guide>:
    7a9d:	0d01 0015                                   ....

00007aa1 <tm7_guide>:
    7aa1:	0001 3901 0100                                   ...9.

00007aa6 <tm87_guide>:
    7aa6:	0001 2d01 0100                                   ...-.

00007aab <tm28_guide>:
    7aab:	0001 3f01 0100                                   ...?.

00007ab0 <tm89_guide>:
    7ab0:	0001 0c01 0000 0000                         ........

00007ab8 <default_tl_0x2A>:
    7ab8:	0001 0000 0030 0000                         ....0...

00007ac0 <rm82_guide>:
    7ac0:	0601 00e9 0100                                   .....

00007ac5 <rm37_guide>:
    7ac5:	0d01 001b 0000 0100                              .......

00007acc <default_tl_0x2C>:
    7acc:	0001 0000 003a 0000                         ....:...

00007ad4 <default_tl_0x10>:
    7ad4:	0001 0000 000f 0000                         ........

00007adc <default_tl_0x11>:
    7adc:	0001 0000 0015 0000                         ........

00007ae4 <default_tl_0x12>:
    7ae4:	0001 0000 0046 0000                         ....F...

00007aec <default_tl_0x14>:
    7aec:	0001 0000 0009 0000                         ........

00007af4 <default_tl_0x15>:
    7af4:	0001 0000 003b 0000                         ....;...

00007afc <default_tl_0x16>:
    7afc:	0001 0000 0040 0000                         ....@...

00007b04 <default_tl_0x17>:
    7b04:	0001 0000 002a 0000                         ....*...

00007b0c <default_tl_0x18>:
    7b0c:	0001 0000 0038 0000                         ....8...

00007b14 <default_tl_0x19>:
    7b14:	0001 0000 003d 0000                         ....=...

00007b1c <tm54_guide>:
    7b1c:	0001 2b01 0100                                   ...+.

00007b21 <rm12_guide>:
    7b21:	0d01 001e                                   ....

00007b25 <rm77_guide>:
    7b25:	0d01 0069                                   ..i.

00007b29 <rm16_guide>:
    7b29:	0d01 0006 0000 0000                              .......

00007b30 <layer1_tl_0x10>:
    7b30:	0000 0000                                   ....

00007b34 <layer1_tl_0x11>:
    7b34:	0000 0000                                   ....

00007b38 <layer1_tl_0x12>:
    7b38:	0000 0000                                   ....

00007b3c <layer1_tl_0x13>:
    7b3c:	0000 0000                                   ....

00007b40 <layer1_tl_0x14>:
    7b40:	0000 0000                                   ....

00007b44 <layer1_tl_0x15>:
    7b44:	0000 0000                                   ....

00007b48 <layer1_tl_0x16>:
    7b48:	0001 0000 0067 0000                         ....g...

00007b50 <layer1_tl_0x17>:
    7b50:	0001 0000 005a 0000                         ....Z...

00007b58 <layer1_tl_0x18>:
    7b58:	0001 0000 0063 0000                         ....c...

00007b60 <layer1_tl_0x19>:
    7b60:	0001 0000 0064 0000                         ....d...

00007b68 <tm80_guide>:
    7b68:	0001 4601 0000 0000                         ...F....

00007b70 <layer1_tl_0x1A>:
    7b70:	0001 0000 0058 0000                         ....X...

00007b78 <layer1_tl_0x1B>:
    7b78:	0001 0000 005b 0000                         ....[...

00007b80 <layer1_tl_0x1C>:
    7b80:	0001 0000 005e 0000                         ....^...

00007b88 <layer1_tl_0x1D>:
    7b88:	0001 0000 0052 0000                         ....R...

00007b90 <layer1_tl_0x1E>:
    7b90:	0000 0000                                   ....

00007b94 <layer1_tl_0x1F>:
    7b94:	0000 0000                                   ....

00007b98 <tm58_guide>:
    7b98:	0001 2c01 0100                                   ...,.

00007b9d <tm21_guide>:
    7b9d:	0001 1101 0100                                   .....

00007ba2 <tm82_guide>:
    7ba2:	0001 1d01 0100                                   .....

00007ba7 <rm43_guide>:
    7ba7:	0d01 002f                                   ../.

00007bab <layerStateCLIDict_DescEntry>:
    7bab:	6f4d 6964 7966 7320 6570 6963 6966 6465     Modify specified
    7bbb:	6920 646e 7865 6465 6c20 7961 7265 7320      indexed layer s
    7bcb:	6174 6574 3c20 616c 6579 3e72 3c20 7473     tate <layer> <st
    7bdb:	7461 2065 7962 6574 2e3e 0a0d 0909 5b1b     ate byte>......[
    7beb:	3533 4c6d 1b32 305b 206d 6e49 6564 6578     35mL2.[0m Indexe
    7bfb:	2064 614c 6579 2072 7830 3230 0a0d 0909     d Layer 0x02....
    7c0b:	2030 664f 2c66 3120 5320 6968 7466 202c     0 Off, 1 Shift, 
    7c1b:	2032 614c 6374 2c68 3420 4c20 636f 206b     2 Latch, 4 Lock 
    7c2b:	7453 7461 7365 0100                              States.

00007c32 <rm50_guide>:
    7c32:	0d01 000e                                   ....

00007c36 <rm4_guide>:
    7c36:	0d01 0008                                   ....

00007c3a <rm86_guide>:
    7c3a:	0d01 0039                                   ..9.

00007c3e <macroShowCLIDict_DescEntry>:
    7c3e:	6853 776f 7420 6568 6d20 6361 6f72 6320     Show the macro c
    7c4e:	726f 6572 7073 6e6f 6964 676e 7420 206f     orresponding to 
    7c5e:	6874 2065 6967 6576 206e 6e69 6564 2e78     the given index.
    7c6e:	0a0d 0909 5b1b 3533 546d 3631 5b1b 6d30     .....[35mT16.[0m
    7c7e:	4920 646e 7865 6465 5420 6972 6767 7265      Indexed Trigger
    7c8e:	4d20 6361 6f72 3020 3178 2c30 1b20 335b      Macro 0x10, .[3
    7c9e:	6d35 3152 1b32 305b 206d 6e49 6564 6578     5mR12.[0m Indexe
    7cae:	2064 6552 7573 746c 4d20 6361 6f72 3020     d Result Macro 0
    7cbe:	3078 0043                                   x0C.

00007cc2 <rm94_guide>:
    7cc2:	0601 0192 0000                              ......

00007cc8 <default_tl_0x3F>:
    7cc8:	0001 0000 001c 0000                         ........

00007cd0 <rm85_guide>:
    7cd0:	0001 0005 0000 0100                              .......

00007cd7 <tm33_guide>:
    7cd7:	0001 0701 0100                                   .....

00007cdc <tm84_guide>:
    7cdc:	0001 0701 0100                                   .....

00007ce1 <rm24_guide>:
    7ce1:	0d01 00e4                                   ....

00007ce5 <tm66_guide>:
    7ce5:	0001 0301 0100                                   .....

00007cea <rm58_guide>:
    7cea:	0d01 0036 0000                              ..6...

00007cf0 <default_tl_0x20>:
    7cf0:	0001 0000 0018 0000                         ........

00007cf8 <default_tl_0x21>:
    7cf8:	0001 0000 001d 0000                         ........

00007d00 <default_tl_0x22>:
    7d00:	0001 0000 0008 0000                         ........

00007d08 <default_tl_0x23>:
    7d08:	0001 0000 000d 0000                         ........

00007d10 <default_tl_0x24>:
    7d10:	0001 0000 0011 0000                         ........

00007d18 <default_tl_0x25>:
    7d18:	0001 0000 0044 0000                         ....D...

00007d20 <default_tl_0x26>:
    7d20:	0001 0000 0001 0000                         ........

00007d28 <default_tl_0x27>:
    7d28:	0001 0000 0034 0000                         ....4...

00007d30 <default_tl_0x28>:
    7d30:	0001 0000 0041 0000                         ....A...

00007d38 <default_tl_0x29>:
    7d38:	0001 0000 0045 0000                         ....E...

00007d40 <tm42_guide>:
    7d40:	0001 1701 4c00                                   .....

00007d45 <layerListCLIDict_DescEntry>:
    7d45:	694c 7473 6120 6176 6c69 6261 656c 6c20     List available l
    7d55:	7961 7265 2e73 0100                              ayers..

00007d5c <tm51_guide>:
    7d5c:	0001 3e01 0000 0000                         ...>....

00007d64 <layer1_tl_0x20>:
    7d64:	0000 0000                                   ....

00007d68 <default_tl_0x2B>:
    7d68:	0001 0000 0036 0000                         ....6...

00007d70 <layer1_tl_0x22>:
    7d70:	0000 0000                                   ....

00007d74 <layer1_tl_0x23>:
    7d74:	0000 0000                                   ....

00007d78 <layer1_tl_0x24>:
    7d78:	0001 0000 004e 0000                         ....N...

00007d80 <layer1_tl_0x25>:
    7d80:	0001 0000 006b 0000                         ....k...

00007d88 <layer1_tl_0x26>:
    7d88:	0001 0000 0048 0000                         ....H...

00007d90 <layer1_tl_0x27>:
    7d90:	0001 0000 0060 0000                         ....`...

00007d98 <layer1_tl_0x28>:
    7d98:	0001 0000 0068 0000                         ....h...

00007da0 <layer1_tl_0x29>:
    7da0:	0001 0000 006c 0000                         ....l...

00007da8 <rm90_guide>:
    7da8:	0d01 0042                                   ..B.

00007dac <tm49_guide>:
    7dac:	0001 1c01 0100                                   .....

00007db1 <tm4_guide>:
    7db1:	0001 1301 0100                                   .....

00007db6 <tm9_guide>:
    7db6:	0001 1401 0000                              ......

00007dbc <layer1_tl_0x2A>:
    7dbc:	0000 0000                                   ....

00007dc0 <layer1_tl_0x2B>:
    7dc0:	0000 0000                                   ....

00007dc4 <layer1_tl_0x2C>:
    7dc4:	0000 0000                                   ....

00007dc8 <layer1_tl_0x2D>:
    7dc8:	0001 0000 0057 0000                         ....W...

00007dd0 <layer1_tl_0x2E>:
    7dd0:	0000 0000                                   ....

00007dd4 <layer1_tl_0x2F>:
    7dd4:	0000 0000                                   ....

00007dd8 <macroCLIDict>:
    7dd8:	7762 0000 7fec 0000 34bd 0000 776a 0000     bw.......4..jw..
    7de8:	7ec0 0000 353d 0000 7774 0000 8528 0000     .~..=5..tw..(...
    7df8:	3ccd 0000 777c 0000 7812 0000 3cfb 0000     .<..|w...x...<..
    7e08:	7785 0000 80f3 0000 3d29 0000 7790 0000     .w......)=...w..
    7e18:	78e4 0000 3641 0000 779b 0000 7d45 0000     .x..A6...w..E}..
    7e28:	3739 0000 77a5 0000 7bab 0000 3671 0000     97...w...{..q6..
    7e38:	77b0 0000 85a4 0000 36d9 0000 77bb 0000     .w.......6...w..
    7e48:	87f6 0000 3819 0000 77c5 0000 8833 0000     .....8...w..3...
    7e58:	3709 0000 77cf 0000 7c3e 0000 4119 0000     .7...w..>|...A..
    7e68:	77d9 0000 80a4 0000 3515 0000 0000 0000     .w.......5......
    7e78:	0000 0000 0000 0000                         ........

00007e80 <rm66_guide>:
    7e80:	0d01 000b                                   ....

00007e84 <tm63_guide>:
    7e84:	0001 3b01 0000 0000                         ...;....

00007e8c <default_tl_0x38>:
    7e8c:	0001 0000 0003 0000                         ........

00007e94 <rm14_guide>:
    7e94:	0d01 0051                                   ..Q.

00007e98 <rm65_guide>:
    7e98:	0d01 004e                                   ..N.

00007e9c <tm40_guide>:
    7e9c:	0001 0c01 0000 0000                         ........

00007ea4 <default_tl_0x3D>:
    7ea4:	0001 0000 002d 0000                         ....-...

00007eac <rm80_guide>:
    7eac:	0d01 0044                                   ..D.

00007eb0 <tm65_guide>:
    7eb0:	0001 2801 0000 0000                         ...(....

00007eb8 <default_tl_0x3E>:
    7eb8:	0001 0000 0033 0000                         ....3...

00007ec0 <capSelectCLIDict_DescEntry>:
    7ec0:	7254 6769 6567 7372 7420 6568 7320 6570     Triggers the spe
    7ed0:	6963 6966 6465 6320 7061 6261 6c69 7469     cified capabilit
    7ee0:	6569 2e73 4620 7269 7473 7420 6f77 6120     ies. First two a
    7ef0:	6772 2073 7261 2065 7473 7461 2065 6e61     rgs are state an
    7f00:	2064 7473 7461 5465 7079 2e65 0a0d 0909     d stateType.....
    7f10:	5b1b 3533 4b6d 3131 5b1b 6d30 4b20 7965     .[35mK11.[0m Key
    7f20:	6f62 7261 2064 6143 6170 6962 696c 7974     board Capability
    7f30:	3020 3078 0042                               0x0B.

00007f36 <tm98_guide>:
    7f36:	0001 0601 0100                                   .....

00007f3b <rm88_guide>:
    7f3b:	0001 0f04 0000 0100                              .......

00007f42 <tm102_guide>:
    7f42:	0001 3b01 0100                                   ...;.

00007f47 <rm69_guide>:
    7f47:	0d01 003d                                   ..=.

00007f4b <rm67_guide>:
    7f4b:	0d01 0033                                   ..3.

00007f4f <rm40_guide>:
    7f4f:	0d01 00e1 0100                                   .....

00007f54 <default_tl_0x3B>:
    7f54:	0001 0000 003f 0000                         ....?...

00007f5c <tm16_guide>:
    7f5c:	0001 3201 0000 0000                         ...2....

00007f64 <default_tl_0x3C>:
    7f64:	0001 0000 0043 0000                         ....C...

00007f6c <default_tl_0x30>:
    7f6c:	0001 0000 0022 0000                         ...."...

00007f74 <default_tl_0x31>:
    7f74:	0001 0000 0026 0000                         ....&...

00007f7c <default_tl_0x32>:
    7f7c:	0001 0000 0010 0000                         ........

00007f84 <default_tl_0x33>:
    7f84:	0001 0000 0016 0000                         ........

00007f8c <default_tl_0x34>:
    7f8c:	0001 0000 001a 0000                         ........

00007f94 <default_tl_0x35>:
    7f94:	0001 0000 0005 0000                         ........

00007f9c <default_tl_0x36>:
    7f9c:	0001 0000 000a 0000                         ........

00007fa4 <default_tl_0x37>:
    7fa4:	0001 0000 003c 0000                         ....<...

00007fac <tm104_guide>:
    7fac:	0001 2801 0000 0000                         ...(....

00007fb4 <default_tl_0x39>:
    7fb4:	0001 0000 0007 0000                         ........

00007fbc <rm79_guide>:
    7fbc:	0d01 0040                                   ..@.

00007fc0 <rm42_guide>:
    7fc0:	0d01 002c                                   ..,.

00007fc4 <rm93_guide>:
    7fc4:	0601 00e2 0100                                   .....

00007fc9 <tm18_guide>:
    7fc9:	0001 0d01 0100                                   .....

00007fce <tm71_guide>:
    7fce:	0001 0401 0100                                   .....

00007fd3 <tm93_guide>:
    7fd3:	0001 0801 0100                                   .....

00007fd8 <default_tl_0x3A>:
    7fd8:	0001 0000 0039 0000                         ....9...

00007fe0 <layer1_tl_0x31>:
    7fe0:	0000 0000                                   ....

00007fe4 <layer1_tl_0x32>:
    7fe4:	0000 0000                                   ....

00007fe8 <layer1_tl_0x33>:
    7fe8:	0000 0000                                   ....

00007fec <capListCLIDict_DescEntry>:
    7fec:	7250 6e69 7374 6120 206e 6e69 6564 6578     Prints an indexe
    7ffc:	2064 696c 7473 6f20 2066 6c61 206c 6f6e     d list of all no
    800c:	206e 5355 2042 656b 6379 646f 2065 6163     n USB keycode ca
    801c:	6170 6962 696c 6974 7365 002e               pabilities..

00008028 <layer1_tl_0x35>:
    8028:	0001 0000 004a 0000                         ....J...

00008030 <tm106_guide>:
    8030:	0001 3c01 0000 0000                         ...<....

00008038 <layer1_tl_0x37>:
    8038:	0000 0000                                   ....

0000803c <layer1_tl_0x38>:
    803c:	0000 0000                                   ....

00008040 <rm47_guide>:
    8040:	0d01 0030                                   ..0.

00008044 <rm39_guide>:
    8044:	0d01 002e                                   ....

00008048 <tm44_guide>:
    8048:	0001 1b01 0100                                   .....

0000804d <tm95_guide>:
    804d:	0001 0501 0000 0000                              .......

00008054 <layer1_tl_0x21>:
    8054:	0000 0000                                   ....

00008058 <layer1_tl_0x3C>:
    8058:	0001 0000 006a 0000                         ....j...

00008060 <layer1_tl_0x3D>:
    8060:	0001 0000 005c 0000                         ....\...

00008068 <layer1_tl_0x3E>:
    8068:	0000 0000                                   ....

0000806c <layer1_tl_0x3F>:
    806c:	0000 0000                                   ....

00008070 <LayerIndex>:
    8070:	8a0c 1fff 73c2 0000 4600 0000 8b28 1fff     .....s...F..(...
    8080:	741f 0000 4600 0000                         .t...F..

00008088 <layer1_tl_0x44>:
    8088:	0001 0000 0056 0000                         ....V...

00008090 <rm70_guide>:
    8090:	0d02 0de2 003d                              ....=.

00008096 <tm46_guide>:
    8096:	0001 0801 0100                                   .....

0000809b <rm13_guide>:
    809b:	0d01 0009                                   ....

0000809f <tm70_guide>:
    809f:	0001 1201 4400                                   .....

000080a4 <macroStepCLIDict_DescEntry>:
    80a4:	6f44 4e20 6d20 6361 6f72 7020 6f72 6563     Do N macro proce
    80b4:	7373 6e69 2067 7473 7065 2e73 4420 6665     ssing steps. Def
    80c4:	7561 746c 2073 6f74 3120 002e               aults to 1..

000080d0 <tm30_guide>:
    80d0:	0001 0a01 0100                                   .....

000080d5 <rm52_guide>:
    80d5:	0d01 0065                                   ..e.

000080d9 <rm68_guide>:
    80d9:	0d01 001a                                   ....

000080dd <rm1_guide>:
    80dd:	0d01 000d                                   ....

000080e1 <rm27_guide>:
    80e1:	0401 0001 0100                                   .....

000080e6 <rm48_guide>:
    80e6:	0d01 0022                                   ..".

000080ea <rm11_guide>:
    80ea:	0d01 00e0                                   ....

000080ee <tm3_guide>:
    80ee:	0001 3801 5300                                   ...8.

000080f3 <keyReleaseCLIDict_DescEntry>:
    80f3:	6553 646e 6b20 7965 722d 6c65 6165 6573     Send key-release
    8103:	6520 6576 746e 7420 206f 616d 7263 206f      event to macro 
    8113:	6f6d 7564 656c 202e 7544 6c70 6369 7461     module. Duplicat
    8123:	7365 6820 7661 2065 6e75 6564 6966 656e     es have undefine
    8133:	2064 6562 6168 6976 756f 2e72 0a0d 0909     d behaviour.....
    8143:	5b1b 3533 536d 3031 5b1b 6d30 5320 6163     .[35mS10.[0m Sca
    8153:	636e 646f 2065 7830 4130 0100                    ncode 0x0A.

0000815e <tm48_guide>:
    815e:	0001 2a01 0100                                   ...*.

00008163 <tm11_guide>:
    8163:	0001 1f01 0100                                   .....

00008168 <tm72_guide>:
    8168:	0001 2601 0100                                   ...&.

0000816d <rm71_guide>:
    816d:	0d01 004d 0000 0100                              ..M....

00008174 <default_tl_0x40>:
    8174:	0001 0000 002b 0000                         ....+...

0000817c <default_tl_0x41>:
    817c:	0001 0000 002f 0000                         ..../...

00008184 <default_tl_0x42>:
    8184:	0001 0000 0019 0000                         ........

0000818c <TriggerMacroList>:
    818c:	88b3 0000 0000 0000 79d5 0000 0001 0000     .........y......
    819c:	7a35 0000 0002 0000 80ee 0000 0003 0000     5z..............
    81ac:	7db1 0000 0004 0000 7a78 0000 0005 0000     .}......xz......
    81bc:	87ac 0000 0006 0000 7aa1 0000 0007 0000     .........z......
    81cc:	87db 0000 0008 0000 7db6 0000 0009 0000     .........}......
    81dc:	79d0 0000 000a 0000 8163 0000 000b 0000     .y......c.......
    81ec:	79e4 0000 000c 0000 850c 0000 000d 0000     .y..............
    81fc:	7a3a 0000 000e 0000 77ed 0000 000f 0000     :z.......w......
    820c:	7f5c 0000 0010 0000 77fe 0000 0011 0000     \........w......
    821c:	7fc9 0000 0012 0000 78ba 0000 0013 0000     .........x......
    822c:	8883 0000 0014 0000 7b9d 0000 0015 0000     .........{......
    823c:	88a9 0000 0016 0000 7961 0000 0007 0000     ........ay......
    824c:	851e 0000 0017 0000 8608 0000 0018 0000     ................
    825c:	7a86 0000 0019 0000 87c4 0000 001a 0000     .z..............
    826c:	7aab 0000 001b 0000 87e8 0000 001c 0000     .z..............
    827c:	80d0 0000 001d 0000 71d9 0000 001e 0000     .........q......
    828c:	71f0 0000 001f 0000 7cd7 0000 0020 0000     .q.......|.. ...
    829c:	70d0 0000 0021 0000 7169 0000 0022 0000     .p..!...iq.."...
    82ac:	716e 0000 0023 0000 78b5 0000 0024 0000     nq..#....x..$...
    82bc:	71a4 0000 0025 0000 7a81 0000 0026 0000     .q..%....z..&...
    82cc:	7e9c 0000 0027 0000 7808 0000 0028 0000     .~..'....x..(...
    82dc:	7d40 0000 0029 0000 78c8 0000 002a 0000     @}..)....x..*...
    82ec:	8048 0000 002b 0000 7940 0000 000b 0000     H...+...@y......
    82fc:	8096 0000 002c 0000 7978 0000 002d 0000     ....,...xy..-...
    830c:	815e 0000 002e 0000 7dac 0000 002f 0000     ^........}../...
    831c:	7a90 0000 0030 0000 7d5c 0000 0031 0000     .z..0...\}..1...
    832c:	78b0 0000 0032 0000 87f1 0000 0033 0000     .x..2.......3...
    833c:	7b1c 0000 0034 0000 885a 0000 0035 0000     .{..4...Z...5...
    834c:	71bc 0000 0036 0000 71b3 0000 0037 0000     .q..6....q..7...
    835c:	7b98 0000 0038 0000 88a4 0000 0039 0000     .{..8.......9...
    836c:	87ce 0000 003a 0000 7a44 0000 003b 0000     ....:...Dz..;...
    837c:	71ae 0000 003c 0000 7e84 0000 003d 0000     .q..<....~..=...
    838c:	71d4 0000 003e 0000 7eb0 0000 003f 0000     .q..>....~..?...
    839c:	7ce5 0000 0040 0000 8822 0000 0041 0000     .|..@..."...A...
    83ac:	71c1 0000 0042 0000 7803 0000 0043 0000     .q..B....x..C...
    83bc:	809f 0000 0044 0000 7fce 0000 0045 0000     ....D.......E...
    83cc:	8168 0000 0023 0000 79e9 0000 0046 0000     h...#....y..F...
    83dc:	8511 0000 0047 0000 7a3f 0000 0002 0000     ....G...?z......
    83ec:	860d 0000 0048 0000 7a8b 0000 0049 0000     ....H....z..I...
    83fc:	87c9 0000 004a 0000 79df 0000 004b 0000     ....J....y..K...
    840c:	7b68 0000 004c 0000 8888 0000 004d 0000     h{..L.......M...
    841c:	7ba2 0000 001f 0000 88ae 0000 004e 0000     .{..........N...
    842c:	7cdc 0000 004f 0000 7930 0000 0050 0000     .|..O...0y..P...
    843c:	7200 0000 0051 0000 7aa6 0000 0052 0000     .r..Q....z..R...
    844c:	8874 0000 0053 0000 7ab0 0000 0054 0000     t...S....z..T...
    845c:	722c 0000 0024 0000 77e3 0000 0055 0000     ,r..$....w..U...
    846c:	780d 0000 0056 0000 7fd3 0000 0057 0000     .x..V.......W...
    847c:	78cd 0000 0058 0000 804d 0000 0059 0000     .x..X...M...Y...
    848c:	715c 0000 000e 0000 7173 0000 005a 0000     \q......sq..Z...
    849c:	7f36 0000 005b 0000 71a9 0000 003d 0000     6...[....q..=...
    84ac:	7a30 0000 0041 0000 7205 0000 005c 0000     0z..A....r..\...
    84bc:	7f42 0000 005d 0000 77e8 0000 005e 0000     B...]....w..^...
    84cc:	7fac 0000 0013 0000 788c 0000 005f 0000     .........x.._...
    84dc:	8030 0000 0060 0000 791d 0000 0061 0000     0...`....y..a...
    84ec:	887e 0000 0062 0000                         ~...b...

000084f4 <default_tl_0x44>:
    84f4:	0001 0000 0024 0000                         ....$...

000084fc <default_tl_0x45>:
    84fc:	0001 0000 000e 0000                         ........

00008504 <default_tl_0x46>:
    8504:	0001 0000 0013 0000                         ........

0000850c <tm13_guide>:
    850c:	0001 2301 0100                                   ...#.

00008511 <tm74_guide>:
    8511:	0001 3501 0100                                   ...5.

00008516 <rm6_guide>:
    8516:	0d01 0035                                   ..5.

0000851a <rm28_guide>:
    851a:	0d01 0016                                   ....

0000851e <tm24_guide>:
    851e:	0001 2001 0000                              ... ..

00008524 <layer1_tl_0x40>:
    8524:	0000 0000                                   ....

00008528 <keyHoldCLIDict_DescEntry>:
    8528:	6553 646e 6b20 7965 682d 6c6f 2064 7665     Send key-hold ev
    8538:	6e65 7374 7420 206f 6874 2065 616d 7263     ents to the macr
    8548:	206f 6f6d 7564 656c 202e 7544 6c70 6369     o module. Duplic
    8558:	7461 7365 6820 7661 2065 6e75 6564 6966     ates have undefi
    8568:	656e 2064 6562 6168 6976 756f 2e72 0a0d     ned behaviour...
    8578:	0909 5b1b 3533 536d 3031 5b1b 6d30 5320     ...[35mS10.[0m S
    8588:	6163 636e 646f 2065 7830 4130 0000 0000     cancode 0x0A....

00008598 <default_tl_0x1C>:
    8598:	0001 0000 0031 0000                         ....1...

000085a0 <layer1_tl_0x43>:
    85a0:	0000 0000                                   ....

000085a4 <macroDebugCLIDict_DescEntry>:
    85a4:	6944 6173 6c62 7365 452f 616e 6c62 7365     Disables/Enables
    85b4:	7320 6e65 6964 676e 5520 4253 6b20 7965      sending USB key
    85c4:	6f63 6564 2073 6f74 7420 6568 4f20 7475     codes to the Out
    85d4:	7570 2074 6f4d 7564 656c 6120 646e 7020     put Module and p
    85e4:	6972 746e 2073 2f55 204b 6f63 6564 2e73     rints U/K codes.
    85f4:	0000 0000                                   ....

000085f8 <layer1_tl_0x45>:
    85f8:	0001 0000 004d 0000                         ....M...

00008600 <layer1_tl_0x46>:
    8600:	0001 0000 0050 0000                         ....P...

00008608 <tm25_guide>:
    8608:	0001 4201 0100                                   ...B.

0000860d <tm76_guide>:
    860d:	0001 0101 0100                                   .....

00008612 <rm17_guide>:
    8612:	0d01 000a                                   ....

00008616 <rm76_guide>:
    8616:	0601 00b5 0000                              ......

0000861c <ResultMacroList>:
    861c:	7888 0000 80dd 0000 87a8 0000 70cc 0000     .x...........p..
    862c:	7c36 0000 7198 0000 8516 0000 7922 0000     6|...q......"y..
    863c:	7158 0000 7a9d 0000 796c 0000 80ea 0000     Xq...z..ly......
    864c:	7b21 0000 809b 0000 7e94 0000 720a 0000     !{.......~...r..
    865c:	7b29 0000 8612 0000 7884 0000 70bc 0000     ){.......x...p..
    866c:	70ac 0000 888d 0000 7a95 0000 8868 0000     .p.......z..h...
    867c:	7ce1 0000 71b8 0000 886c 0000 80e1 0000     .|...q..l.......
    868c:	851a 0000 87e4 0000 8864 0000 87d7 0000     ........d.......
    869c:	8895 0000 7950 0000 70c4 0000 71de 0000     ....Py...p...q..
    86ac:	7161 0000 7ac5 0000 7150 0000 8044 0000     aq...z..Pq..D...
    86bc:	7f4f 0000 77f6 0000 7fc0 0000 7ba7 0000     O....w.......{..
    86cc:	7974 0000 882b 0000 7218 0000 8040 0000     ty..+....r..@...
    86dc:	80e6 0000 7880 0000 7c32 0000 71e2 0000     .....x..2|...q..
    86ec:	80d5 0000 87e0 0000 7154 0000 8852 0000     ........Tq..R...
    86fc:	7a99 0000 8870 0000 7cea 0000 8891 0000     .z..p....|......
    870c:	7231 0000 87ed 0000 71a0 0000 882f 0000     1r.......q../...
    871c:	71c6 0000 7e98 0000 7e80 0000 7f4b 0000     .q...~...~..K...
    872c:	80d9 0000 7f47 0000 8090 0000 816d 0000     ....G.......m...
    873c:	719c 0000 79da 0000 795c 0000 8827 0000     .q...y..\y..'...
    874c:	8616 0000 7b25 0000 77f2 0000 7fbc 0000     ....%{...w......
    875c:	7eac 0000 8879 0000 7ac0 0000 8899 0000     .~..y....z......
    876c:	8856 0000 7cd0 0000 7c3a 0000 7a7d 0000     V....|..:|..}z..
    877c:	7f3b 0000 718c 0000 7da8 0000 7919 0000     ;....q...}...y..
    878c:	77fa 0000 7fc4 0000 7cc2 0000 70c8 0000     .w.......|...p..
    879c:	885f 0000 7165 0000 87d3 0000               _...eq......

000087a8 <rm2_guide>:
    87a8:	0d01 0029                                   ..).

000087ac <tm6_guide>:
    87ac:	0001 0001 0000 0000                         ........

000087b4 <default_tl_0x43>:
    87b4:	0001 0000 001f 0000                         ........

000087bc <default_tl_0x0B>:
    87bc:	0001 0000 0023 0000                         ....#...

000087c4 <tm27_guide>:
    87c4:	0001 1d01 0100                                   .....

000087c9 <tm78_guide>:
    87c9:	0001 2401 0100                                   ...$.

000087ce <tm60_guide>:
    87ce:	0001 3701 0100                                   ...7.

000087d3 <rm98_guide>:
    87d3:	0d01 0049                                   ..I.

000087d7 <rm31_guide>:
    87d7:	0d01 004c                                   ..L.

000087db <tm8_guide>:
    87db:	0001 2201 0100                                   ...".

000087e0 <rm53_guide>:
    87e0:	0d01 0023                                   ..#.

000087e4 <rm29_guide>:
    87e4:	0d01 0027                                   ..'.

000087e8 <tm29_guide>:
    87e8:	0001 2101 0100                                   ...!.

000087ed <rm61_guide>:
    87ed:	0d01 0052                                   ..R.

000087f1 <tm53_guide>:
    87f1:	0001 0901 4c00                                   .....

000087f6 <macroListCLIDict_DescEntry>:
    87f6:	694c 7473 7420 6568 6420 6665 6e69 6465     List the defined
    8806:	7420 6972 6767 7265 6120 646e 7220 7365      trigger and res
    8816:	6c75 2074 616d 7263 736f 002e               ult macros..

00008822 <tm67_guide>:
    8822:	0001 3c01 0100                                   ...<.

00008827 <rm75_guide>:
    8827:	0d01 0068                                   ..h.

0000882b <rm45_guide>:
    882b:	0d01 00e6                                   ....

0000882f <rm63_guide>:
    882f:	0d01 000f                                   ....

00008833 <macroProcCLIDict_DescEntry>:
    8833:	6150 7375 2f65 6552 7573 656d 6d20 6361     Pause/Resume mac
    8843:	6f72 7020 6f72 6563 7373 6e69 2e67 0100          ro processing..

00008852 <rm55_guide>:
    8852:	0d01 00e5                                   ....

00008856 <rm84_guide>:
    8856:	0d01 0045                                   ..E.

0000885a <tm55_guide>:
    885a:	0001 0601 0100                                   .....

0000885f <rm96_guide>:
    885f:	0601 00ea 0100                                   .....

00008864 <rm30_guide>:
    8864:	0d01 0076                                   ..v.

00008868 <rm23_guide>:
    8868:	0d01 0004                                   ....

0000886c <rm26_guide>:
    886c:	0d01 002a                                   ..*.

00008870 <rm57_guide>:
    8870:	0d01 0017                                   ....

00008874 <tm88_guide>:
    8874:	0001 1a01 0100                                   .....

00008879 <rm81_guide>:
    8879:	0601 00b6 0100                                   .....

0000887e <tm108_guide>:
    887e:	0001 2901 0100                                   ...).

00008883 <tm20_guide>:
    8883:	0001 2f01 0100                                   .../.

00008888 <tm81_guide>:
    8888:	0001 0e01 0100                                   .....

0000888d <rm21_guide>:
    888d:	0d01 0014                                   ....

00008891 <rm59_guide>:
    8891:	0d01 0012                                   ....

00008895 <rm32_guide>:
    8895:	0d01 0024                                   ..$.

00008899 <rm83_guide>:
    8899:	0d01 0046 0000 0000                              ..F....

000088a0 <layer1_tl_0x30>:
    88a0:	0000 0000                                   ....

000088a4 <tm59_guide>:
    88a4:	0001 1501 0100                                   .....

000088a9 <tm22_guide>:
    88a9:	0001 3301 0100                                   ...3.

000088ae <tm83_guide>:
    88ae:	0001 0a01 0100                                   .....

000088b3 <tm0_guide>:
    88b3:	0001 0401 1b00 315b 353b 333b 6d31 5245     ......[1;5;31mER
    88c3:	4f52 1b52 305b 206d 202d 454c 2044 7453     ROR.[0m - LED St
    88d3:	7461 2065 7954 6570 2d20 4e20 746f 6920     ate Type - Not i
    88e3:	706d 656c 656d 746e 6465 2e2e 0d2e 000a     mplemented......
    88f3:	5b1b 3b31 3b35 3133 456d 5252 524f 5b1b     .[1;5;31mERROR.[
    8903:	6d30 2d20 4120 616e 6f6c 2067 7453 7461     0m - Analog Stat
    8913:	2065 7954 6570 2d20 4e20 746f 6920 706d     e Type - Not imp
    8923:	656c 656d 746e 6465 2e2e 0d2e 000a 5b1b     lemented.......[
    8933:	3b31 3b35 3133 456d 5252 524f 5b1b 6d30     1;5;31mERROR.[0m
    8943:	2d20 4920 766e 6c61 6469 5320 6174 6574      - Invalid State
    8953:	5420 7079 2e65 5420 6968 2073 7369 6120      Type. This is a
    8963:	6220 6775 0d2e 000a                          bug....

0000896b <kbdProtocolCLIDict_DescEntry>:
    896b:	654b 6279 616f 6472 5020 6f72 6f74 6f63     Keyboard Protoco
    897b:	206c 6f4d 6564 203a 2030 202d 6f42 746f     l Mode: 0 - Boot
    898b:	202c 2031 202d 534f 4e2f 524b 204f 6f4d     , 1 - OS/NKRO Mo
    899b:	6564 5000                                        de.

0000899e <setKeysCLIDict_DescEntry>:
    899e:	7250 7065 7261 2065 2061 7073 6361 2065     Prepare a space 
    89ae:	6573 6170 6172 6574 2064 696c 7473 6f20     separated list o
    89be:	2066 5355 2042 6f63 6564 2073 6428 6365     f USB codes (dec
    89ce:	6d69 6c61 2e29 5720 6961 7374 7520 746e     imal). Waits unt
    89de:	6c69 1b20 335b 6d35 6573 646e 654b 7379     il .[35msendKeys
    89ee:	5b1b 6d30 002e                              .[0m..

000089f4 <outputCLIDictName>:
    89f4:	5355 2042 6f4d 7564 656c 4320 6d6f 616d     USB Module Comma
    8a04:	646e 0073                                   nds.

00008a08 <CSWTCH.90>:
    8a08:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a18:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a28:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a38:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a48:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a58:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8a68:	0100 0302 0504 0706 0100 0302 0504 0706     ................

00008a78 <CSWTCH.87>:
    8a78:	0000 0000 0000 0100 0101 0101 0101 0201     ................
    8a88:	0202 0202 0202 0302 0303 0303 0303 0403     ................
    8a98:	0404 0404 0404 0504 0505 0505 0505 5405          ...............

00008aa7 <outputDebugCLIDict_DescEntry>:
    8aa7:	6f54 6767 656c 4f20 7475 7570 2074 6544     Toggle Output De
    8ab7:	7562 2067 6f6d 6564 002e 0000 2e00               bug mode.....

00008ac4 <outputCLIDict>:
    8ac4:	8e2e 0000 896b 0000 46e5 0000 8e3a 0000     ....k....F..:...
    8ad4:	8aa7 0000 4625 0000 8e46 0000 8f2d 0000     ....%F..F...-...
    8ae4:	4669 0000 8e4f 0000 8ffc 0000 45cd 0000     iF..O........E..
    8af4:	8e58 0000 899e 0000 45f1 0000 8e60 0000     X........E..`...
    8b04:	8b24 0000 4649 0000 8e67 0000 8e73 0000     $...IF..g...s...
    8b14:	4691 0000 0000 0000 0000 0000 0000 0000     .F..............

00008b24 <setModCLIDict_DescEntry>:
    8b24:	6553 2074 6874 2065 6f6d 6664 6569 2072     Set the modfier 
    8b34:	7962 6574 0d3a 090a 3109 4c20 7443 6c72     byte:....1 LCtrl
    8b44:	202c 2032 534c 6668 2c74 3420 4c20 6c41     , 2 LShft, 4 LAl
    8b54:	2c74 3820 4c20 5547 2c49 3120 2036 4352     t, 8 LGUI, 16 RC
    8b64:	7274 2c6c 3320 2032 5352 6668 2c74 3620     trl, 32 RShft, 6
    8b74:	2034 4152 746c 202c 3231 2038 4752 4955     4 RAlt, 128 RGUI
    8b84:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    8b94:	2d20 4c20 4445 5320 6174 6574 203a 1b00      - LED State: ..
    8ba4:	315b 333b 6d32 4e49 4f46 5b1b 6d30 2d20     [1;32mINFO.[0m -
    8bb4:	5520 4253 4920 696e 2074 6954 656d 203a      USB Init Time: 
    8bc4:	2000 736d 2d20 0020 7420 6369 736b 1b00     . ms - . ticks..
    8bd4:	315b 333b 6d32 4e49 4f46 5b1b 6d30 2d20     [1;32mINFO.[0m -
    8be4:	5320 7465 6974 676e 4b20 7965 6f62 7261      Setting Keyboar
    8bf4:	2064 7250 746f 636f 6c6f 7420 3a6f 0020     d Protocol to: .
    8c04:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    8c14:	202d 654b 6279 616f 6472 5020 6f72 6f74     - Keyboard Proto
    8c24:	6f63 3a6c 0020 754f 7074 7475 635f 6e6f     col: .Output_con
    8c34:	4373 7274 536c 6e65 2864 6f63 736e 6f43     sCtrlSend(consCo
    8c44:	6564 0029 754f 7074 7475 6e5f 6e6f 5365     de).Output_noneS
    8c54:	6e65 2864 0029 754f 7074 7475 735f 7379     end().Output_sys
    8c64:	7443 6c72 6553 646e 7328 7379 6f43 6564     CtrlSend(sysCode
    8c74:	0029 754f 7074 7475 665f 616c 6873 6f4d     ).Output_flashMo
    8c84:	6564 2928 4f00 7475 7570 5f74 7375 4d62     de().Output_usbM
    8c94:	756f 6573 6d28 756f 6573 7542 7474 6e6f     ouse(mouseButton
    8ca4:	722c 6c65 2c58 6572 596c 0029 754f 7074     ,relX,relY).Outp
    8cb4:	7475 6b5f 6462 7250 746f 636f 6c6f 6f42     ut_kbdProtocolBo
    8cc4:	746f 2928 4f00 7475 7570 5f74 626b 5064     ot().Output_kbdP
    8cd4:	6f72 6f74 6f63 4e6c 524b 284f 0029 754f     rotocolNKRO().Ou
    8ce4:	7074 7475 745f 676f 6c67 4b65 6462 7250     tput_toggleKbdPr
    8cf4:	746f 636f 6c6f 2928 4f00 7475 7570 5f74     otocol().Output_
    8d04:	7375 4362 646f 5365 6e65 2864 7375 4362     usbCodeSend(usbC
    8d14:	646f 2965 1b00 315b 333b 6d33 4157 4e52     ode)..[1;33mWARN
    8d24:	4e49 1b47 305b 206d 202d 5355 2042 654b     ING.[0m - USB Ke
    8d34:	2079 696c 696d 2074 6572 6361 6568 0d64     y limit reached.
    8d44:	000a 5b1b 3b31 3333 576d 5241 494e 474e     ...[1;33mWARNING
    8d54:	5b1b 6d30 2d20 5520 4253 4320 646f 2065     .[0m - USB Code 
    8d64:	6f6e 2074 6977 6874 6e69 3420 342d 2039     not within 4-49 
    8d74:	3028 3478 302d 3378 2931 202c 3135 312d     (0x4-0x31), 51-1
    8d84:	3535 2820 7830 3333 302d 3978 2942 202c     55 (0x33-0x9B), 
    8d94:	3531 2d37 3631 2034 3028 3978 2d44 7830     157-164 (0x9D-0x
    8da4:	3441 2c29 3120 3637 322d 3132 2820 7830     A4), 176-221 (0x
    8db4:	3042 302d 4478 2944 6f20 2072 3232 2d34     B0-0xDD) or 224-
    8dc4:	3332 2031 3028 4578 2d30 7830 3745 2029     231 (0xE0-0xE7) 
    8dd4:	4b4e 4f52 4d20 646f 3a65 0020 5b1b 3b31     NKRO Mode: ..[1;
    8de4:	3233 496d 464e 1b4f 305b 206d 202d 7845     32mINFO.[0m - Ex
    8df4:	6574 6e72 6c61 4120 6176 6c69 6261 656c     ternal Available
    8e04:	4320 7275 6572 746e 4320 6168 676e 6465      Current Changed
    8e14:	202e 6f54 6174 206c 7641 6961 616c 6c62     . Total Availabl
    8e24:	3a65 0020 6d20 0d41 000a 626b 5064 6f72     e: . mA...kbdPro
    8e34:	6f74 6f63 006c 756f 7074 7475 6544 7562     tocol.outputDebu
    8e44:	0067 6572 6461 454c 7344 7300 6e65 4b64     g.readLEDs.sendK
    8e54:	7965 0073 6573 4b74 7965 0073 6573 4d74     eys.setKeys.setM
    8e64:	646f 7500 6273 6e49 7469 6954 656d 4400          od.usbInitTime.

00008e73 <usbInitTimeCLIDict_DescEntry>:
    8e73:	6944 7073 616c 7379 7420 6568 7420 6d69     Displays the tim
    8e83:	2065 6e69 6d20 2073 7266 6d6f 7520 6273     e in ms from usb
    8e93:	695f 696e 2874 2029 6974 6c6c 7420 6568     _init() till the
    8ea3:	6c20 7361 2074 6573 7574 2070 6163 6c6c      last setup call
    8eb3:	002e                                        ..

00008eb5 <CSWTCH.91>:
    8eb5:	0100 0302 0504 0706                         ........

00008ebd <CSWTCH.89>:
    8ebd:	0606 0606 0606 0606 0707 0707 0707 0707     ................
    8ecd:	0808 0808 0808 0808 0909 0909 0909 0909     ................
    8edd:	0a0a 0a0a 0a0a 0a0a 0b0b 0b0b 0b0b 0b0b     ................
    8eed:	0c0c 0c0c 0c0c 0c0c 0d0d 0d0d 0d0d 0d0d     ................
    8efd:	0e0e 0e0e 0e0e 0e0e 0f0f 0f0f 0f0f 0f0f     ................
    8f0d:	1010 1010 1010 1010 1111 1111 1111 1111     ................
    8f1d:	1212 1212 1212 1212 1313 1313 1313 1313     ................

00008f2d <readLEDsCLIDict_DescEntry>:
    8f2d:	6552 6461 4c20 4445 6220 7479 3a65 0a0d     Read LED byte:..
    8f3d:	0909 2031 754e 4c6d 6b63 202c 2032 6143     ..1 NumLck, 2 Ca
    8f4d:	7370 634c 2c6b 3420 5320 7263 4c6c 6b63     psLck, 4 ScrlLck
    8f5d:	202c 3631 4b20 6e61 2c61 6520 6374 002e     , 16 Kana, etc..

00008f6d <CSWTCH.88>:
    8f6d:	0201 0403 0605 0007 0201 0403 0605 0007     ................
    8f7d:	0201 0403 0605 0007 0201 0403 0605 0007     ................
    8f8d:	0201 0403 0605 0007 0201 0403 0605 1507          ...............

00008f9c <CSWTCH.92>:
    8f9c:	1515 1515 1515 1515 1616 1616 1616 1616     ................
    8fac:	1717 1717 1717 1717 1818 1818 1818 1818     ................
    8fbc:	1919 1919 1919 1919 1a1a 1a1a 1a1a 1a1a     ................

00008fcc <CSWTCH.93>:
    8fcc:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8fdc:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8fec:	0100 0302 0504 0706 0100 0302 0504 0706     ................

00008ffc <sendKeysCLIDict_DescEntry>:
    8ffc:	6553 646e 7420 6568 7020 6572 6170 6572     Send the prepare
    900c:	2064 696c 7473 6f20 2066 5355 2042 6f63     d list of USB co
    901c:	6564 2073 6e61 2064 6f6d 6964 6966 7265     des and modifier
    902c:	6220 7479 2e65 1500                               byte..

00009033 <usb_endpoint_config_table>:
    9033:	1515 1515 1519 1915 1515 0000 0000               .............

00009040 <usb_descriptor_list>:
    9040:	0100 0000 8e5a 1fff 0012 0000 0200 0000     ....Z...........
    9050:	8d24 1fff 00af 0000 0600 0000 9108 1fff     $...............
    9060:	0001 0000 0a00 0000 9107 1fff 0001 0000     ................
    9070:	0300 0000 8f78 1fff 0000 0000 0301 0409     ....x...........
    9080:	8ea8 1fff 0000 0000 0302 0409 8ede 1fff     ................
    9090:	0000 0000 0303 0409 8f7c 1fff 0000 0000     ........|.......
    90a0:	2200 0000 8f38 1fff 003f 0000 2100 0000     ."..8...?....!..
    90b0:	8d36 1fff 0009 0000 2200 0001 8c45 1fff     6........"..E...
    90c0:	007d 0000 2100 0001 8d4f 1fff 0009 0000     }....!..O.......
    90d0:	2200 0002 8e06 1fff 0035 0000 2100 0002     ."......5....!..
    90e0:	8d68 1fff 0009 0000 0304 0409 8e3c 1fff     h...........<...
    90f0:	0000 0000 0305 0409 8ec0 1fff 0000 0000     ................
    9100:	0306 0409 8d08 1fff 0000 0000 0307 0409     ................
    9110:	8e6c 1fff 0000 0000 0308 0409 8cc2 1fff     l...............
    9120:	0000 0000 2200 0006 8dd3 1fff 0033 0000     ....."......3...
    9130:	2100 0006 8dc3 1fff 0009 0000 030a 0409     .!..............
    9140:	8cfa 1fff 0000 0000 0000 0000 0000 0000     ................
    9150:	0000 0000 5b1b 3b31 3333 576d 5241 494e     .....[1;33mWARNI
    9160:	474e 5b1b 6d30 2d20 5520 4253 4c20 776f     NG.[0m - USB Low
    9170:	5020 776f 7265 4e20 6765 746f 7461 6f69      Power Negotatio
    9180:	206e 6944 6173 6c62 6465 202c 6f63 646e     n Disabled, cond
    9190:	7469 6f69 206e 6564 6574 7463 6465 002e     ition detected..
    91a0:	5b1b 3b31 3333 576d 5241 494e 474e 5b1b     .[1;33mWARNING.[
    91b0:	6d30 2d20 5320 5445 465f 4145 5554 4552     0m - SET_FEATURE
    91c0:	2d20 4420 7665 6369 2065 5677 6c61 6575      - Device wValue
    91d0:	0028 5b1b 3b31 3333 576d 5241 494e 474e     (..[1;33mWARNING
    91e0:	5b1b 6d30 2d20 4320 454c 5241 465f 4145     .[0m - CLEAR_FEA
    91f0:	5554 4552 2d20 4920 746e 7265 6166 6563     TURE - Interface
    9200:	7720 6156 756c 2865 2900 7720 6e49 6564      wValue(.) wInde
    9210:	2878 1b00 315b 333b 6d33 4157 4e52 4e49     x(..[1;33mWARNIN
    9220:	1b47 305b 206d 202d 4553 5f54 4546 5441     G.[0m - SET_FEAT
    9230:	5255 2045 202d 6e49 6574 6672 6361 2065     URE - Interface 
    9240:	5677 6c61 6575 0028 5b1b 3b31 3333 576d     wValue(..[1;33mW
    9250:	5241 494e 474e 5b1b 6d30 2d20 5520 6b6e     ARNING.[0m - Unk
    9260:	6f6e 6e77 6920 746e 7265 6166 6563 2d20     nown interface -
    9270:	0020 5b1b 3b31 3b35 3133 456d 5252 524f      ..[1;5;31mERROR
    9280:	5b1b 6d30 2d20 5520 4253 6e20 746f 6320     .[0m - USB not c
    9290:	6e6f 6966 7567 6572 2e64 2e2e 0a0d 1b00     onfigured.......
    92a0:	315b 333b 6d33 4157 4e52 4e49 1b47 305b     [1;33mWARNING.[0
    92b0:	206d 202d 5355 2042 7254 6e61 6d73 7469     m - USB Transmit
    92c0:	5420 6d69 6f65 7475 2e2e 612e 7475 2d6f      Timeout...auto-
    92d0:	6572 7473 7261 2074 6964 6173 6c62 6465     restart disabled
    92e0:	0a0d 5300 7379 7443 6c72 005b 205d 0a0d     ...SysCtrl[.] ..
    92f0:	4300 6e6f 4373 7274 5b6c 1b00 315b 333b     .ConsCtrl[..[1;3
    9300:	6d35 4544 5542 1b47 305b 206d 202d 6f42     5mDEBUG.[0m - Bo
    9310:	746f 5520 4253 203a 1b00 315b 333b 6d35     ot USB: ..[1;35m
    9320:	4544 5542 1b47 305b 206d 202d 4b4e 4f52     DEBUG.[0m - NKRO
    9330:	5520 4253 203a 1b00 315b 333b 6d33 4157      USB: ..[1;33mWA
    9340:	4e52 4e49 1b47 305b 206d 202d 5355 2042     RNING.[0m - USB 
    9350:	7254 6e61 6d73 7469 5420 6d69 6f65 7475     Transmit Timeout
    9360:	2e2e 0d2e 000a 0000 0000                    ..........

0000936a <helpCLIDict_DescEntry>:
    936a:	6f59 2775 6572 6c20 6f6f 696b 676e 6120     You're looking a
    937a:	2074 7469 3a20 0050                         t it :P.

00009382 <restartCLIDict_DescEntry>:
    9382:	6553 646e 2073 2061 6f73 7466 6177 6572     Sends a software
    9392:	7220 7365 6174 7472 202c 6873 756f 646c      restart, should
    93a2:	6220 2065 6973 696d 616c 2072 6f74 7020      be similar to p
    93b2:	776f 7265 6e69 2067 6e6f 7420 6568 6420     owering on the d
    93c2:	7665 6369 2e65 4300                              evice..

000093c9 <clearCLIDict_DescEntry>:
    93c9:	6c43 6165 2072 6874 2065 6373 6572 6e65     Clear the screen
    93d9:	002e                                        ..

000093db <reloadCLIDict_DescEntry>:
    93db:	6953 6e67 6c61 2073 696d 7263 636f 6e6f     Signals microcon
    93eb:	7274 6c6f 656c 2072 6f74 7220 6665 616c     troller to refla
    93fb:	6873 722f 6c65 616f 2e64 5600                    sh/reload..

00009406 <versionCLIDict_DescEntry>:
    9406:	6556 7372 6f69 206e 6e69 6f66 6d72 7461     Version informat
    9416:	6f69 206e 6261 756f 2074 6874 7369 6620     ion about this f
    9426:	7269 776d 7261 2e65 1b00 325b 1b4a 485b     irmware...[2J.[H
    9436:	000d 631b 0d00 1b0a 315b 333b 6d32 1b00     ...c....[1;32m..
    9446:	305b 0d6d 000a 1b20 335b 6d35 2000 5b1b     [0m... .[35m. .[
    9456:	6d31 6552 6976 6973 6e6f 1b3a 305b 206d     1mRevision:.[0m 
    9466:	2020 2020 3220 3032 3336 3132 3438 3233          22063218432
    9476:	6639 3630 3461 3966 3866 3665 3561 3133     9f06a4f9f8e6a531
    9486:	6437 3332 3765 3033 6235 3764 0d65 000a     7d23e7305bd7e...
    9496:	1b20 315b 426d 6172 636e 3a68 5b1b 6d30      .[1mBranch:.[0m
    94a6:	2020 2020 2020 2020 616d 7473 7265 0a0d             master..
    94b6:	2000 5b1b 6d31 7254 6565 5320 6174 7574     . .[1mTree Statu
    94c6:	3a73 5b1b 6d30 2020 4420 7269 7974 0a0d     s:.[0m   Dirty..
    94d6:	4b09 7965 6f62 7261 7364 772f 6968 6574     .Keyboards/white
    94e6:	6f66 2e78 6162 6873 0a0d 2000 5b1b 6d31     fox.bash... .[1m
    94f6:	6552 6f70 4f20 6972 6967 3a6e 5b1b 6d30     Repo Origin:.[0m
    9506:	2020 6820 7474 7370 2f3a 672f 7469 7568        https://githu
    9516:	2e62 6f63 2f6d 696b 6269 686f 2f64 6f63     b.com/kiibohd/co
    9526:	746e 6f72 6c6c 7265 0a0d 2000 5b1b 6d31     ntroller... .[1m
    9536:	6f43 6d6d 7469 4420 7461 3a65 5b1b 6d30     Commit Date:.[0m
    9546:	2020 3220 3130 2d37 3230 322d 2030 3631        2017-02-20 16
    9556:	333a 3a38 3531 2d20 3830 3030 0a0d 2000     :38:15 -0800... 
    9566:	5b1b 6d31 6f43 6d6d 7469 4120 7475 6f68     .[1mCommit Autho
    9576:	3a72 5b1b 6d30 4a20 6361 626f 4120 656c     r:.[0m Jacob Ale
    9586:	6178 646e 7265 3c20 6168 7461 4061 696b     xander <haata@ki
    9596:	6269 686f 2e64 6f63 3e6d 0a0d 2000 5b1b     ibohd.com>... .[
    95a6:	6d31 7542 6c69 2064 6144 6574 1b3a 305b     1mBuild Date:.[0
    95b6:	206d 2020 3220 3130 2d37 3730 312d 2034     m    2017-07-14 
    95c6:	3230 333a 3a38 3032 2d20 3430 3030 0a0d     02:38:20 -0400..
    95d6:	2000 5b1b 6d31 7542 6c69 2064 534f 1b3a     . .[1mBuild OS:.
    95e6:	305b 206d 2020 2020 4c20 6e69 7875 342d     [0m      Linux-4
    95f6:	342e 302e 342d 2d33 694d 7263 736f 666f     .4.0-43-Microsof
    9606:	0d74 000a 1b20 315b 416d 6372 6968 6574     t... .[1mArchite
    9616:	7463 7275 3a65 5b1b 6d30 2020 7261 0d6d     cture:.[0m  arm.
    9626:	000a 1b20 315b 436d 6968 3a70 5b1b 6d30     .. .[1mChip:.[0m
    9636:	2020 2020 2020 2020 2020 6b6d 3032 7864               mk20dx
    9646:	3532 7636 686c 0d37 000a 1b20 315b 436d     256vlh7... .[1mC
    9656:	5550 1b3a 305b 206d 2020 2020 2020 2020     PU:.[0m         
    9666:	2020 6f63 7472 7865 6d2d 0d34 000a 1b20       cortex-m4... .
    9676:	315b 446d 7665 6369 3a65 5b1b 6d30 2020     [1mDevice:.[0m  
    9686:	2020 2020 2020 654b 6279 616f 6472 0a0d           Keyboard..
    9696:	2000 5b1b 6d31 6f4d 7564 656c 3a73 5b1b     . .[1mModules:.[
    96a6:	6d30 2020 2020 2020 5320 6163 286e 6857     0m       Scan(Wh
    96b6:	7469 4665 786f 2029 614d 7263 286f 6150     iteFox) Macro(Pa
    96c6:	7472 6169 4d6c 7061 2029 754f 7074 7475     rtialMap) Output
    96d6:	7028 726a 5563 4253 2029 6544 7562 2867     (pjrcUSB) Debug(
    96e6:	7566 6c6c 0d29 000a 1b20 315b 556d 696e     full)... .[1mUni
    96f6:	7571 2065 6449 1b3a 305b 206d 2020 2020     que Id:.[0m     
    9706:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    9716:	2d20 4820 7865 6420 6265 6775 6d20 646f      - Hex debug mod
    9726:	2065 6964 6173 6c62 6465 2e2e 0d2e 000a     e disabled......
    9736:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    9746:	202d 6548 2078 6564 7562 2067 6f6d 6564     - Hex debug mode
    9756:	6520 616e 6c62 6465 2e2e 0d2e 000a 5b1b      enabled.......[
    9766:	3100 353b 333b 0031 5245 4f52 0052 5b1b     .1;5;31.ERROR..[
    9776:	6d30 2d20 0020 0022 2022 7369 6e20 746f     0m - ."." is not
    9786:	6120 7620 6c61 6469 6320 6d6f 616d 646e      a valid command
    9796:	2e2e 742e 7079 2065 5b1b 3533 686d 6c65     ...type .[35mhel
    97a6:	1b70 305b 006d 5b1b 3b31 3b35 3133 456d     p.[0m..[1;5;31mE
    97b6:	5252 524f 5b1b 6d30 2d20 4d20 7861 6e20     RROR.[0m - Max n
    97c6:	6d75 6562 2072 666f 6420 6369 6974 6e6f     umber of diction
    97d6:	7261 6569 2073 6564 6966 656e 2064 6c61     aries defined al
    97e6:	6572 6461 2e79 2e2e 0a0d 1b00 325b 0d4b     ready.......[2K.
    97f6:	1b00 315b 333b 6d34 1b3a 305b 206d 1b00     ..[1;34m:.[0m ..
    9806:	315b 353b 333b 6d31 5245 4f52 1b52 305b     [1;5;31mERROR.[0
    9816:	206d 202d 6553 6972 6c61 6c20 6e69 2065     m - Serial line 
    9826:	7562 6666 7265 6920 2073 7566 6c6c 202c     buffer is full, 
    9836:	7264 706f 6970 676e 6320 6168 6172 7463     dropping charact
    9846:	7265 6120 646e 7220 7365 7465 6974 676e     er and resetting
    9856:	2e2e 0d2e 000a 5b1b 0d73 000a 5b1b 4b32     .......[s....[2K
    9866:	1b00 755b 0800 0820 6300 656c 7261 6300     ..[u.. ..clear.c
    9876:	696c 6544 7562 0067 6568 706c 6c00 6465     liDebug.help.led
    9886:	7200 6c65 616f 0064 6572 6573 0074 6572     .reload.reset.re
    9896:	7473 7261 0074 6576 7372 6f69 006e          start.version.

000098a4 <resetCLIDict_DescEntry>:
    98a4:	6552 6573 7374 7420 6568 7420 7265 696d     Resets the termi
    98b4:	616e 206c 6162 6b63 7420 206f 6e69 7469     nal back to init
    98c4:	6169 206c 6573 7474 6e69 7367 002e 0000     ial settings....

000098d4 <basicCLIDict>:
    98d4:	986f 0000 93c9 0000 5d85 0000 9875 0000     o........]..u...
    98e4:	99e7 0000 5f5d 0000 987e 0000 936a 0000     ....]_..~...j...
    98f4:	5dc1 0000 9883 0000 9940 0000 5e71 0000     .]......@...q^..
    9904:	9887 0000 93db 0000 5d91 0000 988e 0000     .........]......
    9914:	98a4 0000 5db5 0000 9894 0000 9382 0000     .....]..........
    9924:	5e85 0000 989c 0000 9406 0000 5e89 0000     .^...........^..
    9934:	0000 0000 0000 0000 0000 0000               ............

00009940 <ledCLIDict_DescEntry>:
    9940:	6e45 6261 656c 2f73 6944 6173 6c62 7365     Enables/Disables
    9950:	6920 646e 6369 7461 726f 4c20 4445 202e      indicator LED. 
    9960:	7254 2079 2061 6f63 7075 656c 7420 6d69     Try a couple tim
    9970:	7365 6a20 7375 2074 6e69 6320 7361 2065     es just in case 
    9980:	6874 2065 454c 2044 7369 6920 206e 6e61     the LED is in an
    9990:	6f20 6464 7320 6174 6574 0d2e 090a 1b09      odd state......
    99a0:	335b 6d33 6157 6e72 6e69 1b67 305b 3a6d     [33mWarning.[0m:
    99b0:	4d20 7961 6120 7664 7265 6573 796c 6120      May adversely a
    99c0:	6666 6365 2074 6f73 656d 6d20 646f 6c75     ffect some modul
    99d0:	7365 2e2e 002e                              es....

000099d6 <basicCLIDictName>:
    99d6:	6547 656e 6172 206c 6f43 6d6d 6e61 7364     General Commands
    99e6:	4500                                             .

000099e7 <cliDebugCLIDict_DescEntry>:
    99e7:	6e45 6261 656c 2f73 6944 6173 6c62 7365     Enables/Disables
    99f7:	6820 7865 6f20 7475 7570 2074 666f 7420      hex output of t
    9a07:	6568 6d20 736f 2074 6572 6563 746e 6320     he most recent c
    9a17:	696c 6920 706e 7475 002e 0000 0000               li input.....
